

    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\main.dart
import 'package:flutter/material.dart';
import 'package:alc_eljadida_tests/screens/instruction_page.dart';
import 'package:alc_eljadida_tests/screens/registration_page.dart';
import 'package:alc_eljadida_tests/services/auth_service.dart';
import 'package:media_kit/media_kit.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  MediaKit.ensureInitialized();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  final AuthService _authService = AuthService();

  MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Language Test',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        scaffoldBackgroundColor: Colors.white,
      ),
      debugShowCheckedModeBanner: false,
      home: FutureBuilder<bool>(
        future: _authService.isLoggedIn(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Scaffold(
              body: Center(
                child: CircularProgressIndicator(
                  color: Color(0xFF2193b0),
                ),
              ),
            );
          }

          if (snapshot.data == true) {
            return InstructionPage();
          }

          return RegistrationPage();
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\models\test_result.dart
class TestResult {
  final String userId;
  final String firstName;
  final String lastName;
  final String testType;
  final int score;
  final int totalQuestions;
  final DateTime timestamp;

  TestResult({
    required this.userId,
    required this.firstName,
    required this.lastName,
    required this.testType,
    required this.score,
    required this.totalQuestions,
    required this.timestamp,
  });

  factory TestResult.fromJson(Map<String, dynamic> json) {
    return TestResult(
      userId: json['userId'] as String,
      firstName: json['firstName'] as String,
      lastName: json['lastName'] as String,
      testType: json['testType'] as String,
      score: json['score'] as int,
      totalQuestions: json['totalQuestions'] as int,
      timestamp: DateTime.parse(json['timestamp'] as String),
    );
  }

  Map<String, dynamic> toJson() => {
    'userId': userId,
    'firstName': firstName,
    'lastName': lastName,
    'testType': testType,
    'score': score,
    'totalQuestions': totalQuestions,
    'timestamp': timestamp.toIso8601String(),
  };
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\dashboard_page.dart
import 'package:alc_eljadida_tests/services/score_calculator.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:alc_eljadida_tests/services/firestore_service.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:intl/intl.dart';
import 'package:alc_eljadida_tests/screens/selection_page.dart';
import 'package:printing/printing.dart';
import 'package:alc_eljadida_tests/services/pdf_report_service.dart';
import 'dart:io';
import 'package:file_picker/file_picker.dart';
import 'package:alc_eljadida_tests/screens/registration_page.dart';


class DashboardPage extends StatefulWidget {
  const DashboardPage({Key? key}) : super(key: key);

  @override
  _DashboardPageState createState() => _DashboardPageState();
}

class _DashboardPageState extends State<DashboardPage> {
  final FirestoreService _firestoreService = FirestoreService();
  final DateFormat _dateFormatter = DateFormat('MMM dd, yyyy HH:mm');
  bool _isLoading = true;

  int _totalStudents = 0;
  int _totalTests = 0;
  double _averageScore = 0;
  List<Map<String, dynamic>> _recentTests = [];
  Map<String, int> _testTypeCounts = {
    'Listening': 0,
    'Reading': 0,
    'Grammar': 0
  };

  String _selectedPage = 'Overview';

  String _searchQuery = '';
  List<Map<String, dynamic>> _searchResults = [];
  bool _isSearching = false;

  String _codeSearchQuery = '';
  List<Map<String, dynamic>> _codeSearchResults = [];
  bool _isCodeSearching = false;

  final Map<String, bool> _generatingPDFs = {};

  @override
  void initState() {
    super.initState();
    _loadDashboardData();
  }

  Future<void> _loadDashboardData() async {
    try {
      setState(() => _isLoading = true);

      final stats = await _firestoreService.fetchDashboardStats();

      setState(() {
        _totalStudents = stats['totalStudents'] as int;
        _totalTests = stats['totalTests'] as int;
        _averageScore = stats['averageScore'] as double;
        _recentTests = List<Map<String, dynamic>>.from(stats['recentTests']);
        _testTypeCounts = Map<String, int>.from(stats['testTypeCounts']);
        _isLoading = false;
      });
    } catch (e) {
      print('Error loading dashboard data: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to load dashboard data'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
            width: 400,
            margin: EdgeInsets.only(bottom: 40),
          ),
        );
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _searchStudent(String query) async {
    if (query.isEmpty) {
      setState(() {
        _searchResults = [];
        _isSearching = false;
      });
      return;
    }

    setState(() => _isSearching = true);

    try {
      final results = await _firestoreService.searchStudentResults(query);
      setState(() {
        _searchResults = results;
        _isSearching = false;
      });
    } catch (e) {
      print('Error searching student: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error searching for student'),
          backgroundColor: Colors.red,
        ),
      );
      setState(() => _isSearching = false);
    }
  }

  Future<void> _searchByCode(String code) async {
    if (code.isEmpty) {
      setState(() {
        _codeSearchResults = [];
        _isCodeSearching = false;
      });
      return;
    }

    setState(() => _isCodeSearching = true);

    try {
      final results = await _firestoreService.searchBySchoolCode(code);
      setState(() {
        _codeSearchResults = results;
        _isCodeSearching = false;
      });
    } catch (e) {
      print('Error searching by code: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error searching by code'),
          backgroundColor: Colors.red,
        ),
      );
      setState(() => _isCodeSearching = false);
    }
  }

  Future<void> _generatePDFReport(Map<String, dynamic> result) async {
    final timestamp = result['timestamp']?['timestampValue'];
    if (timestamp == null) return;

    setState(() {
      _generatingPDFs[timestamp] = true;
    });

    try {
      final firstName = result['firstName']?['stringValue'] ?? 'Unknown';
      final lastName = result['lastName']?['stringValue'] ?? 'Unknown';
      
      final answers = await _firestoreService.fetchTestAnswers(timestamp);
      
      final pdfData = await PDFReportService.generateTestReport(
        firstName: firstName,
        lastName: lastName,
        testData: result,
        answers: answers.map((a) => Map<String, dynamic>.from(a)).toList(),
      );

      final String? outputFile = await FilePicker.platform.saveFile(
        dialogTitle: 'Save PDF Report',
        fileName: '${firstName}_${lastName}_test_report.pdf',
        type: FileType.custom,
        allowedExtensions: ['pdf'],
      );

      if (outputFile != null) {
        final String filePath = outputFile.toLowerCase().endsWith('.pdf') 
            ? outputFile 
            : '$outputFile.pdf';
        
        await File(filePath).writeAsBytes(pdfData);
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('PDF Report saved successfully'),
              backgroundColor: Colors.green,
            ),
          );
        }
      }
    } catch (e) {
      print('Error generating PDF: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Failed to generate PDF report'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _generatingPDFs[timestamp] = false;
      });
    }
  }

  Widget _buildSidebarButton(String label, IconData icon,
      {bool isSelected = false, VoidCallback? onTap}) {
    return MouseRegion(
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: onTap ??
            () {
              setState(() {
                _selectedPage = label;
              });
            },
        child: Container(
          margin: EdgeInsets.only(bottom: 8),
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          decoration: BoxDecoration(
            color: isSelected
                ? Color(0xFF2193b0).withOpacity(0.1)
                : Colors.transparent,
            borderRadius: BorderRadius.circular(12),
          ),
          child: Row(
            children: [
              Icon(
                icon,
                color: isSelected ? Color(0xFF2193b0) : Colors.grey[600],
                size: 24,
              ),
              SizedBox(width: 16),
              Text(
                label,
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  color: isSelected ? Color(0xFF2193b0) : Colors.grey[600],
                  fontWeight:
                      isSelected ? FontWeight.w600 : FontWeight.normal,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatsRow() {
    return Row(
      children: [
        _buildStatCard(
          'Total Students',
          _totalStudents.toString(),
          MaterialCommunityIcons.account_group,
          Color(0xFF2193b0),
          'Active students who have taken tests',
        ),
        SizedBox(width: 24),
        _buildStatCard(
          'Total Tests',
          _totalTests.toString(),
          MaterialCommunityIcons.file_document,
          Colors.orange,
          'Total number of tests completed',
        ),
        SizedBox(width: 24),
        _buildStatCard(
          'Average Score',
          '${_averageScore.toStringAsFixed(1)}%',
          MaterialCommunityIcons.chart_line,
          Colors.green,
          'Average score across all tests',
        ),
      ],
    );
  }

  Widget _buildStatCard(String title, String value, IconData icon, Color color,
      String tooltip) {
    return Expanded(
      child: MouseRegion(
        cursor: SystemMouseCursors.click,
        child: Card(
          elevation: 0,
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          child: Container(
            padding: EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(16),
            ),
            child: Row(
              children: [
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: color.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Icon(icon, color: color, size: 32),
                ),
                SizedBox(width: 24),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          color: Colors.grey[600],
                        ),
                      ),
                      SizedBox(height: 8),
                      Text(
                        value,
                        style: GoogleFonts.poppins(
                          fontSize: 32,
                          fontWeight: FontWeight.bold,
                          color: color,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildRecentTestsCard() {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        padding: EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Recent Test Results',
                  style: GoogleFonts.poppins(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
                MouseRegion(
                  cursor: SystemMouseCursors.click,
                  child: TextButton.icon(
                    onPressed: () {},
                    icon: Icon(Icons.visibility),
                    label: Text('View All'),
                    style: TextButton.styleFrom(
                      foregroundColor: Color(0xFF2193b0),
                    ),
                  ),
                ),
              ],
            ),
            SizedBox(height: 24),
            SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: DataTable(
                headingRowHeight: 48,
                dataRowHeight: 56,
                columnSpacing: 32,
                headingTextStyle: GoogleFonts.poppins(
                  fontWeight: FontWeight.w600,
                  color: Color(0xFF2193b0),
                ),
                columns: [
                  DataColumn(label: Text('Student Name')),
                  DataColumn(label: Text('Listening (/20)')),
                  DataColumn(label: Text('Reading (/20)')),
                  DataColumn(label: Text('Grammar (/30)')),
                  DataColumn(label: Text('Total (/70)')),
                  DataColumn(label: Text('Date')),
                  DataColumn(label: Text('Actions')),
                ],
                rows: _recentTests.map((result) {
                  final listeningScore = int.parse(
                      result['listeningScore']?['integerValue'] ?? '0');
                  final readingScore =
                      int.parse(result['readingScore']?['integerValue'] ?? '0');
                  final grammarScore =
                      int.parse(result['grammarScore']?['integerValue'] ?? '0');
                  final totalScore =
                      listeningScore + readingScore + grammarScore;
                  final timestamp =
                      DateTime.parse(result['timestamp']['timestampValue']);

                  return DataRow(
                    cells: [
                      DataCell(Text(
                        '${result['firstName']['stringValue']} ${result['lastName']['stringValue']}',
                        style: GoogleFonts.poppins(fontWeight: FontWeight.w500),
                      )),
                      DataCell(_buildScoreCell(listeningScore, 20)),
                      DataCell(_buildScoreCell(readingScore, 20)),
                      DataCell(_buildScoreCell(grammarScore, 30)),
                      DataCell(_buildScoreCell(totalScore, 70)),
                      DataCell(Text(
                        _dateFormatter.format(timestamp),
                        style: GoogleFonts.poppins(),
                      )),
                      DataCell(
                        Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            MouseRegion(
                              cursor: SystemMouseCursors.click,
                              child: IconButton(
                                icon: _generatingPDFs[result['timestamp']?['timestampValue']] == true
                                  ? SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF2193b0)),
                                      ),
                                    )
                                  : Icon(Icons.download_rounded, 
                                      color: Color(0xFF2193b0)),
                                onPressed: _generatingPDFs[result['timestamp']?['timestampValue']] == true
                                  ? null
                                  : () => _generatePDFReport(result),
                                tooltip: 'Download PDF Report',
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  );
                }).toList(),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTestDistributionCard() {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        padding: EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Test Distribution',
              style: GoogleFonts.poppins(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Color(0xFF2193b0),
              ),
            ),
            SizedBox(height: 24),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: _testTypeCounts.entries.map((entry) {
                return Expanded(
                  child: Container(
                    padding: EdgeInsets.all(16),
                    margin: EdgeInsets.symmetric(horizontal: 8),
                    decoration: BoxDecoration(
                      color: Color(0xFF2193b0).withOpacity(0.05),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(
                        color: Color(0xFF2193b0).withOpacity(0.1),
                      ),
                    ),
                    child: Column(
                      children: [
                        Text(
                          entry.value.toString(),
                          style: GoogleFonts.poppins(
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFF2193b0),
                          ),
                        ),
                        SizedBox(height: 8),
                        Text(
                          '${entry.key}\nTests',
                          textAlign: TextAlign.center,
                          style: GoogleFonts.poppins(
                            fontSize: 14,
                            color: Colors.grey[600],
                            height: 1.3,
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              }).toList(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLevelBadge(int totalScore) {
    final alcLevel = ScoreCalculator.calculateALCLevel(totalScore);
    Color badgeColor;
    
    // Color coding for different levels
    if (alcLevel.startsWith('Adv')) {
      badgeColor = Colors.purple;
    } else if (alcLevel.startsWith('Int')) {
      badgeColor = Colors.blue;
    } else {
      badgeColor = Colors.green;
    }

    return Container(
      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: badgeColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: badgeColor.withOpacity(0.3)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            Icons.school,
            size: 16,
            color: badgeColor,
          ),
          SizedBox(width: 6),
          Text(
            'ALC Level: $alcLevel',
            style: GoogleFonts.poppins(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: badgeColor,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTopPerformersCard() {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        padding: EdgeInsets.all(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Recent Test Results',
              style: GoogleFonts.poppins(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Color(0xFF2193b0),
              ),
            ),
            SizedBox(height: 24),
            ListView.builder(
              shrinkWrap: true,
              itemCount: _recentTests.length.clamp(0, 5),
              itemBuilder: (context, index) {
                final result = _recentTests[index];
                final totalScore = int.parse(result['totalScore']?['integerValue'] ?? '0');
                
                return Container(
                  margin: EdgeInsets.only(bottom: 16),
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Color(0xFF2193b0).withOpacity(0.05),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    children: [
                      // Student info
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '${result['firstName']['stringValue']} ${result['lastName']['stringValue']}',
                              style: GoogleFonts.poppins(
                                fontWeight: FontWeight.w600,
                                fontSize: 16,
                              ),
                            ),
                            SizedBox(height: 4),
                            Text(
                              _dateFormatter.format(DateTime.parse(
                                  result['timestamp']['timestampValue'])),
                              style: GoogleFonts.poppins(
                                color: Colors.grey[600],
                                fontSize: 12,
                              ),
                            ),
                          ],
                        ),
                      ),
                      // Score and level
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                            decoration: BoxDecoration(
                              color: _getScoreColor(totalScore).withOpacity(0.1),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Text(
                              '$totalScore/70',
                              style: GoogleFonts.poppins(
                                color: _getScoreColor(totalScore),
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                              ),
                            ),
                          ),
                          SizedBox(height: 4),
                          _buildLevelBadge(totalScore),
                        ],
                      ),
                    ],
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildScoreCell(int score, int maxScore) {
    double percentage = (score / maxScore) * 100;
    Color color = _getScoreColor(percentage.round());

    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Text(
        '$score/$maxScore',
        style: GoogleFonts.poppins(
          color: color,
          fontWeight: FontWeight.w500,
          fontSize: 14,
        ),
      ),
    );
  }

  Color _getScoreColor(int score) {
    if (score >= 90) return Colors.green.shade700;
    if (score >= 80) return Colors.green;
    if (score >= 70) return Colors.blue;
    if (score >= 60) return Colors.orange;
    return Colors.red;
  }

  Widget _buildMainContent() {
    if (_isLoading) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF2193b0)),
            ),
            SizedBox(height: 16),
            Text(
              'Loading dashboard data...',
              style: GoogleFonts.poppins(
                color: Color(0xFF2193b0),
                fontSize: 16,
              ),
            ),
          ],
        ),
      );
    }

    return Container(
      width: double.infinity,
      height: double.infinity,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
        ),
      ),
      child: SingleChildScrollView(
        padding: EdgeInsets.all(32),
        child: Container(
          constraints: BoxConstraints(
            minHeight: MediaQuery.of(context).size.height - 64,
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildHeader(),
              SizedBox(height: 32),
              if (_selectedPage == 'Overview') ...[
                _buildStatsRow(),
                SizedBox(height: 32),
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Expanded(
                      flex: 2,
                      child: _buildRecentTestsCard(),
                    ),
                    SizedBox(width: 32),
                    Expanded(
                      child: Column(
                        children: [
                          _buildTestDistributionCard(),
                          SizedBox(height: 32),
                          _buildTopPerformersCard(),
                        ],
                      ),
                    ),
                  ],
                ),
              ],
              if (_selectedPage == 'Students') _buildRecentTestsCard(),
              if (_selectedPage == 'Test Results')
                Column(
                  children: [
                    _buildTestDistributionCard(),
                    SizedBox(height: 32),
                    _buildAllTestResultsCard(),
                  ],
                ),
              if (_selectedPage == 'Analytics')
                Column(
                  children: [
                    _buildStatsRow(),
                    SizedBox(height: 32),
                    _buildTestDistributionCard(),
                    SizedBox(height: 32),
                    _buildTopPerformersCard(),
                  ],
                ),
              if (_selectedPage == 'Search') _buildSearchCard(),
              if (_selectedPage == 'Code Search') _buildCodeSearchCard(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              _selectedPage,
              style: GoogleFonts.poppins(
                fontSize: 32,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            Text(
              _getPageDescription(),
              style: GoogleFonts.poppins(
                fontSize: 16,
                color: Colors.white.withOpacity(0.9),
              ),
            ),
          ],
        ),
        MouseRegion(
          cursor: SystemMouseCursors.click,
          child: ElevatedButton.icon(
            onPressed: _loadDashboardData,
            icon: Icon(Icons.refresh_rounded, size: 20),
            label: Text(
              'Refresh Data',
              style: GoogleFonts.poppins(
                fontWeight: FontWeight.w500,
              ),
            ),
            style: ElevatedButton.styleFrom(
              foregroundColor: Color(0xFF2193b0),
              backgroundColor: Colors.white,
              padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          ),
        ),
      ],
    );
  }

  String _getPageDescription() {
    switch (_selectedPage) {
      case 'Overview':
        return 'Monitor test performance and student progress';
      case 'Students':
        return 'View all student test results';
      case 'Test Results':
        return 'Analyze test distributions and recent results';
      case 'Analytics':
        return 'View detailed performance metrics';
      default:
        return '';
    }
  }

  Widget _buildSearchCard() {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        padding: EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Student Search',
              style: GoogleFonts.poppins(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Color(0xFF2193b0),
              ),
            ),
            SizedBox(height: 24),
            TextField(
              style: GoogleFonts.poppins(),
              decoration: InputDecoration(
                hintText: 'Search by student name...',
                prefixIcon: Icon(Icons.search, color: Color(0xFF2193b0)),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide(color: Colors.grey[300]!),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide:
                      BorderSide(color: Color(0xFF2193b0), width: 2),
                ),
              ),
              onChanged: (value) {
                setState(() => _searchQuery = value);
                _searchStudent(value);
              },
            ),
            SizedBox(height: 24),
            if (_isSearching)
              Center(
                child: CircularProgressIndicator(
                  valueColor:
                      AlwaysStoppedAnimation<Color>(Color(0xFF2193b0)),
                ),
              )
            else if (_searchQuery.isNotEmpty && _searchResults.isEmpty)
              Center(
                child: Text(
                  'No results found',
                  style: GoogleFonts.poppins(
                    color: Colors.grey[600],
                    fontSize: 16,
                  ),
                ),
              )
            else if (_searchResults.isNotEmpty)
              SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: DataTable(
                  headingRowHeight: 48,
                  dataRowHeight: 56,
                  columnSpacing: 32,
                  headingTextStyle: GoogleFonts.poppins(
                    fontWeight: FontWeight.w600,
                    color: Color(0xFF2193b0),
                  ),
                  columns: [
                    DataColumn(label: Text('Student Name')),
                    DataColumn(label: Text('Status')),
                    DataColumn(label: Text('Email')),
                    DataColumn(label: Text('Phone')),
                    DataColumn(label: Text('Birth Date')),
                    DataColumn(label: Text('Listening')),
                    DataColumn(label: Text('Reading')),
                    DataColumn(label: Text('Grammar')),
                    DataColumn(label: Text('Total')),
                    DataColumn(label: Text('Date')),
                    DataColumn(label: Text('Actions')),
                  ],
                  rows: _searchResults.map((result) {
                    final firstName =
                        result['firstName']?['stringValue'] ?? '';
                    final lastName =
                        result['lastName']?['stringValue'] ?? '';
                    final email = result['email']?['stringValue'] ?? '';
                    final phone = result['phone']?['stringValue'] ?? '';
                    final birthDate =
                        result['birthDate']?['stringValue'] ?? '';
                    final isExistingStudent =
                        result['isExistingStudent']?['booleanValue'] ?? false;

                    final listeningScore = int.tryParse(
                            result['listeningScore']?['integerValue']
                                    ?.toString() ??
                                '0') ??
                        0;
                    final readingScore = int.tryParse(
                            result['readingScore']?['integerValue']
                                    ?.toString() ??
                                '0') ??
                        0;
                    final grammarScore = int.tryParse(
                            result['grammarScore']?['integerValue']
                                    ?.toString() ??
                                '0') ??
                        0;

                    final totalScore =
                        listeningScore + readingScore + grammarScore;

                    DateTime? timestamp;
                    try {
                      timestamp = DateTime.parse(result['timestamp']
                              ?['timestampValue']
                              ?.toString() ??
                          '');
                    } catch (e) {
                      timestamp = null;
                    }

                    return DataRow(
                      cells: [
                        DataCell(Text(
                          '$firstName $lastName',
                          style:
                              GoogleFonts.poppins(fontWeight: FontWeight.w500),
                        )),
                        DataCell(Container(
                          padding: EdgeInsets.symmetric(
                              horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: isExistingStudent
                                ? Colors.green.withOpacity(0.1)
                                : Colors.orange.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            isExistingStudent ? 'ALC Student' : 'New Student',
                            style: GoogleFonts.poppins(
                              color: isExistingStudent
                                  ? Colors.green
                                  : Colors.orange,
                              fontWeight: FontWeight.w500,
                              fontSize: 12,
                            ),
                          ),
                        )),
                        DataCell(Text(email)),
                        DataCell(Text(phone)),
                        DataCell(Text(birthDate)),
                        DataCell(_buildScoreCell(listeningScore, 20)),
                        DataCell(_buildScoreCell(readingScore, 20)),
                        DataCell(_buildScoreCell(grammarScore, 30)),
                        DataCell(_buildScoreCell(totalScore, 70)),
                        DataCell(Text(timestamp != null
                            ? _dateFormatter.format(timestamp)
                            : 'N/A')),
                        DataCell(
                          Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              MouseRegion(
                                cursor: SystemMouseCursors.click,
                                child: IconButton(
                                  icon: _generatingPDFs[result['timestamp']?['timestampValue']] == true
                                    ? SizedBox(
                                        width: 20,
                                        height: 20,
                                        child: CircularProgressIndicator(
                                          strokeWidth: 2,
                                          valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF2193b0)),
                                        ),
                                      )
                                    : Icon(Icons.download_rounded, 
                                        color: Color(0xFF2193b0)),
                                  onPressed: _generatingPDFs[result['timestamp']?['timestampValue']] == true
                                    ? null
                                    : () => _generatePDFReport(result),
                                  tooltip: 'Download PDF Report',
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    );
                  }).toList(),
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildCodeSearchCard() {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        padding: EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
        ),
        constraints: BoxConstraints(
          minHeight: MediaQuery.of(context).size.height - 200,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  MaterialCommunityIcons.key_variant,
                  color: Color(0xFF2193b0),
                  size: 24,
                ),
                SizedBox(width: 12),
                Text(
                  'Search by School Code',
                  style: GoogleFonts.poppins(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
              ],
            ),
            SizedBox(height: 8),
            Text(
              'Enter the school code to find student results',
              style: GoogleFonts.poppins(
                fontSize: 14,
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 24),
            Container(
              constraints: BoxConstraints(maxWidth: 400),
              child: TextField(
                style: GoogleFonts.poppins(),
                decoration: InputDecoration(
                  hintText: 'Enter school code...',
                  prefixIcon: Icon(Icons.search, color: Color(0xFF2193b0)),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey[300]!),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide:
                        BorderSide(color: Color(0xFF2193b0), width: 2),
                  ),
                  suffixIcon: _isCodeSearching
                      ? Container(
                          width: 20,
                          height: 20,
                          margin: EdgeInsets.all(12),
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(
                                Color(0xFF2193b0)),
                          ),
                        )
                      : null,
                ),
                onChanged: (value) {
                  setState(() => _codeSearchQuery = value);
                  if (value.isNotEmpty) {
                    _searchByCode(value);
                  } else {
                    setState(() => _codeSearchResults = []);
                  }
                },
              ),
            ),
            SizedBox(height: 24),
            if (_isCodeSearching)
              Center(
                child: CircularProgressIndicator(
                  valueColor:
                      AlwaysStoppedAnimation<Color>(Color(0xFF2193b0)),
                ),
              )
            else if (_codeSearchQuery.isNotEmpty &&
                _codeSearchResults.isEmpty)
              Center(
                child: Column(
                  children: [
                    Icon(
                      Icons.search_off,
                      size: 48,
                      color: Colors.grey[400],
                    ),
                    SizedBox(height: 16),
                    Text(
                      'No results found for code: $_codeSearchQuery',
                      style: GoogleFonts.poppins(
                        color: Colors.grey[600],
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
              )
            else if (_codeSearchResults.isNotEmpty)
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Results found: ${_codeSearchResults.length}',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                          color: Color(0xFF2193b0),
                        ),
                      ),
                      if (_codeSearchResults.length > 1)
                        Text(
                          'School Code: $_codeSearchQuery',
                          style: GoogleFonts.poppins(
                            fontSize: 14,
                            color: Colors.grey[600],
                          ),
                        ),
                    ],
                  ),
                  SizedBox(height: 16),
                  SizedBox(
                    height: 400,
                    child: SingleChildScrollView(
                      child: SingleChildScrollView(
                        scrollDirection: Axis.horizontal,
                        child: DataTable(
                          headingRowHeight: 48,
                          dataRowHeight: 56,
                          columnSpacing: 32,
                          headingTextStyle: GoogleFonts.poppins(
                            fontWeight: FontWeight.w600,
                            color: Color(0xFF2193b0),
                          ),
                          columns: [
                            DataColumn(label: Text('Student Name')),
                            DataColumn(label: Text('Email')),
                            DataColumn(label: Text('Test Date')),
                            DataColumn(label: Text('Listening (/20)')),
                            DataColumn(label: Text('Reading (/20)')),
                            DataColumn(label: Text('Grammar (/30)')),
                            DataColumn(label: Text('Total (/70)')),
                            DataColumn(label: Text('EVOLVE Level')),
                            DataColumn(label: Text('Actions')),
                          ],
                          rows: _codeSearchResults.map((result) {
                            final firstName =
                                result['firstName']?['stringValue'] ?? '';
                            final lastName =
                                result['lastName']?['stringValue'] ?? '';
                            final email =
                                result['email']?['stringValue'] ?? '';

                            final listeningScore = int.tryParse(
                                    result['listeningScore']?['integerValue']
                                            ?.toString() ??
                                        '0') ??
                                0;
                            final readingScore = int.tryParse(
                                    result['readingScore']?['integerValue']
                                            ?.toString() ??
                                        '0') ??
                                0;
                            final grammarScore = int.tryParse(
                                    result['grammarScore']?['integerValue']
                                            ?.toString() ??
                                        '0') ??
                                0;

                            final totalScore =
                                listeningScore + readingScore + grammarScore;
                            final evolveLevel =
                                result['evolveLevel']?['stringValue'] ??
                                    'N/A';

                            DateTime? timestamp;
                            try {
                              timestamp = DateTime.parse(result['timestamp']
                                      ?['timestampValue']
                                      ?.toString() ??
                                  '');
                            } catch (e) {
                              timestamp = null;
                            }

                            return DataRow(
                              cells: [
                                DataCell(Text(
                                  '$firstName $lastName',
                                  style: GoogleFonts.poppins(
                                      fontWeight: FontWeight.w500),
                                )),
                                DataCell(Text(
                                  email,
                                  style: GoogleFonts.poppins(),
                                )),
                                DataCell(Text(timestamp != null
                                    ? _dateFormatter.format(timestamp)
                                    : 'N/A')),
                                DataCell(
                                    _buildScoreCell(listeningScore, 20)),
                                DataCell(_buildScoreCell(readingScore, 20)),
                                DataCell(_buildScoreCell(grammarScore, 30)),
                                DataCell(_buildScoreCell(totalScore, 70)),
                                DataCell(Container(
                                  padding: EdgeInsets.symmetric(
                                      horizontal: 8, vertical: 4),
                                  decoration: BoxDecoration(
                                    color: Color(0xFF2193b0)
                                        .withOpacity(0.1),
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  child: Text(
                                    evolveLevel,
                                    style: GoogleFonts.poppins(
                                      color: Color(0xFF2193b0),
                                      fontWeight: FontWeight.w500,
                                      fontSize: 12,
                                    ),
                                  ),
                                )),
                                DataCell(
                                  Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      MouseRegion(
                                        cursor: SystemMouseCursors.click,
                                        child: IconButton(
                                          icon: _generatingPDFs[result['timestamp']?['timestampValue']] == true
                                            ? SizedBox(
                                                width: 20,
                                                height: 20,
                                                child: CircularProgressIndicator(
                                                  strokeWidth: 2,
                                                  valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF2193b0)),
                                                ),
                                              )
                                            : Icon(Icons.download_rounded, 
                                                color: Color(0xFF2193b0)),
                                          onPressed: _generatingPDFs[result['timestamp']?['timestampValue']] == true
                                            ? null
                                            : () => _generatePDFReport(result),
                                          tooltip: 'Download PDF Report',
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            );
                          }).toList(),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildAllTestResultsCard() {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        padding: EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'All Test Results',
                  style: GoogleFonts.poppins(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
                MouseRegion(
                  cursor: SystemMouseCursors.click,
                  child: TextButton.icon(
                    onPressed: _loadDashboardData,
                    icon: Icon(Icons.refresh),
                    label: Text('Refresh'),
                    style: TextButton.styleFrom(
                      foregroundColor: Color(0xFF2193b0),
                    ),
                  ),
                ),
              ],
            ),
            SizedBox(height: 24),
            FutureBuilder<List<Map<String, dynamic>>>(
              future: _firestoreService.fetchAllTestResults(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(
                    child: CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF2193b0)),
                    ),
                  );
                }

                if (snapshot.hasError) {
                  return Center(
                    child: Text(
                      'Error loading test results',
                      style: GoogleFonts.poppins(color: Colors.red),
                    ),
                  );
                }

                final allTests = snapshot.data ?? [];

                return SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: DataTable(
                    headingRowHeight: 48,
                    dataRowHeight: 56,
                    columnSpacing: 32,
                    headingTextStyle: GoogleFonts.poppins(
                      fontWeight: FontWeight.w600,
                      color: Color(0xFF2193b0),
                    ),
                    columns: [
                      DataColumn(label: Text('Student Name')),
                      DataColumn(label: Text('Listening (/20)')),
                      DataColumn(label: Text('Reading (/20)')),
                      DataColumn(label: Text('Grammar (/30)')),
                      DataColumn(label: Text('Total (/70)')),
                      DataColumn(label: Text('EVOLVE Level')),
                      DataColumn(label: Text('Date')),
                      DataColumn(label: Text('Actions')),
                    ],
                    rows: allTests.map((result) {
                      final listeningScore = int.parse(
                          result['listeningScore']?['integerValue'] ?? '0');
                      final readingScore =
                          int.parse(result['readingScore']?['integerValue'] ?? '0');
                      final grammarScore =
                          int.parse(result['grammarScore']?['integerValue'] ?? '0');
                      final totalScore =
                          listeningScore + readingScore + grammarScore;
                      final timestamp =
                          DateTime.parse(result['timestamp']['timestampValue']);

                      return DataRow(
                        cells: [
                          DataCell(Text(
                            '${result['firstName']['stringValue']} ${result['lastName']['stringValue']}',
                            style: GoogleFonts.poppins(fontWeight: FontWeight.w500),
                          )),
                          DataCell(_buildScoreCell(listeningScore, 20)),
                          DataCell(_buildScoreCell(readingScore, 20)),
                          DataCell(_buildScoreCell(grammarScore, 30)),
                          DataCell(_buildScoreCell(totalScore, 70)),
                          DataCell(Text(
                            result['evolveLevel']?['stringValue'] ?? 'N/A',
                            style: GoogleFonts.poppins(),
                          )),
                          DataCell(Text(
                            _dateFormatter.format(timestamp),
                            style: GoogleFonts.poppins(),
                          )),
                          DataCell(
                            Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                MouseRegion(
                                  cursor: SystemMouseCursors.click,
                                  child: IconButton(
                                    icon: _generatingPDFs[result['timestamp']?['timestampValue']] == true
                                      ? SizedBox(
                                          width: 20,
                                          height: 20,
                                          child: CircularProgressIndicator(
                                            strokeWidth: 2,
                                            valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF2193b0)),
                                          ),
                                        )
                                      : Icon(Icons.download_rounded, 
                                          color: Color(0xFF2193b0)),
                                    onPressed: _generatingPDFs[result['timestamp']?['timestampValue']] == true
                                      ? null
                                      : () => _generatePDFReport(result),
                                    tooltip: 'Download PDF Report',
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      );
                    }).toList(),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  AppBar _buildAppBar(BuildContext context) {
    return AppBar(
      leading: IconButton(
        icon: Icon(
          Icons.arrow_back_rounded,
          color: const Color(0xFF2193b0),
          size: 28,
        ),
        onPressed: () {
          Navigator.of(context).pushReplacement(
            MaterialPageRoute(builder: (context) => SelectionPage()),
          );
        },
        tooltip: 'Back to Selection',
      ),
      title: Text(
        'ALC El Jadida',
        style: GoogleFonts.poppins(
          fontSize: 24,
          fontWeight: FontWeight.bold,
          color: const Color(0xFF2193b0),
        ),
      ),
      actions: [
        Padding(
          padding: const EdgeInsets.only(right: 16.0),
          child: IconButton(
            icon: Icon(
              Icons.logout_rounded,
              color: const Color(0xFF2193b0),
              size: 28,
            ),
            onPressed: () => _showLogoutConfirmation(context),
            tooltip: 'Logout',
          ),
        ),
      ],
    );
  }

  Future<void> _showLogoutConfirmation(BuildContext context) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          elevation: 16,
          child: Container(
            width: 400,
            padding: EdgeInsets.all(32),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Colors.white,
                  Colors.grey.shade50,
                ],
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.red.shade50,
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.warning_rounded,
                    size: 48,
                    color: Colors.red.shade400,
                  ),
                ),
                SizedBox(height: 24),
                Text(
                  'Confirm Logout',
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
                SizedBox(height: 16),
                Text(
                  'Are you sure you want to logout?',
                  style: GoogleFonts.poppins(
                    fontSize: 16,
                    color: Colors.grey[600],
                  ),
                ),
                SizedBox(height: 32),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(),
                      style: TextButton.styleFrom(
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                      ),
                      child: Text(
                        'Cancel',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          color: Colors.grey[600],
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pushAndRemoveUntil(
                          MaterialPageRoute(builder: (context) => RegistrationPage()),
                          (route) => false,
                        );
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                        backgroundColor: Colors.red,
                      ),
                      child: Text(
                        'Logout',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: _buildAppBar(context),
      body: Row(
        children: [
          // Sidebar
          Container(
            width: 280,
            padding: EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.only(
                topRight: Radius.circular(24),
                bottomRight: Radius.circular(24),
              ),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'ALC Dashboard',
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
                SizedBox(height: 48),

                // Navigation Buttons
                _buildSidebarButton(
                  'Overview',
                  MaterialCommunityIcons.view_dashboard_outline,
                  isSelected: _selectedPage == 'Overview',
                ),
                _buildSidebarButton(
                  'Students',
                  MaterialCommunityIcons.account_group_outline,
                  isSelected: _selectedPage == 'Students',
                ),
                _buildSidebarButton(
                  'Test Results',
                  MaterialCommunityIcons.file_document_outline,
                  isSelected: _selectedPage == 'Test Results',
                ),
                _buildSidebarButton(
                  'Analytics',
                  MaterialCommunityIcons.chart_box_outline,
                  isSelected: _selectedPage == 'Analytics',
                ),
                _buildSidebarButton(
                  'Search',
                  MaterialCommunityIcons.account_search,
                  isSelected: _selectedPage == 'Search',
                ),
                _buildSidebarButton(
                  'Code Search',
                  MaterialCommunityIcons.key_variant,
                  isSelected: _selectedPage == 'Code Search',
                ),
              ],
            ),
          ),

          // Main Content
          Expanded(
            child: _buildMainContent(),
          ),
        ],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\grammar_test_page.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:alc_eljadida_tests/services/test_session_service.dart';
import 'package:alc_eljadida_tests/services/auth_service.dart';
import 'package:alc_eljadida_tests/services/test_results_service.dart';
import 'package:alc_eljadida_tests/models/test_result.dart';
import 'package:alc_eljadida_tests/services/firestore_service.dart';
import 'package:alc_eljadida_tests/screens/home_page.dart';
import 'package:alc_eljadida_tests/services/score_calculator.dart';

class GrammarTestPage extends StatefulWidget {
  final Duration? remainingTime;
  final String firstName;
  final String lastName;
  final Function(Duration, int)? onTestComplete;
  
  const GrammarTestPage({
    Key? key, 
    this.remainingTime,
    required this.firstName,
    required this.lastName,
    this.onTestComplete,
  }) : super(key: key);

  @override
  _GrammarTestPageState createState() => _GrammarTestPageState();
}

class _GrammarTestPageState extends State<GrammarTestPage> {
  int _currentQuestionIndex = 0;
  String? _selectedAnswer;
  final int _totalTimeInMinutes = 15;  // Test duration in minutes
  late Timer _timer;
  Duration _remainingTime = Duration(minutes: 15);  // Also update this to match
  double _progress = 1.0;
  final TestSessionService _testSessionService = TestSessionService();
  final Map<int, String> _userAnswers = {};
  DateTime _startTime = DateTime.now();

  final List<Map<String, dynamic>> _questions = [
  {
    'question': 'Complete the sentence:',
    'sentence': 'My daughter sometimes _____ to school with her friends.',
    'options': ['walk', 'walks', 'walking', 'not walk'],
    'correctAnswer': 'walks'
  },
  {
    'question': 'Complete the question:',
    'sentence': '_____ eat dinner on Sundays?',
    'options': [
      'Where your family',
      'How is your family',
      'When your family do',
      'What time does your family'
    ],
    'correctAnswer': 'What time does your family'
  },
  {
    'question': 'Choose the correct form:',
    'sentence': '_____ a lot of people in the park today.',
    'options': ['There', 'There\'s', 'There are', 'There is no'],
    'correctAnswer': 'There are'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': '_____, but I\'m not very good.',
    'options': [
      'I can play the guitar',
      'I don\'t play the guitar',
      'I play the guitar very well',
      'I can\'t play the guitar well'
    ],
    'correctAnswer': 'I can play the guitar'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'We had a nice vacation. The weather _____ beautiful.',
    'options': ['did', 'was', 'does', 'were'],
    'correctAnswer': 'was'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'Tom _____ home right now. He\'s still at the office.',
    'options': [
      'isn\'t driving',
      'doesn\'t drive',
      'didn\'t drive',
      'drives'
    ],
    'correctAnswer': 'isn\'t driving'
  },
  {
    'question': 'Complete the question:',
    'sentence': 'Is it true? _____ a grandparent yesterday?',
    'options': [
      'Are you becoming',
      'Does she become',
      'Did he become',
      'They became'
    ],
    'correctAnswer': 'Did he become'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'I go to the gym _____ evenings. I only don\'t go on the weekend.',
    'options': ['some', 'most', 'all of the', 'many of the'],
    'correctAnswer': 'most'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'Susan\'s cousin is _____ player on our soccer team.',
    'options': ['bad', 'best', 'worse', 'the worst'],
    'correctAnswer': 'the worst'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'Our neighbor _____ the screen of his phone twice last year.',
    'options': ['breaks', 'is breaking', 'has broken', 'broke'],
    'correctAnswer': 'broke'
  },
  {
    'question': 'Complete the dialogue:',
    'sentence': 'A: I can\'t forget to make a reservation at the restaurant before noon.\nB: Don\'t worry. _____ you.',
    'options': [
      'I\'m reminding',
      'I\'ve reminded',
      'I\'ll remind',
      'I remind'
    ],
    'correctAnswer': 'I\'ll remind'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'We _____ for a hotel when the storm began.',
    'options': ['search', 'will search', 'have searched', 'were searching'],
    'correctAnswer': 'were searching'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'If you _____ concentrate on your work, you usually waste a lot of time.',
    'options': ['don\'t', 'won\'t', 'didn\'t', 'couldn\'t'],
    'correctAnswer': 'don\'t'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'I\'m exhausted. _____ to fix this machine since I got here this morning.',
    'options': ['I try', 'I\'ll try', 'I tried', 'I\'ve been trying'],
    'correctAnswer': 'I\'ve been trying'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'Several bridges _____ during the earthquake last year.',
    'options': [
      'badly damaged',
      'were badly damaged',
      'have badly damaged',
      'were badly damaging'
    ],
    'correctAnswer': 'were badly damaged'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'The agency _____ that our ideas for the poster seem a little old-fashioned.',
    'options': ['believes', 'is believing', 'was believed', 'has been believing'],
    'correctAnswer': 'believes'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'Superhero movies are a kind of entertainment _____ really attracted to.',
    'options': ['which', 'I\'m not', 'who they', 'that aren\'t'],
    'correctAnswer': 'I\'m not'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'More support _____ to groups dealing with environmental issues.',
    'options': [
      'is providing',
      'might provide',
      'must be provided',
      'should be providing'
    ],
    'correctAnswer': 'must be provided'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'Employees _____ show their ID cards, or they couldn\'t have access to the research facilities.',
    'options': [
      'were required to',
      'were allowed to',
      'didn\'t have to',
      'could'
    ],
    'correctAnswer': 'were required to'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'Our math teacher made _____ a hundred math problems in one hour.',
    'options': ['us to solve', 'be solved', 'us solve', 'solve'],
    'correctAnswer': 'us solve'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'The process _____ be very time-consuming before they launched the new system.',
    'options': ['might', 'would', 'ought to', 'used to'],
    'correctAnswer': 'used to'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'After some time together, those on John\'s team learned not to underestimate _____.',
    'options': ['each other', 'himself', 'another', 'itself'],
    'correctAnswer': 'each other'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'The man next door asked me _____ keep an eye on his apartment while he was away.',
    'options': ['I can', 'would I', 'if I could', 'whether will I'],
    'correctAnswer': 'if I could'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'Our niece is very hardworking and determined. She has never had any trouble _____ her exams.',
    'options': ['to pass', 'passing', 'passed', 'pass'],
    'correctAnswer': 'passing'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'If they _____ the damage more carefully, they would have found these other problems.',
    'options': [
      'would assess',
      'had assessed',
      'have assessed',
      'would have assessed'
    ],
    'correctAnswer': 'had assessed'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'By this time next Monday, _____ a new head of the sales department.',
    'options': [
      'we hire',
      'we\'re hiring',
      'we\'ll have hired',
      'we have been hiring'
    ],
    'correctAnswer': 'we\'ll have hired'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'The consultants proposed a number of alternatives, _____ the firm disregarded.',
    'options': [
      'much of what',
      'many of which',
      'some of whom',
      'none of whose'
    ],
    'correctAnswer': 'many of which'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'What _____ a couple of relaxing days at an unspoiled beach.',
    'options': [
      'they actually plan',
      'did they actually plan',
      'they actually planned was',
      'have they actually planned are'
    ],
    'correctAnswer': 'they actually planned was'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'We felt genuinely shocked. Never again _____ at such an overrated place.',
    'options': [
      'ate we',
      'we will eat',
      'did eat we',
      'would we eat'
    ],
    'correctAnswer': 'would we eat'
  },
  {
    'question': 'Complete the sentence:',
    'sentence': 'Authorities recommend that everyone _____ the highway until repairs are completed.',
    'options': ['avoid', 'avoided', 'would avoid', 'is going to avoid'],
    'correctAnswer': 'avoid'
  }
];


  @override
  void initState() {
    super.initState();
    _remainingTime = widget.remainingTime ?? Duration(minutes: _totalTimeInMinutes);
    _initializeTimer();
    _startTime = DateTime.now();
  }

  Future<void> _initializeTimer() async {
    final remainingTime = await _testSessionService.getGrammarRemainingTime();
    if (remainingTime != null) {
      setState(() {
        _remainingTime = remainingTime;
        _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
      });
    } else {
      await _testSessionService.startGrammarTest();
      setState(() {
        _remainingTime = Duration(minutes: _totalTimeInMinutes);
        _progress = 1.0;
      });
    }
    _startTimer();
  }

  void _startTimer() {
    const oneSecond = Duration(seconds: 1);
    _timer = Timer.periodic(oneSecond, (timer) async {
      final remainingTime = await _testSessionService.getGrammarRemainingTime();
      
      if (remainingTime == null || remainingTime.inSeconds <= 0) {
        _timer.cancel();
        _handleTimeUp();
        return;
      }

      if (mounted) {
        setState(() {
          _remainingTime = remainingTime;
          _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
        });
      }
    });
  }
  

  Future<void> _handleTimeUp() async {
    // Cancel timer and update state immediately
    _timer.cancel();
    await _testSessionService.endGrammarTest();
    await _testSessionService.markTestAsCompleted('grammar');

    int correctAnswers = _calculateRawScore();
    final standardizedScore = ScoreCalculator.calculateGrammarScore(
      correctAnswers,
      _questions.length
    );
    
    final testDuration = DateTime.now().difference(_startTime);
    
    // Store completion status, score and duration
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('grammar_test_completed', true);
    await prefs.setInt('grammar_test_score', standardizedScore);
    await prefs.setInt('grammar_test_duration', testDuration.inSeconds);
    
    // Notify parent
    widget.onTestComplete?.call(testDuration, standardizedScore);

    try {
      final authService = AuthService();
      final testResultsService = TestResultsService(authService.projectId);
      
      final userId = await authService.getUserId();
      final result = TestResult(
        userId: userId ?? 'anonymous',
        firstName: widget.firstName,
        lastName: widget.lastName,
        testType: 'Grammar Test',
        score: standardizedScore,
        totalQuestions: _questions.length,
        timestamp: DateTime.now(),
      );
      
      await testResultsService.saveTestResult(result);
    } catch (e) {
      print('Error saving test result: $e');
    }

    if (mounted) {
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => HomePage()),
        (route) => false,
      );
    }
  }

  int _calculateScore() {
    int correctAnswers = _calculateRawScore();
    return ScoreCalculator.calculateGrammarScore(correctAnswers, _questions.length);
  }

  Future<void> _handleTestCompletion() async {
    try {
      _timer.cancel();
      await _testSessionService.endGrammarTest();
      await _testSessionService.markTestAsCompleted('grammar');
      
      // Calculate scores and prepare answers data
      int correctAnswers = 0;
      final answersToSave = <Map<String, dynamic>>[];

      // Process each question and answer
      for (int i = 0; i < _questions.length; i++) {
        final userAnswer = _userAnswers[i];
        final correctAnswer = _questions[i]['correctAnswer'];
        final isCorrect = userAnswer == correctAnswer;
        
        if (isCorrect) correctAnswers++;

        answersToSave.add({
          'question': _questions[i]['question'],
          'sentence': _questions[i]['sentence'],
          'userAnswer': userAnswer ?? 'No answer',
          'correctAnswer': correctAnswer,
          'isCorrect': isCorrect,
        });
      }

      final standardizedScore = ScoreCalculator.calculateGrammarScore(
        correctAnswers, 
        _questions.length
      );
      
      final testDuration = DateTime.now().difference(_startTime);
      final timestamp = DateTime.now();

      // Save test data locally
      final prefs = await SharedPreferences.getInstance();
      await Future.wait([
        prefs.setInt('grammar_test_score', standardizedScore),
        prefs.setInt('grammar_test_duration', testDuration.inSeconds),
        prefs.setBool('grammar_test_completed', true),
        prefs.setInt('grammar_total_questions', _questions.length),
      ]);

      // Save to Firestore
      final authService = AuthService();
      final testResultsService = TestResultsService(authService.projectId);
      final firestoreService = FirestoreService();
      
      final userId = await authService.getUserId();
      final result = TestResult(
        userId: userId ?? 'anonymous',
        firstName: widget.firstName,
        lastName: widget.lastName,
        testType: 'Grammar Test',
        score: standardizedScore,
        totalQuestions: _questions.length,
        timestamp: timestamp,
      );

      // Save both test result and detailed answers
      await Future.wait([
        testResultsService.saveTestResult(result),
        firestoreService.saveTestAnswers(
          firstName: widget.firstName,
          lastName: widget.lastName,
          testType: 'grammar',
          answers: answersToSave,
          timestamp: timestamp,
        ),
      ]);

      widget.onTestComplete?.call(testDuration, standardizedScore);
      
      if (!mounted) return;
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => HomePage()),
        (route) => false,
      );
      
    } catch (e) {
      print('Error completing grammar test: $e');
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to save test result. Please try again.'),
          action: SnackBarAction(
            label: 'Retry',
            onPressed: _handleTestCompletion,
          ),
        ),
      );
    }
  }

  // Helper method to calculate raw score
  int _calculateRawScore() {
    int correctAnswers = 0;
    for (int i = 0; i < _questions.length; i++) {
        if (_userAnswers.length > i && _userAnswers[i] == _questions[i]['correctAnswer']) {
            correctAnswers++;
        }
    }
    return correctAnswers;
}

  @override
  void dispose() {
    if (_timer.isActive) {
      _timer.cancel();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        automaticallyImplyLeading: false,
        title: Row(
          children: [
            Icon(
              MaterialCommunityIcons.format_text,
              color: Color(0xFF2193b0),
              size: 28,
            ),
            SizedBox(width: 12),
            Text(
              'Grammar Test',
              style: GoogleFonts.poppins(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Color(0xFF2193b0),
              ),
            ),
          ],
        ),
        centerTitle: false,
        actions: [
          Container(
            margin: EdgeInsets.only(right: 16),
            child: TextButton.icon(
              style: TextButton.styleFrom(
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                  side: BorderSide(color: Colors.red.shade400),
                ),
              ),
              icon: Icon(
                Icons.exit_to_app,
                color: Colors.red.shade400,
                size: 20,
              ),
              label: Text(
                'Exit Test',
                style: GoogleFonts.poppins(
                  color: Colors.red.shade400,
                  fontWeight: FontWeight.w500,
                ),
              ),
              onPressed: () => _showExitConfirmation(context),
            ),
          ),
        ],
        toolbarHeight: 72,
      ),
      body: Column(
        children: [
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                ),
              ),
              child: Padding(
                padding: const EdgeInsets.all(32.0),
                child: Row(
                  children: [
                    Expanded(
                      flex: 2,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          Expanded(
                            flex: 4,
                            child: Card(
                              margin: EdgeInsets.zero,
                              elevation: 8,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(24),
                              ),
                              child: Padding(
                                padding: const EdgeInsets.all(24.0),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'Question ${_currentQuestionIndex + 1} of ${_questions.length}',
                                      style: GoogleFonts.poppins(
                                        fontSize: 20,
                                        color: Colors.grey[600],
                                      ),
                                    ),
                                    SizedBox(height: 24),
                                    Text(
                                      _questions[_currentQuestionIndex]['question'],
                                      style: GoogleFonts.poppins(
                                        fontSize: 24,
                                        fontWeight: FontWeight.bold,
                                        color: const Color(0xFF2193b0),
                                      ),
                                    ),
                                    SizedBox(height: 24),
                                    Container(
                                      width: double.infinity,
                                      padding: EdgeInsets.all(20),
                                      decoration: BoxDecoration(
                                        color: Colors.grey[100],
                                        borderRadius: BorderRadius.circular(16),
                                      ),
                                      child: Text(
                                        _questions[_currentQuestionIndex]['sentence'],
                                        style: GoogleFonts.poppins(
                                          fontSize: 18,
                                          height: 1.6,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                          SizedBox(height: 16),
                          Card(
                            margin: EdgeInsets.zero,
                            elevation: 8,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(24),
                            ),
                            child: Padding(
                              padding: EdgeInsets.all(24),
                              child: Row(
                                children: [
                                  Icon(
                                    Icons.timer_outlined,
                                    color: _remainingTime.inMinutes < 5 
                                        ? Colors.red 
                                        : Color(0xFF2193b0),
                                    size: 28,
                                  ),
                                  SizedBox(width: 16),
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        Text(
                                          'Time Remaining',
                                          style: GoogleFonts.poppins(
                                            fontSize: 16,
                                            fontWeight: FontWeight.w500,
                                            color: Colors.grey[600],
                                          ),
                                        ),
                                        SizedBox(height: 8),
                                        Text(
                                          _formatTime(_remainingTime),
                                          style: GoogleFonts.poppins(
                                            fontSize: 24,
                                            fontWeight: FontWeight.bold,
                                            color: _remainingTime.inMinutes < 5 
                                                ? Colors.red 
                                                : Color(0xFF2193b0),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  Expanded(
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(10),
                                      child: LinearProgressIndicator(
                                        value: _progress,
                                        backgroundColor: Colors.grey.shade200,
                                        valueColor: AlwaysStoppedAnimation<Color>(
                                          _remainingTime.inMinutes < 5 
                                              ? Colors.red 
                                              : Color(0xFF2193b0),
                                        ),
                                        minHeight: 12,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    SizedBox(width: 32),
                    Expanded(
                      child: Card(
                        elevation: 8,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(24),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(24.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.stretch,
                            children: [
                              Text(
                                'Select Your Answer',
                                style: GoogleFonts.poppins(
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                  color: const Color(0xFF2193b0),
                                ),
                              ),
                              SizedBox(height: 24),
                              Expanded(
                                child: ListView.builder(
                                  itemCount: _questions[_currentQuestionIndex]['options'].length,
                                  itemBuilder: (context, index) {
                                    return _buildOptionButton(
                                      _questions[_currentQuestionIndex]['options'][index]
                                    );
                                  },
                                ),
                              ),
                              ElevatedButton(
                                style: ElevatedButton.styleFrom(
                                  padding: EdgeInsets.zero,
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(32),
                                  ),
                                ),
                                onPressed: _selectedAnswer != null
                                    ? () async {
                                        if (_currentQuestionIndex < _questions.length - 1) {
                                          setState(() {
                                            if (_selectedAnswer != null) {
                                              _userAnswers[_currentQuestionIndex] = _selectedAnswer!;
                                            }
                                            _currentQuestionIndex++;
                                            _selectedAnswer = null;
                                          });
                                        } else {
                                          // Save last answer
                                          if (_selectedAnswer != null) {
                                            _userAnswers[_currentQuestionIndex] = _selectedAnswer!;
                                          }
                                          
                                          await _handleTestCompletion();
                                        }
                                      }
                                    : null,
                                child: Ink(
                                  decoration: BoxDecoration(
                                    gradient: LinearGradient(
                                      colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                                      begin: Alignment.centerLeft,
                                      end: Alignment.centerRight,
                                    ),
                                    borderRadius: BorderRadius.circular(32),
                                  ),
                                  child: Container(
                                    height: 56,
                                    alignment: Alignment.center,
                                    child: Text(
                                      _currentQuestionIndex < _questions.length - 1
                                          ? 'Next Question'
                                          : 'Finish Test',
                                      style: GoogleFonts.poppins(
                                        fontSize: 18,
                                        color: Colors.white,
                                        fontWeight: FontWeight.w600,
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOptionButton(String option) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(24),
          border: Border.all(
            color: _selectedAnswer == option 
                ? Color(0xFF2193b0) 
                : Colors.grey.shade300,
            width: 2,
          ),
        ),
        child: InkWell(
          borderRadius: BorderRadius.circular(24),
          onTap: () {
            setState(() {
              _selectedAnswer = option;
            });
          },
          child: Container(
            padding: EdgeInsets.all(24),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: _selectedAnswer == option
                  ? LinearGradient(
                      colors: [
                        Color(0xFF2193b0).withOpacity(0.1),
                        Color(0xFF6dd5ed).withOpacity(0.1)
                      ],
                      begin: Alignment.centerLeft,
                      end: Alignment.centerRight,
                  )
                  : null,
            ),
            child: Row(
              children: [
                Container(
                  width: 28,
                  height: 28,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: _selectedAnswer == option 
                          ? Color(0xFF2193b0) 
                          : Colors.grey.shade400,
                      width: 2,
                    ),
                    color: _selectedAnswer == option 
                        ? Color(0xFF2193b0) 
                        : Colors.transparent,
                  ),
                  child: _selectedAnswer == option
                      ? Icon(
                          Icons.check,
                          size: 16,
                          color: Colors.white,
                        )
                      : null,
                ),
                SizedBox(width: 20),
                Expanded(
                  child: Text(
                    option,
                    style: GoogleFonts.poppins(
                      fontSize: 18,
                      color: _selectedAnswer == option 
                          ? Color(0xFF2193b0) 
                          : Colors.black87,
                      fontWeight: _selectedAnswer == option 
                          ? FontWeight.w600 
                          : FontWeight.normal,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _formatTime(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }

  Future<void> _showExitConfirmation(BuildContext context) async {
    final bool? shouldExit = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          elevation: 16,
          child: Container(
            width: 400, // Fixed width for the dialog
            padding: EdgeInsets.all(32),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Colors.white,
                  Colors.grey.shade50,
                ],
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.red.shade50,
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.warning_rounded,
                    size: 48,
                    color: Colors.red.shade400,
                  ),
                ),
                SizedBox(height: 24),
                
                Text(
                  'Exit Test?',
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
                SizedBox(height: 16),
                
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.grey.shade200,
                    ),
                  ),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.info_outline,
                            color: Colors.grey[600],
                            size: 20,
                          ),
                          SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              'Are you sure you want to exit?',
                              style: GoogleFonts.poppins(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                color: Colors.grey[800],
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 12),
                      Text(
                        'This will mark the test as completed with your current progress.',
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          color: Colors.grey[600],
                          height: 1.5,
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 32),
                
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(false),
                      style: TextButton.styleFrom(
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Text(
                        'Cancel',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[600],
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    
                    ElevatedButton(
                      onPressed: () => Navigator.of(context).pop(true),
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.zero,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Ink(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [Colors.red.shade400, Colors.red.shade600],
                            begin: Alignment.centerLeft,
                            end: Alignment.centerRight,
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Container(
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.exit_to_app, color: Colors.white),
                              SizedBox(width: 8),
                              Text(
                                'Exit Test',
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.white,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );

    if (shouldExit == true) {
      // Cancel timer and mark test as completed
      _timer.cancel();
      await _testSessionService.endGrammarTest();
      await _testSessionService.markTestAsCompleted('grammar');

      // Calculate scores
      int correctAnswers = _calculateRawScore();
      final standardizedScore = ScoreCalculator.calculateGrammarScore(
        correctAnswers,
        _questions.length
      );
      
      final testDuration = DateTime.now().difference(_startTime);
      
      // Store completion status, score and duration
      final prefs = await SharedPreferences.getInstance();
      await Future.wait([
        prefs.setBool('grammar_test_completed', true),
        prefs.setInt('grammar_test_score', standardizedScore),
        prefs.setInt('grammar_test_duration', testDuration.inSeconds),
        prefs.setInt('grammar_total_questions', _questions.length),
      ]);

      try {
        final authService = AuthService();
        final testResultsService = TestResultsService(authService.projectId);
        
        final userId = await authService.getUserId();
        final result = TestResult(
          userId: userId ?? 'anonymous',
          firstName: widget.firstName,
          lastName: widget.lastName,
          testType: 'Grammar Test',
          score: standardizedScore,
          totalQuestions: _questions.length,
          timestamp: DateTime.now(),
        );
        
        await testResultsService.saveTestResult(result);
      } catch (e) {
        print('Error saving test result: $e');
      }

      // Notify parent
      widget.onTestComplete?.call(testDuration, standardizedScore);

      if (mounted) {
        Navigator.of(context).pushAndRemoveUntil(
          MaterialPageRoute(builder: (context) => HomePage()),
          (route) => false,
        );
      }
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\home_page.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:alc_eljadida_tests/services/auth_service.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:just_audio/just_audio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:alc_eljadida_tests/screens/listening_test_page.dart';
import 'package:alc_eljadida_tests/screens/reading_test_page.dart';
import 'package:alc_eljadida_tests/screens/grammar_test_page.dart';
import 'package:alc_eljadida_tests/services/test_session_service.dart';
import 'package:alc_eljadida_tests/screens/registration_page.dart';
import 'dart:ui';
import 'package:alc_eljadida_tests/screens/test_results_page.dart';
import 'package:alc_eljadida_tests/services/firestore_service.dart';
import 'package:alc_eljadida_tests/screens/dashboard_page.dart';
import 'package:alc_eljadida_tests/widgets/video_overlay.dart';

class HomePage extends StatefulWidget {
  const HomePage({Key? key}) : super(key: key);

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final AuthService _authService = AuthService();
  final FirestoreService _firestoreService = FirestoreService();
  Map<String, dynamic> _userData = {};
  final TestSessionService _testSessionService = TestSessionService();
  bool _isListeningTestActive = false;
  bool _isReadingTestActive = false;
  bool _isGrammarTestActive = false;
  late StreamSubscription _testStatusSubscription;

  bool _allTestsCompleted = false;
  bool _resultsAlreadySaved = false;
  bool _isSaving = false;
  bool _hasCheckedResults = false;

  Duration _listeningTestDuration = Duration.zero;
  int _listeningTestScore = 0;
  Duration _readingTestDuration = Duration.zero;
  int _readingTestScore = 0;
  Duration _grammarTestDuration = Duration.zero;
  int _grammarTestScore = 0;

  static const String _SAVE_STATUS_KEY = 'results_save_status';
  String? _currentSessionId;

  @override
  void initState() {
    super.initState();
    _initializeSession();
    _loadUserData();
    _checkActiveTests();
    
    _testStatusSubscription = _testSessionService.testStatusStream.listen((testStatus) {
      if (mounted) {
        setState(() {
          _isListeningTestActive = testStatus.isListeningActive;
          _isReadingTestActive = testStatus.isReadingActive;
          _isGrammarTestActive = testStatus.isGrammarActive;
        });
      }
      _checkTestsAndSave();
    });
  }

  Future<void> _initializeSession() async {
    final prefs = await SharedPreferences.getInstance();
    _currentSessionId = prefs.getString('current_session_id') ?? 
                       DateTime.now().millisecondsSinceEpoch.toString();
    await prefs.setString('current_session_id', _currentSessionId!);
  }

  @override
  void dispose() {
    _testStatusSubscription.cancel();
    super.dispose();
  }

  Future<void> _loadUserData() async {
    try {
      final userData = await _authService.getUserData();
      if (mounted) {
        setState(() {
          _userData = userData;
        });
      }
    } catch (e) {
      print('Error loading user data: $e');
    }
  }

  Future<void> _checkActiveTests() async {
    final isListening = await _testSessionService.isListeningTestActive();
    final isReading = await _testSessionService.isReadingTestActive();
    final isGrammar = await _testSessionService.isGrammarTestActive();
    
    if (mounted) {
      setState(() {
        _isListeningTestActive = isListening;
        _isReadingTestActive = isReading;
        _isGrammarTestActive = isGrammar;
      });
    }
  }

  Future<void> _checkTestsAndSave() async {
    if (!mounted || _isSaving) return;

    final prefs = await SharedPreferences.getInstance();
    final isListeningCompleted = await _testSessionService.isTestCompleted('listening');
    final isReadingCompleted = await _testSessionService.isTestCompleted('reading');
    final isGrammarCompleted = await _testSessionService.isTestCompleted('grammar');

    final allCompleted = isListeningCompleted && isReadingCompleted && isGrammarCompleted;
    final saveStatus = prefs.getString(_SAVE_STATUS_KEY);

    if (allCompleted && saveStatus != _currentSessionId) {
      setState(() {
        _isSaving = true;
      });

      try {
        final listeningRawScore = prefs.getInt('listening_test_score') ?? 0;
        final readingRawScore = prefs.getInt('reading_test_score') ?? 0;
        final grammarRawScore = prefs.getInt('grammar_test_score') ?? 0;
        
        final listeningDuration = Duration(
          seconds: prefs.getInt('listening_test_duration') ?? 0
        );
        final readingDuration = Duration(
          seconds: prefs.getInt('reading_test_duration') ?? 0
        );
        final grammarDuration = Duration(
          seconds: prefs.getInt('grammar_test_duration') ?? 0
        );

        final listeningTotalQuestions = prefs.getInt('listening_total_questions') ?? 20;
        final readingTotalQuestions = prefs.getInt('reading_total_questions') ?? 20;
        final grammarTotalQuestions = prefs.getInt('grammar_total_questions') ?? 20;

        final userData = await _authService.getUserData();
        
        bool isParentPhone = false;
        try {
          isParentPhone = userData['isParentPhone'] == true || 
                         userData['isParentPhone'] == 'true';
        } catch (e) {
          print('Error parsing isParentPhone: $e');
        }

        bool isExistingStudent = false;
        try {
          isExistingStudent = userData['isExistingStudent'] == true || 
                             userData['isExistingStudent'] == 'true';
        } catch (e) {
          print('Error parsing isExistingStudent: $e');
        }

        await _firestoreService.saveBulkResults(
          firstName: userData['firstName']?.toString() ?? '',
          lastName: userData['lastName']?.toString() ?? '',
          birthDate: userData['birthDate']?.toString(),
          address: userData['address']?.toString(),
          phone: userData['phone']?.toString() ?? '',
          isParentPhone: isParentPhone,
          email: userData['email']?.toString() ?? '',
          cin: userData['cin']?.toString(),
          isExistingStudent: isExistingStudent,
          schoolCode: userData['schoolCode']?.toString() ?? '',
          listeningRawScore: listeningRawScore,
          listeningDuration: listeningDuration,
          readingRawScore: readingRawScore,
          readingDuration: readingDuration,
          grammarRawScore: grammarRawScore,
          grammarDuration: grammarDuration,
          timestamp: DateTime.now(),
          listeningTotalQuestions: listeningTotalQuestions,
          readingTotalQuestions: readingTotalQuestions,
          grammarTotalQuestions: grammarTotalQuestions,
        );

        await prefs.setString(_SAVE_STATUS_KEY, _currentSessionId!);

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Test results saved successfully!'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } catch (e) {
        print('Error saving results: $e');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Failed to save results: ${e.toString()}'),
              backgroundColor: Colors.red,
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSaving = false;
            _allTestsCompleted = true;
          });
        }
      }
    } else {
      setState(() {
        _allTestsCompleted = allCompleted;
      });
    }
  }

  Future<Map<String, String>?> _getStoredOrInputName() async {
    if (_userData['firstName'] != null && _userData['lastName'] != null) {
      return {
        'firstName': _userData['firstName']!,
        'lastName': _userData['lastName']!,
      };
    }
    return null;
  }

  Future<void> _handleListeningTestStart() async {
    try {
      // Show video instructions first
      final shouldStartTest = await _showTestInstructions(context, 'listening');
      if (!shouldStartTest || !mounted) return;

      print('\n=== Starting Listening Test Handler ===');
      print('Checking test session status...');
      
      final isActive = await _testSessionService.isListeningTestActive();
      print('Test Active Status: $isActive');
      
      final remainingTime = await _testSessionService.getListeningRemainingTime();
      print('Remaining Time: ${remainingTime?.toString() ?? 'null'}');

      if (isActive && remainingTime != null && remainingTime > Duration.zero) {
        print('\n=== Resuming Active Test Session ===');
        print('Remaining Time: ${remainingTime.toString()}');
        print('Current User Data:');
        print('First Name: ${_userData['firstName'] ?? 'User'}');
        print('Last Name: ${_userData['lastName'] ?? ''}');

        if (!mounted) {
          print('Widget no longer mounted, canceling navigation');
          return;
        }

        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => ListeningTestPage(
              remainingTime: remainingTime,
              firstName: _userData['firstName'] ?? 'User',
              lastName: _userData['lastName'] ?? '',
              onTestComplete: (duration, score) async {
                print('\n=== Test Completion Callback ===');
                print('Test Duration: ${duration.toString()}');
                print('Raw Score: $score');
                print('Updating state variables...');
                
                setState(() {
                  _isListeningTestActive = false;
                  _listeningTestDuration = duration;
                  _listeningTestScore = score;
                });
                
                print('Starting test completion checks...');
                await _checkTestsAndSave();
                print('Test completion process finished');
              },
            ),
          ),
        );
      } else {
        print('\n=== Starting New Test Session ===');
        print('Requesting user data...');
        
        final userData = await _getStoredOrInputName();
        if (userData == null) {
          print('User data collection cancelled or failed');
          return;
        }
        
        print('User Data Collected:');
        print('First Name: ${userData['firstName']}');
        print('Last Name: ${userData['lastName']}');

        print('Initializing new test session...');
        await _testSessionService.startListeningTest();
        print('Test session initialized successfully');

        if (!mounted) {
          print('Widget no longer mounted, canceling navigation');
          return;
        }

        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => ListeningTestPage(
              firstName: userData['firstName']!,
              lastName: userData['lastName']!,
              onTestComplete: (duration, score) async {
                print('\n=== New Test Completion Callback ===');
                print('Test Duration: ${duration.toString()}');
                print('Raw Score: $score');
                print('Updating state variables...');
                
                setState(() {
                  _isListeningTestActive = false;
                  _listeningTestDuration = duration;
                  _listeningTestScore = score;
                });
                
                print('Starting test completion checks...');
                await _checkTestsAndSave();
                print('Test completion process finished');
              },
            ),
          ),
        );
      }
      
      print('=== Listening Test Handler Completed Successfully ===\n');
      
    } catch (e, stackTrace) {
      print('\n=== Error in Listening Test Handler ===');
      print('Error: $e');
      print('Stack trace: $stackTrace');
      print('=== End Error Report ===\n');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to start listening test: ${e.toString()}'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
            margin: EdgeInsets.all(40),
          ),
        );
      }
    }
  }

  Future<void> _handleReadingTestStart() async {
    try {
      // Show video instructions first
      final shouldStartTest = await _showTestInstructions(context, 'reading');
      if (!shouldStartTest || !mounted) return;

      final isActive = await _testSessionService.isReadingTestActive();
      final remainingTime = await _testSessionService.getReadingRemainingTime();
      final isCompleted = await _testSessionService.isTestCompleted('reading');

      if (isCompleted) return;

      if (isActive && remainingTime != null && remainingTime > Duration.zero) {
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => ReadingTestPage(
              remainingTime: remainingTime,
              firstName: _userData['firstName'] ?? 'User',
              lastName: _userData['lastName'] ?? '',
              onTestComplete: (duration, score) async {
                setState(() {
                  _isReadingTestActive = false;
                  _readingTestDuration = duration;
                  _readingTestScore = score;
                });
                await _checkTestsAndSave();
              },
            ),
          ),
        );
      } else {
        final userData = await _getStoredOrInputName();
        if (userData == null) return;

        await _testSessionService.startReadingTest();
        if (!mounted) return;

        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => ReadingTestPage(
              firstName: userData['firstName']!,
              lastName: userData['lastName']!,
              onTestComplete: (duration, score) async {
                setState(() {
                  _isReadingTestActive = false;
                  _readingTestDuration = duration;
                  _readingTestScore = score;
                });
                await _checkTestsAndSave();
              },
            ),
          ),
        );
      }
    } catch (e) {
      print('Error in Reading Test Handler: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to start reading test: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Future<void> _handleGrammarTestStart() async {
    try {
      // Show video instructions first
      final shouldStartTest = await _showTestInstructions(context, 'grammar');
      if (!shouldStartTest || !mounted) return;

      final isActive = await _testSessionService.isGrammarTestActive();
      final remainingTime = await _testSessionService.getGrammarRemainingTime();
      final isCompleted = await _testSessionService.isTestCompleted('grammar');

      if (isCompleted) return;

      if (isActive && remainingTime != null && remainingTime > Duration.zero) {
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => GrammarTestPage(
              remainingTime: remainingTime,
              firstName: _userData['firstName'] ?? 'User',
              lastName: _userData['lastName'] ?? '',
              onTestComplete: (duration, score) async {
                setState(() {
                  _isGrammarTestActive = false;
                  _grammarTestDuration = duration;
                  _grammarTestScore = score;
                });
                await _checkTestsAndSave();
              },
            ),
          ),
        );
      } else {
        final userData = await _getStoredOrInputName();
        if (userData == null) return;

        await _testSessionService.startGrammarTest();
        if (!mounted) return;

        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => GrammarTestPage(
              firstName: userData['firstName']!,
              lastName: userData['lastName']!,
              onTestComplete: (duration, score) async {
                setState(() {
                  _isGrammarTestActive = false;
                  _grammarTestDuration = duration;
                  _grammarTestScore = score;
                });
                await _checkTestsAndSave();
              },
            ),
          ),
        );
      }
    } catch (e) {
      print('Error in Grammar Test Handler: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to start grammar test: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Future<void> _resetAllData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      await prefs.remove('listening_test_completed');
      await prefs.remove('reading_test_completed');
      await prefs.remove('grammar_test_completed');
      
      await prefs.remove('listening_test_score');
      await prefs.remove('reading_test_score');
      await prefs.remove('grammar_test_score');
      
      await prefs.remove('listening_test_duration');
      await prefs.remove('reading_test_duration');
      await prefs.remove('grammar_test_duration');
      
      await prefs.remove('current_student_first_name');
      await prefs.remove('current_student_last_name');
      
      await prefs.remove('current_session_id');
      await prefs.remove(_SAVE_STATUS_KEY);
      
      await prefs.remove('current_question_index');
      await prefs.remove('user_answers');
      
      await _testSessionService.clearAllSessions();
      
      await _authService.signOut();
    } catch (e) {
      print('Error resetting data: $e');
    }
  }

  Future<void> _showLogoutConfirmation(BuildContext context) async {
    final bool? confirm = await showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          elevation: 16,
          child: Container(
            width: 400,
            padding: EdgeInsets.all(32),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Colors.white,
                  Colors.grey.shade50,
                ],
                ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.red.shade50,
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.warning_rounded,
                    size: 48,
                    color: Colors.red.shade400,
                  ),
                ),
                SizedBox(height: 24),
                
                Text(
                  'Confirm Logout',
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
                SizedBox(height: 16),
                
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.grey.shade200,
                    ),
                  ),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.info_outline,
                            color: Colors.grey[600],
                            size: 20,
                          ),
                          SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              'Are you sure you want to logout?',
                              style: GoogleFonts.poppins(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                color: Colors.grey[800],
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 12),
                      Text(
                        'All test progress and session data will be reset.',
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          color: Colors.grey[600],
                          height: 1.5,
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 32),
                
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(false),
                      style: TextButton.styleFrom(
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Text(
                        'Cancel',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[600],
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    
                    ElevatedButton(
                      onPressed: () async {
                        try {
                          await _resetAllData();
                          
                          if (!mounted) return;
                          
                          Navigator.of(context).pushAndRemoveUntil(
                            MaterialPageRoute(builder: (context) => RegistrationPage()),
                            (route) => false,
                          );
                        } catch (e) {
                          print('Error during logout: $e');
                          if (!mounted) return;
                          
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Error logging out. Please try again.'),
                              backgroundColor: Colors.red,
                            ),
                          );
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.zero,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Ink(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [Colors.red.shade400, Colors.red.shade600],
                            begin: Alignment.centerLeft,
                            end: Alignment.centerRight,
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Container(
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.logout, color: Colors.white),
                              SizedBox(width: 8),
                              Text(
                                'Logout',
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.white,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Future<Map<String, bool>> _getTestCompletionStatus() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'listening_test_completed': prefs.getBool('listening_test_completed') ?? false,
      'reading_test_completed': prefs.getBool('reading_test_completed') ?? false,
      'grammar_test_completed': prefs.getBool('grammar_test_completed') ?? false,
    };
  }

  bool _areAllTestsCompleted(
    bool listeningCompleted, 
    bool readingCompleted, 
    bool grammarCompleted
  ) {
    return listeningCompleted && readingCompleted && grammarCompleted;
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<Map<String, bool>>(
      future: _getTestCompletionStatus(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(child: CircularProgressIndicator());
        }

        final bool listeningCompleted = snapshot.data!['listening_test_completed'] ?? false;
        final bool readingCompleted = snapshot.data!['reading_test_completed'] ?? false;
        final bool grammarCompleted = snapshot.data!['grammar_test_completed'] ?? false;
        
        final bool allTestsCompleted = _areAllTestsCompleted(
          listeningCompleted, 
          readingCompleted, 
          grammarCompleted
        );

        // Add automatic navigation when all tests are completed
        if (allTestsCompleted && !_hasCheckedResults) {
          WidgetsBinding.instance.addPostFrameCallback((_) {
            setState(() => _hasCheckedResults = true);
            Navigator.of(context).push(
              MaterialPageRoute(
                builder: (context) => TestResultsPage(
                  firstName: _userData['firstName'] ?? '',
                  lastName: _userData['lastName'] ?? '',
                ),
              ),
            ).then((_) => _checkTestsAndSave());
          });
        }

        return Scaffold(
          appBar: _buildAppBar(context),
          body: Stack(
            children: [
              Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      Color(0xFF2193b0),
                      Color(0xFF6dd5ed),
                    ],
                  ),
                ),
              ),
              Center(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _buildTestCard(
                      title: 'Listening Test',
                      icon: MaterialCommunityIcons.headphones,
                      description: 'Test your listening comprehension skills with audio questions',
                      onTap: _handleListeningTestStart,
                      isActive: _isListeningTestActive,
                    ),
                    const SizedBox(width: 32),
                    _buildTestCard(
                      title: 'Reading Test',
                      icon: MaterialCommunityIcons.book_open_variant,
                      description: 'Evaluate your reading comprehension abilities',
                      onTap: _handleReadingTestStart,
                      isActive: _isReadingTestActive,
                    ),
                    const SizedBox(width: 32),
                    _buildTestCard(
                      title: 'Grammar Test',
                      icon: MaterialCommunityIcons.format_text,
                      description: 'Check your grammar and language structure knowledge',
                      onTap: _handleGrammarTestStart,
                      isActive: _isGrammarTestActive,
                    ),
                  ],
                ),
              ),
            ],
          ),
          floatingActionButton: allTestsCompleted 
            ? FloatingActionButton.extended(
                onPressed: () {
                  Navigator.of(context).push(
                    MaterialPageRoute(
                      builder: (context) => TestResultsPage(
                        firstName: _userData['firstName'] ?? '',
                        lastName: _userData['lastName'] ?? '',
                      ),
                    ),
                  ).then((_) => _checkTestsAndSave());
                },
                icon: Icon(Icons.assessment_outlined, color: Colors.white),
                label: Text(
                  'See Results',
                  style: GoogleFonts.poppins(
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                  ),
                ),
                backgroundColor: Color(0xFF2193b0),
                elevation: 4,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                isExtended: true,
                extendedPadding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              ) 
            : null,
          floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,
        );
      },
    );
  }

  Widget _buildTestCard({
    required String title,
    required IconData icon,
    required String description,
    required VoidCallback onTap,
    required bool isActive,
  }) {
    return FutureBuilder<bool>(
      future: _testSessionService.isTestCompleted(title.toLowerCase().split(' ')[0]),
      builder: (context, snapshot) {
        bool isCompleted = snapshot.data ?? false;

        return MouseRegion(
          cursor: SystemMouseCursors.click,
          child: Card(
            elevation: 12,
            shadowColor: Colors.black26,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(32),
            ),
            child: Container(
              width: 360,
              padding: const EdgeInsets.all(32),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(32),
                gradient: isCompleted
                    ? LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          Colors.green.shade50,
                          Colors.green.shade100,
                        ],
                      )
                    : LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          Colors.white,
                          Colors.grey.shade50,
                        ],
                      ),
                border: Border.all(
                  color: isCompleted
                      ? Colors.green.shade300
                      : isActive
                          ? Color(0xFF2193b0).withOpacity(0.3)
                          : Colors.grey.shade200,
                  width: 2,
                ),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    padding: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: (isCompleted
                              ? Colors.green
                              : isActive
                                  ? Color(0xFF2193b0)
                                  : Colors.grey)
                          .withOpacity(0.1),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Row(
                      children: [
                        Icon(
                          icon,
                          size: 36,
                          color: isCompleted
                              ? Colors.green
                              : isActive
                                  ? Color(0xFF2193b0)
                                  : Colors.grey,
                        ),
                        SizedBox(width: 16),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                title,
                                style: GoogleFonts.poppins(
                                  fontSize: 26,
                                  fontWeight: FontWeight.bold,
                                  color: isCompleted
                                      ? Colors.green
                                      : isActive
                                          ? Color(0xFF2193b0)
                                          : Colors.grey,
                                ),
                              ),
                              if (isCompleted || isActive)
                                Container(
                                  margin: EdgeInsets.only(top: 8),
                                  padding: EdgeInsets.symmetric(
                                      horizontal: 12, vertical: 6),
                                  decoration: BoxDecoration(
                                    color: (isCompleted
                                            ? Colors.green
                                            : Color(0xFF2193b0))
                                        .withOpacity(0.1),
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  child: Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Icon(
                                        isCompleted
                                            ? Icons.check_circle
                                            : Icons.timer,
                                        color: isCompleted
                                            ? Colors.green
                                            : Color(0xFF2193b0),
                                        size: 16,
                                      ),
                                      SizedBox(width: 6),
                                      Text(
                                        isCompleted ? 'Completed' : 'In Progress',
                                        style: GoogleFonts.poppins(
                                          fontSize: 14,
                                          color: isCompleted
                                              ? Colors.green
                                              : Color(0xFF2193b0),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 24),
                  Text(
                    description,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: Colors.grey[700],
                      height: 1.5,
                    ),
                  ),
                  SizedBox(height: 32),
                  ElevatedButton(
                    onPressed: isCompleted ? null : onTap,
                    style: ElevatedButton.styleFrom(
                      padding: EdgeInsets.zero,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                      elevation: 4,
                      disabledBackgroundColor: Colors.grey.shade200,
                    ),
                    child: Ink(
                      decoration: BoxDecoration(
                        gradient: isCompleted
                            ? null
                            : LinearGradient(
                                colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                                begin: Alignment.centerLeft,
                                end: Alignment.centerRight,
                              ),
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Container(
                        padding: EdgeInsets.symmetric(vertical: 16),
                        alignment: Alignment.center,
                        child: Text(
                          isCompleted
                              ? 'Test Completed'
                              : isActive
                                  ? 'Continue Test'
                                  : 'Start Test',
                          style: GoogleFonts.poppins(
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                            color: isCompleted ? Colors.grey : Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  AppBar _buildAppBar(BuildContext context) {
    return AppBar(
      title: Text(
        'ALC El Jadida',
        style: GoogleFonts.poppins(
          fontSize: 24,
          fontWeight: FontWeight.bold,
          color: const Color(0xFF2193b0),
        ),
      ),
      actions: [
        Padding(
          padding: const EdgeInsets.only(right: 16.0),
          child: IconButton(
            icon: Icon(
              Icons.logout_rounded,
              color: const Color(0xFF2193b0),
              size: 28,
            ),
            onPressed: () => _showLogoutConfirmation(context),
            tooltip: 'Logout',
          ),
        ),
      ],
    );
  }

  Future<void> _resubmitData(BuildContext context) async {
    try {
      setState(() => _isSaving = true);
      print('\n=== Starting Data Resubmission ===');

      final prefs = await SharedPreferences.getInstance();
      
      // Debug logging for test scores
      print('\n=== Test Scores ===');
      final listeningScore = prefs.getInt('listening_test_score') ?? 0;
      print('Listening Score: $listeningScore');
      final readingScore = prefs.getInt('reading_test_score') ?? 0;
      print('Reading Score: $readingScore');
      final grammarScore = prefs.getInt('grammar_test_score') ?? 0;
      print('Grammar Score: $grammarScore');
      
      // Debug logging for durations
      print('\n=== Test Durations ===');
      final listeningDuration = Duration(
        seconds: prefs.getInt('listening_test_duration') ?? 0
      );
      print('Listening Duration: $listeningDuration');
      final readingDuration = Duration(
        seconds: prefs.getInt('reading_test_duration') ?? 0
      );
      print('Reading Duration: $readingDuration');
      final grammarDuration = Duration(
        seconds: prefs.getInt('grammar_test_duration') ?? 0
      );
      print('Grammar Duration: $grammarDuration');

      // Debug logging for question counts
      print('\n=== Question Counts ===');
      final listeningTotalQuestions = prefs.getInt('listening_total_questions') ?? 20;
      print('Listening Questions: $listeningTotalQuestions');
      final readingTotalQuestions = prefs.getInt('reading_total_questions') ?? 20;
      print('Reading Questions: $readingTotalQuestions');
      final grammarTotalQuestions = prefs.getInt('grammar_total_questions') ?? 20;
      print('Grammar Questions: $grammarTotalQuestions');

      print('\n=== Fetching User Data ===');
      final userData = await _authService.getUserData();
      print('User Data Retrieved: ${userData.toString()}');

      // Parse boolean values with debug logging
      print('\n=== Parsing Boolean Values ===');
      bool isParentPhone = false;
      try {
        isParentPhone = userData['isParentPhone'] == true || 
                       userData['isParentPhone'] == 'true';
        print('isParentPhone parsed as: $isParentPhone');
      } catch (e) {
        print('Error parsing isParentPhone: $e');
      }

      bool isExistingStudent = false;
      try {
        isExistingStudent = userData['isExistingStudent'] == true || 
                           userData['isExistingStudent'] == 'true';
        print('isExistingStudent parsed as: $isExistingStudent');
      } catch (e) {
        print('Error parsing isExistingStudent: $e');
      }

      print('\n=== Submitting to Firestore ===');
      await _firestoreService.saveBulkResults(
        firstName: userData['firstName']?.toString() ?? '',
        lastName: userData['lastName']?.toString() ?? '',
        birthDate: userData['birthDate']?.toString(),
        address: userData['address']?.toString(),
        phone: userData['phone']?.toString() ?? '',
        isParentPhone: isParentPhone,
        email: userData['email']?.toString() ?? '',
        cin: userData['cin']?.toString(),
        isExistingStudent: isExistingStudent,
        schoolCode: userData['schoolCode']?.toString() ?? '',
        listeningRawScore: listeningScore,
        listeningDuration: listeningDuration,
        readingRawScore: readingScore,
        readingDuration: readingDuration,
        grammarRawScore: grammarScore,
        grammarDuration: grammarDuration,
        timestamp: DateTime.now(),
        listeningTotalQuestions: listeningTotalQuestions,
        readingTotalQuestions: readingTotalQuestions,
        grammarTotalQuestions: grammarTotalQuestions,
      );
      print('Data successfully submitted to Firestore');

      if (!mounted) return;

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Test results resubmitted successfully!'),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
          margin: EdgeInsets.all(40),
        ),
      );
      print('\n=== Data Resubmission Completed Successfully ===');
      
    } catch (e, stackTrace) {
      print('\n=== Error During Data Resubmission ===');
      print('Error: $e');
      print('Stack trace: $stackTrace');
      
      if (!mounted) return;
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to resubmit data: ${e.toString()}'),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
          margin: EdgeInsets.all(40),
        ),
      );
    } finally {
      if (mounted) {
        setState(() => _isSaving = false);
        print('\n=== Resubmission Process Completed ===');
      }
    }
  }

  Future<bool> _showTestInstructions(BuildContext context, String testType) async {
    return await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return VideoOverlay(
          videoType: testType,
          onClose: () {
            Navigator.of(context).pop(true);
          },
        );
      },
    ) ?? false;
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\instruction_page.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:media_kit/media_kit.dart';
import 'package:media_kit_video/media_kit_video.dart';
import 'home_page.dart';

class InstructionPage extends StatefulWidget {
  const InstructionPage({super.key});

  @override
  State<InstructionPage> createState() => _InstructionPageState();
}

class _InstructionPageState extends State<InstructionPage> {
  final PageController _pageController = PageController();
  int _currentPage = 0;
  late final Player _player;
  late final VideoController _controller;
  bool _isVideoInitialized = false;
  // Add offset state for draggable video
  Offset _videoPosition = const Offset(24, -24); // Initial position at the very bottom left with small padding

  @override
  void initState() {
    super.initState();
    _initializeVideo();
  }

  @override
  void dispose() {
    _player.dispose();
    super.dispose();
  }

  Future<void> _initializeVideo() async {
    try {
      _player = Player();
      _controller = VideoController(_player);
      
      await _player.open(Media('asset:///assets/videos/welcome_video.mp4'));
      
      if (mounted) {
        setState(() {
          _isVideoInitialized = true;
        });
        _player.play();
      }
    } catch (e) {
      print('Error initializing video: $e');
    }
  }

  final List<InstructionSlide> _slides = [
    InstructionSlide(
      title: 'Listening Section',
      content: 'You will have 15 minutes to answer 20 audio questions. Each question has multiple choice answers (a, b, c, d).',
      icon: MaterialCommunityIcons.headphones,
    ),
    InstructionSlide(
      title: 'Reading Section',
      content: 'You will be presented with reading comprehension questions. Each question has multiple choice answers (a, b, c, d).',
      icon: MaterialCommunityIcons.book_open_variant,
    ),
    InstructionSlide(
      title: 'Language in Use',
      content: 'Test your grammar and vocabulary knowledge through multiple choice questions. Pay attention to sentence structure and word usage.',
      icon: MaterialCommunityIcons.translate,  // Changed icon to be more appropriate
    ),
    // ... Ajoutez plus de diapositives si nÃ©cessaire
  ];

  // Add progress indicator
  Widget _buildProgressIndicator() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 20), // Added vertical padding
      margin: const EdgeInsets.only(top: 20), // Added top margin
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center, // Center the indicators
        children: List.generate(_slides.length, (index) {
          return Container(
            width: 80, // Fixed width instead of Expanded
            height: 6, // Slightly taller
            margin: const EdgeInsets.symmetric(horizontal: 8), // Increased spacing
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(3),
              color: _currentPage >= index
                  ? const Color(0xFF2193b0)
                  : Colors.grey.withOpacity(0.3),
            ),
          );
        }),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFF2193b0),
              Color(0xFF6dd5ed),
            ],
          ),
        ),
        child: Row(
          children: [
            // Enhanced Sidebar
            Container(
              width: 280, // Slightly wider
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.95),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 10,
                    offset: const Offset(0, 0),
                  ),
                ],
              ),
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Instructions',
                    style: GoogleFonts.poppins(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFFFC6352),
                    ),
                  ),
                  const SizedBox(height: 40),
                  Expanded(
                    child: ListView.builder(
                      itemCount: _slides.length,
                      itemBuilder: (context, index) {
                        return _buildSidebarItem(
                          title: _slides[index].title,
                          isSelected: _currentPage == index,
                          onTap: () {
                            _pageController.animateToPage(
                              index,
                              duration: const Duration(milliseconds: 300),
                              curve: Curves.easeInOut,
                            );
                          },
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
            // Enhanced Main content
            Expanded(
              child: Container(
                margin: const EdgeInsets.all(24),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(32),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 20,
                      offset: const Offset(0, 0),
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    Expanded(
                      flex: 4,
                      child: Column(
                        children: [
                          _buildProgressIndicator(),
                          Expanded(
                            child: PageView.builder(
                              controller: _pageController,
                              itemCount: _slides.length,
                              onPageChanged: (int page) {
                                setState(() {
                                  _currentPage = page;
                                });
                              },
                              itemBuilder: (context, index) {
                                return _buildSlide(_slides[index]);
                              },
                            ),
                          ),
                        ],
                      ),
                    ),
                    if (_isVideoInitialized)
                      Expanded(
                        flex: 6,
                        child: Container(
                          margin: const EdgeInsets.fromLTRB(24, 12, 24, 24),
                          child: AspectRatio(
                            aspectRatio: 16 / 9,
                            child: Container(
                              decoration: BoxDecoration(
                                color: Colors.black.withOpacity(0.8),
                                borderRadius: BorderRadius.circular(24),
                              ),
                              child: ClipRRect(
                                borderRadius: BorderRadius.circular(24),
                                child: Center(
                                  child: Video(
                                    controller: _controller,
                                    controls: AdaptiveVideoControls,
                                    fit: BoxFit.contain,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    // Navigation buttons
                    Padding(
                      padding: const EdgeInsets.all(20),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          _buildNavigationButton(
                            onPressed: _currentPage > 0
                                ? () {
                                    _pageController.previousPage(
                                      duration: const Duration(milliseconds: 300),
                                      curve: Curves.easeInOut,
                                    );
                                  }
                                : null,
                            icon: Icons.arrow_back,
                            label: 'Previous',
                          ),
                          _buildNavigationButton(
                            onPressed: _currentPage < _slides.length - 1
                                ? () {
                                    _pageController.nextPage(
                                      duration: const Duration(milliseconds: 300),
                                      curve: Curves.easeInOut,
                                    );
                                  }
                                : () {
                                    Navigator.of(context).pushReplacement(
                                      MaterialPageRoute(builder: (context) => const HomePage()),
                                    );
                                  },
                            icon: _currentPage < _slides.length - 1 ? Icons.arrow_forward : Icons.play_arrow,
                            label: _currentPage < _slides.length - 1 ? 'Next' : 'Start Test',
                            isPrimary: true,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSidebarItem({
    required String title,
    required bool isSelected,
    required VoidCallback onTap,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 5),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(24),
        gradient: isSelected
            ? LinearGradient(
                colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                begin: Alignment.centerLeft,
                end: Alignment.centerRight,
              )
            : null,
      ),
      child: ListTile(
        title: Text(
          title,
          style: GoogleFonts.poppins(
            color: isSelected ? Colors.white : Colors.black87,
            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
          ),
        ),
        onTap: onTap,
      ),
    );
  }

  // Update the slide building method
  Widget _buildSlide(InstructionSlide slide) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 40),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: const Color(0xFFE8F6F9),
              shape: BoxShape.circle,
            ),
            child: Icon(
              slide.icon,
              size: 36,
              color: const Color(0xFF2193b0),
            ),
          ),
          const SizedBox(height: 16),
          Text(
            slide.title,
            style: GoogleFonts.poppins(
              fontSize: 28,
              fontWeight: FontWeight.bold,
              color: const Color(0xFF2193b0),
            ),
          ),
          const SizedBox(height: 12),
          Text(
            slide.content,
            textAlign: TextAlign.center,
            style: GoogleFonts.poppins(
              fontSize: 16,
              height: 1.4,
              color: Colors.black87,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNavigationButton({
    required VoidCallback? onPressed,
    required IconData icon,
    required String label,
    bool isPrimary = false,
  }) {
    return ElevatedButton(
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        padding: EdgeInsets.zero,
        backgroundColor: Colors.transparent,
        foregroundColor: Colors.white,
        shadowColor: Colors.transparent,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(24),
        ),
      ),
      child: Ink(
        decoration: BoxDecoration(
          gradient: isPrimary
              ? LinearGradient(
                  colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                  begin: Alignment.centerLeft,
                  end: Alignment.centerRight,
                )
              : null,
          color: isPrimary ? null : Colors.grey[300],
          borderRadius: BorderRadius.circular(24),
        ),
        child: Container(
          height: 48,
          padding: EdgeInsets.symmetric(horizontal: 20),
          alignment: Alignment.center,
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(icon, color: isPrimary ? Colors.white : Colors.black87),
              SizedBox(width: 10),
              Text(
                label,
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  color: isPrimary ? Colors.white : Colors.black87,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class InstructionSlide {
  final String title;
  final String content;
  final IconData icon;

  InstructionSlide({
    required this.title,
    required this.content,
    required this.icon,
  });
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\listening_test_page.dart
import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:just_audio/just_audio.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'dart:io' show Platform;
import 'package:shared_preferences/shared_preferences.dart';

import 'package:alc_eljadida_tests/services/auth_service.dart';
import 'package:alc_eljadida_tests/services/test_results_service.dart';
import 'package:alc_eljadida_tests/models/test_result.dart';
import 'package:alc_eljadida_tests/services/test_session_service.dart';
import 'package:alc_eljadida_tests/services/firestore_service.dart';
import 'package:alc_eljadida_tests/screens/home_page.dart';
import 'package:alc_eljadida_tests/services/score_calculator.dart';

class CustomTrackShape extends RoundedRectSliderTrackShape {
  @override
  Rect getPreferredRect({
    required RenderBox parentBox,
    Offset offset = Offset.zero,
    required SliderThemeData sliderTheme,
    bool isEnabled = false,
    bool isDiscrete = false,
  }) {
    final double? trackHeight = sliderTheme.trackHeight;
    final double trackLeft = offset.dx;
    final double trackTop =
        offset.dy + (parentBox.size.height - (trackHeight ?? 4)) / 2;
    final double trackWidth = parentBox.size.width;
    return Rect.fromLTWH(trackLeft, trackTop, trackWidth, trackHeight ?? 4);
  }
}

class ListeningTestPage extends StatefulWidget {
  final Duration? remainingTime;
  final String firstName;
  final String lastName;
  final Function(Duration, int)? onTestComplete;

  const ListeningTestPage({
    Key? key,
    this.remainingTime,
    required this.firstName,
    required this.lastName,
    this.onTestComplete,
  }) : super(key: key);

  @override
  _ListeningTestPageState createState() => _ListeningTestPageState();
}

class _ListeningTestPageState extends State<ListeningTestPage> {
  late final AudioPlayer _audioPlayer;
  int _currentQuestionIndex = 0;
  String? _selectedAnswer;
  bool _isPlaying = false;
  Duration _duration = Duration.zero;
  Duration _position = Duration.zero;
  final int _totalTimeInMinutes = 15;
  late Timer _timer;
  Duration _remainingTime = Duration(minutes: 15);
  double _progress = 1.0;
  Duration _bufferedPosition = Duration.zero;
  bool _isSeeking = false;
  double? _dragValue;
  List<String?> _userAnswers = [];
  final TextEditingController _firstNameController = TextEditingController();
  final TextEditingController _lastNameController = TextEditingController();
  final TestSessionService _testSessionService = TestSessionService();
  DateTime _startTime = DateTime.now();
  int _currentSituationNumber = 1;
  
  // Keep these variables as they're needed for audio functionality
  bool _hasFinishedPlaying = false;
  bool _isAudioEnabled = true;

  final List<Map<String, dynamic>> _questions = [
    {
      'situation': 1,
      'audioUrl': 'assets/audio/situation1.mp3',
      'question':
          'Situation 1: Emily and Jason are talking about work.\nWhat is true about Emily?',
      'options': [
        'a) works at a cafÃ©',
        'b) never goes to the mall',
        'c) works every weekend',
        'd) goes to the mall every day'
      ],
      'correctAnswer': 'a) works at a cafÃ©',
    },
    {
      'situation': 2,
      'audioUrl': 'assets/audio/situation2.mp3',
      'question':
          'Situation 2: Jessica is buying clothes.\nWhat is true about Jessica?',
      'options': [
        'a) is buying a dress and a skirt',
        'b) thinks the skirts are expensive',
        'c) can\'t find a red skirt',
        'd) pays \$30 for the skirt'
      ],
      'correctAnswer': 'c) can\'t find a red skirt',
    },
    {
      'situation': 3,
      'audioUrl': 'assets/audio/situation3.mp3',
      'question':
          'Situation 3: Rachel and Michael are talking in a mall.\nWhat is true about Rachel and Michael?',
      'options': [
        'a) are having lunch together',
        'b) are buying gifts for their children',
        'c) are busy tomorrow afternoon',
        'd) are going to meet again tomorrow'
      ],
      'correctAnswer': 'c) are busy tomorrow afternoon',
    },
    {
      'situation': 4,
      'audioUrl': 'assets/audio/situation4.mp3',
      'question':
          'Situation 4: Andrew is talking to a waitress at a restaurant.\nWhat is true about Andrew?',
      'options': [
        'a) didn\'t enjoy the food',
        'b) ate just a little pasta',
        'c) ordered a salad',
        'd) didn\'t like the dressing'
      ],
      'correctAnswer': 'c) ordered a salad',
    },
    {
      'situation': 4,
      'audioUrl': 'assets/audio/situation4.mp3',
      'question': 'Situation 4: What is true about the waitress?',
      'options': [
        'a) can make the salad dressing',
        'b) is going to talk to the chef',
        'c) doesn\'t offer a dessert to Andrew',
        'd) is going to bring Andrew some coffee'
      ],
      'correctAnswer': 'd) is going to bring Andrew some coffee',
    },
    {
      'situation': 5,
      'audioUrl': 'assets/audio/situation5.mp3',
      'question':
          'Situation 5: Laura is talking to her father about a health problem.\nWhat is true about Laura?',
      'options': [
        'a) hit her head in a basketball game',
        'b) ate some bad food at school yesterday',
        'c) has a horrible pain in her stomach',
        'd) has a very bad headache'
      ],
      'correctAnswer': 'd) has a very bad headache',
    },
    {
      'situation': 5,
      'audioUrl': 'assets/audio/situation5.mp3',
      'question': 'Situation 5: What is true about Laura\'s father?',
      'options': [
        'a) has a stomachache too',
        'b) offers to take her to the doctor',
        'c) is going to call a doctor',
        'd) wants to rest a little'
      ],
      'correctAnswer': 'b) offers to take her to the doctor',
    },
    {
      'situation': 6,
      'audioUrl': 'assets/audio/situation6.mp3',
      'question':
          'Situation 6: Jack is talking to his friend Olivia on the phone.\nWhen Jack called Olivia, she:',
      'options': [
        'a) couldn\'t hear him because of a bad connection',
        'b) was in a noisy area, but she moved',
        'c) was at the bus stop with her friend Katie',
        'd) was on her way to see a play'
      ],
      'correctAnswer': 'b) was in a noisy area, but she moved',
    },
    {
      'situation': 6,
      'audioUrl': 'assets/audio/situation6.mp3',
      'question': 'Situation 6: What is true about Jack?',
      'options': [
        'a) thought the movie was not very exciting',
        'b) thought the movie had too much action',
        'c) thinks Olivia shouldn\'t see the movie',
        'd) is going out with Olivia and Katie on Friday'
      ],
      'correctAnswer': 'a) thought the movie was not very exciting',
    },
    {
      'situation': 7,
      'audioUrl': 'assets/audio/situation7.mp3',
      'question':
          'Situation 7: Amanda is meeting her friend Patrick at a cafÃ©.\nWhat is true about Amanda and Patrick?',
      'options': [
        'a) last met in January',
        'b) went to a concert together',
        'c) haven\'t seen each other since April',
        'd) have been spending a lot of time together lately'
      ],
      'correctAnswer': 'b) went to a concert together',
    },
    {
      'situation': 7,
      'audioUrl': 'assets/audio/situation7.mp3',
      'question': 'Situation 7: What is true about Amanda?',
      'options': [
        'a) has found a new job',
        'b) is looking for another job',
        'c) finds her work too challenging',
        'd) has been having problems at work'
      ],
      'correctAnswer': 'a) has found a new job',
    },
    {
      'situation': 7,
      'audioUrl': 'assets/audio/situation7.mp3',
      'question': 'Situation 7: What is true about Patrick?',
      'options': [
        'a) has been learning Spanish',
        'b) isn\'t enjoying his cooking class very much',
        'c) has been all over the world lately',
        'd) wants to cook for Amanda and Jim'
      ],
      'correctAnswer': 'd) wants to cook for Amanda and Jim',
    },
    {
      'situation': 8,
      'audioUrl': 'assets/audio/situation8.mp3',
      'question':
          'Situation 8: Nicole is talking to her teacher, Mr. Kushner, about her exam grade.\nWhat is true about Mr. Kushner?',
      'options': [
        'a) thought that Nicole was disappointed with her grade',
        'b) doesn\'t think Nicole knows about his rules',
        'c) usually lets students take exams a second time',
        'd) thinks that Nicole will get a better grade next time'
      ],
      'correctAnswer': 'a) thought that Nicole was disappointed with her grade',
    },
    {
      'situation': 8,
      'audioUrl': 'assets/audio/situation8.mp3',
      'question':
          'Situation 8: Nicole thinks that she got a low grade because:',
      'options': [
        'a) she only had time to answer the reading questions',
        'b) she didn\'t get a grade on the reading section',
        'c) she forgot to answer the reading questions',
        'd) she did badly on the reading section'
      ],
      'correctAnswer': 'b) she didn\'t get a grade on the reading section',
    },
    {
      'situation': 8,
      'audioUrl': 'assets/audio/situation8.mp3',
      'question': 'Situation 8: In the end, Mr. Kushner:',
      'options': [
        'a) wasn\'t able to help Nicole',
        'b) asked Nicole not to miss an exam again',
        'c) apologized to Nicole for the problem',
        'd) realized that Nicole\'s exam was missing'
      ],
      'correctAnswer': 'c) apologized to Nicole for the problem',
    },
    {
      'situation': 9,
      'audioUrl': 'assets/audio/situation9.mp3',
      'question':
          'Situation 9: Lisa is talking to Eric about her job interview.\nAfter Lisa\'s interview, she felt:',
      'options': [
        'a) more optimistic than she did before',
        'b) she was well prepared for it',
        'c) uncertain about it',
        'd) her answers sounded very confident'
      ],
      'correctAnswer': 'a) more optimistic than she did before',
    },
    {
      'situation': 9,
      'audioUrl': 'assets/audio/situation9.mp3',
      'question': 'Situation 9: During the interview, Lisa:',
      'options': [
        'a) recognized that she\'s an impatient person',
        'b) said she tended to be too positive about things',
        'c) admitted she didn\'t enjoy working on big projects',
        'd) boasted that she always met her deadlines'
      ],
      'correctAnswer': 'd) boasted that she always met her deadlines',
    },
    {
      'situation': 9,
      'audioUrl': 'assets/audio/situation9.mp3',
      'question':
          'Situation 9: According to Eric, what can make a person seem intelligent?',
      'options': [
        'a) taking less time to answer a question',
        'b) staying calm throughout an interview',
        'c) speaking naturally and showing no anxiety',
        'd) pausing before saying something'
      ],
      'correctAnswer': 'd) pausing before saying something',
    },
    {
      'situation': 9,
      'audioUrl': 'assets/audio/situation9.mp3',
      'question': 'Situation 9: What is true about Lisa?',
      'options': [
        'a) thinks she could find a much better job',
        'b) usually believes in miracles',
        'c) expects to be offered the position',
        'd) feels frustrated about the situation'
      ],
      'correctAnswer': 'd) feels frustrated about the situation',
    },
    {
      'situation': 9,
      'audioUrl': 'assets/audio/situation9.mp3',
      'question': 'Situation 9: What is true about Eric?',
      'options': [
        'a) agrees with Lisa\'s views on her performance at the interview',
        'b) thinks people naturally have a good opinion about Lisa',
        'c) is concerned that Lisa might quit her job',
        'd) advises her not to be so proud of herself'
      ],
      'correctAnswer':
          'b) thinks people naturally have a good opinion about Lisa',
    },
  ];

  @override
  void initState() {
    super.initState();
    _startTimer();
    _loadQuestionsAndAnswers();
    _audioPlayer = AudioPlayer();
    _startTime = DateTime.now();
    
    if (widget.remainingTime != null) {
      _remainingTime = widget.remainingTime!;
      _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
    }
  }

  void _startTimer() {
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      if (_remainingTime.inSeconds > 0) {
        setState(() {
          _remainingTime = _remainingTime - Duration(seconds: 1);
          _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
        });
      } else {
        _handleTimeUp();
      }
    });
  }

  Future<void> _loadNewAudio() async {
    try {
      // Reset states
      setState(() {
        _position = Duration.zero;
        _bufferedPosition = Duration.zero;
        _duration = Duration.zero;
        _isPlaying = false;
      });

      // Stop current audio if playing
      await _audioPlayer.stop();

      // Load the new audio file
      final audioSource =
          AudioSource.asset(_questions[_currentQuestionIndex]['audioUrl']);
      await _audioPlayer.setAudioSource(audioSource, preload: true);

      // Get new duration
      _duration = await _audioPlayer.duration ?? Duration.zero;

      // Add stream listeners
      _audioPlayer.positionStream.listen((position) {
        if (mounted) {
          setState(() {
            _position = position;
          });
        }
      });

      _audioPlayer.bufferedPositionStream.listen((bufferedPosition) {
        if (mounted) {
          setState(() {
            _bufferedPosition = bufferedPosition;
          });
        }
      });

      _audioPlayer.playerStateStream.listen((playerState) {
        if (mounted) {
          setState(() {
            _isPlaying = playerState.playing;
          });
        }
      });

      setState(() {
        _isAudioEnabled = true;
      }); // Update UI with new duration and enable audio
    } catch (e) {
      print('Error loading new audio: $e');
    }
  }

  Future<void> _handlePlayPause() async {
    try {
      if (_isPlaying) {
        await _audioPlayer.pause();
      } else {
        await _audioPlayer.play();
      }
    } catch (e) {
      print('Error playing/pausing audio: $e');
    }
  }

  Future<void> _handleTestCompletion() async {
    try {
      _timer.cancel();
      await _testSessionService.endListeningTest();
      await _testSessionService.markTestAsCompleted('listening');

      // Calculate scores and prepare answers data
      int correctAnswers = 0;
      final answersToSave = <Map<String, dynamic>>[];

      // Process each question and answer
      for (int i = 0; i < _questions.length; i++) {
        final userAnswer = _userAnswers.length > i ? _userAnswers[i] : null;
        final correctAnswer = _questions[i]['correctAnswer'];
        final isCorrect = userAnswer?.trim() == correctAnswer.trim();
        
        if (isCorrect) correctAnswers++;

        answersToSave.add({
          'situation': _questions[i]['situation'],
          'question': _questions[i]['question'],
          'userAnswer': userAnswer ?? 'No answer',
          'correctAnswer': correctAnswer,
          'isCorrect': isCorrect,
          'options': _questions[i]['options'],
        });
      }

      final standardizedScore = ScoreCalculator.calculateListeningScore(
        correctAnswers,
        _questions.length
      );

      final testDuration = DateTime.now().difference(_startTime);
      final timestamp = DateTime.now();

      // Save test data locally
      final prefs = await SharedPreferences.getInstance();
      await Future.wait([
        prefs.setInt('listening_test_score', standardizedScore),
        prefs.setInt('listening_test_duration', testDuration.inSeconds),
        prefs.setBool('listening_test_completed', true),
        prefs.setInt('listening_total_questions', _questions.length),
      ]);

      // Save to Firestore
      final authService = AuthService();
      final testResultsService = TestResultsService(authService.projectId);
      final firestoreService = FirestoreService();
      
      final userId = await authService.getUserId();
      final result = TestResult(
        userId: userId ?? 'anonymous',
        firstName: widget.firstName,
        lastName: widget.lastName,
        testType: 'Listening Test',
        score: standardizedScore,
        totalQuestions: _questions.length,
        timestamp: timestamp,
      );

      // Save both test result and detailed answers
      await Future.wait([
        testResultsService.saveTestResult(result),
        firestoreService.saveTestAnswers(
          firstName: widget.firstName,
          lastName: widget.lastName,
          testType: 'listening',
          answers: answersToSave,
          timestamp: timestamp,
        ),
      ]);

      widget.onTestComplete?.call(testDuration, standardizedScore);

      if (!mounted) return;
      
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => HomePage()),
        (route) => false,
      );

    } catch (e) {
      print('Error completing listening test: $e');
      if (!mounted) return;
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to save test result. Please try again.'),
          action: SnackBarAction(
            label: 'Retry',
            onPressed: _handleTestCompletion,
          ),
        ),
      );
    }
  }

  void _handleTimeUp() async {
    // Cancel timer and update state immediately
    _timer.cancel();
    await _testSessionService.endListeningTest();
    await _testSessionService.markTestAsCompleted('listening');

    // Calculate raw score from answered questions
    int correctAnswers = 0;
    for (int i = 0; i < _questions.length; i++) {
      if (_userAnswers.length > i &&
          _userAnswers[i] == _questions[i]['correctAnswer']) {
        correctAnswers++;
      }
    }

    // Calculate standardized score
    final standardizedScore = ScoreCalculator.calculateListeningScore(
        correctAnswers, _questions.length);

    final testDuration = DateTime.now().difference(_startTime);

    // Store completion status, score and duration
    final prefs = await SharedPreferences.getInstance();
    await Future.wait([
      prefs.setBool('listening_test_completed', true),
      prefs.setInt('listening_test_score', standardizedScore),
      prefs.setInt('listening_test_duration', testDuration.inSeconds),
      prefs.setInt('listening_total_questions', _questions.length),
    ]);

    // Notify parent
    widget.onTestComplete?.call(testDuration, standardizedScore);

    try {
      final authService = AuthService();
      final testResultsService = TestResultsService(authService.projectId);

      final userId = await authService.getUserId();
      final result = TestResult(
        userId: userId ?? 'anonymous',
        firstName: widget.firstName,
        lastName: widget.lastName,
        testType: 'Listening Test',
        score: standardizedScore,
        totalQuestions: _questions.length,
        timestamp: DateTime.now(),
      );

      await testResultsService.saveTestResult(result);
    } catch (e) {
      print('Error saving test result: $e');
    }

    if (mounted) {
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => HomePage()),
        (route) => false,
      );
    }
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    _timer.cancel();
    _firstNameController.dispose();
    _lastNameController.dispose();
    super.dispose();
  }

  Future<bool?> _showNameInputDialog(BuildContext context) {
    return showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          child: Container(
            width: MediaQuery.of(context).size.width * 0.4,
            child: Padding(
              padding: const EdgeInsets.all(32.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Row(
                    children: [
                      Icon(
                        Icons.person_outline,
                        size: 32,
                        color: Color(0xFF2193b0),
                      ),
                      SizedBox(width: 16),
                      Text(
                        'Enter Your Name',
                        style: GoogleFonts.poppins(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF2193b0),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 32),
                  TextField(
                    controller: _firstNameController,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                    decoration: InputDecoration(
                      labelText: 'First Name',
                      labelStyle: GoogleFonts.poppins(
                        color: Colors.grey[600],
                        fontSize: 16,
                      ),
                      prefixIcon: Icon(
                        Icons.person,
                        color: Color(0xFF2193b0),
                      ),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(width: 2),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Color(0xFF2193b0),
                          width: 2,
                        ),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Colors.grey[300]!,
                          width: 2,
                        ),
                      ),
                      filled: true,
                      fillColor: Colors.grey[50],
                      contentPadding: EdgeInsets.symmetric(
                        horizontal: 24,
                        vertical: 16,
                      ),
                    ),
                  ),
                  SizedBox(height: 24),
                  TextField(
                    controller: _lastNameController,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                    decoration: InputDecoration(
                      labelText: 'Last Name',
                      labelStyle: GoogleFonts.poppins(
                        color: Colors.grey[600],
                        fontSize: 16,
                      ),
                      prefixIcon: Icon(
                        Icons.person_outline,
                        color: Color(0xFF2193b0),
                      ),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(width: 2),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Color(0xFF2193b0),
                          width: 2,
                        ),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Colors.grey[300]!,
                          width: 2,
                        ),
                      ),
                      filled: true,
                      fillColor: Colors.grey[50],
                      contentPadding: EdgeInsets.symmetric(
                        horizontal: 24,
                        vertical: 16,
                      ),
                    ),
                  ),
                  SizedBox(height: 32),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      MouseRegion(
                        cursor: SystemMouseCursors.click,
                        child: TextButton(
                          onPressed: () => Navigator.of(context).pop(false),
                          style: TextButton.styleFrom(
                            padding: EdgeInsets.symmetric(
                              horizontal: 24,
                              vertical: 16,
                            ),
                          ),
                          child: Text(
                            'Cancel',
                            style: GoogleFonts.poppins(
                              fontSize: 16,
                              color: Colors.grey[600],
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ),
                      SizedBox(width: 16),
                      MouseRegion(
                        cursor: SystemMouseCursors.click,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Color(0xFF2193b0),
                            padding: EdgeInsets.symmetric(
                              horizontal: 32,
                              vertical: 16,
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            elevation: 0,
                          ),
                          onPressed: () {
                            if (_firstNameController.text.isNotEmpty &&
                                _lastNameController.text.isNotEmpty) {
                              Navigator.of(context).pop(true);
                            } else {
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text(
                                    'Please enter both first and last name',
                                    style: GoogleFonts.poppins(),
                                  ),
                                  backgroundColor: Colors.red,
                                  behavior: SnackBarBehavior.floating,
                                  margin: EdgeInsets.all(16),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                ),
                              );
                            }
                          },
                          child: Text(
                            'Continue',
                            style: GoogleFonts.poppins(
                              fontSize: 16,
                              color: Colors.white,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Scaffold(
          appBar: AppBar(
            elevation: 0,
            backgroundColor: Colors.white,
            automaticallyImplyLeading: false,
            title: Row(
              children: [
                Icon(
                  MaterialCommunityIcons.headphones,
                  color: Color(0xFF2193b0),
                  size: 28,
                ),
                SizedBox(width: 12),
                Text(
                  'Listening Test',
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
              ],
            ),
            centerTitle: false,
            actions: [
              Container(
                margin: EdgeInsets.only(right: 16),
                child: TextButton.icon(
                  style: TextButton.styleFrom(
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                      side: BorderSide(color: Colors.red.shade400),
                    ),
                  ),
                  icon: Icon(
                    Icons.exit_to_app,
                    color: Colors.red.shade400,
                    size: 20,
                  ),
                  label: Text(
                    'Exit Test',
                    style: GoogleFonts.poppins(
                      color: Colors.red.shade400,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  onPressed: () => _showExitConfirmation(context),
                ),
              ),
            ],
            toolbarHeight: 72,
          ),
          body: Column(
            children: [
              Expanded(
                child: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                    ),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(32.0),
                    child: Row(
                      children: [
                        Expanded(
                          flex: 2,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.stretch,
                            children: [
                              Expanded(
                                flex: 4,
                                child: Card(
                                  margin: EdgeInsets.zero,
                                  elevation: 8,
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(24),
                                  ),
                                  child: Padding(
                                    padding: const EdgeInsets.all(24.0),
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          'Question ${_currentQuestionIndex + 1} of ${_questions.length}',
                                          style: GoogleFonts.poppins(
                                            fontSize: 20,
                                            color: Colors.grey[600],
                                          ),
                                        ),
                                        SizedBox(height: 24),
                                        Text(
                                          _questions[_currentQuestionIndex]
                                              ['question'],
                                          style: GoogleFonts.poppins(
                                            fontSize: 24,
                                            fontWeight: FontWeight.bold,
                                            color: const Color(0xFF2193b0),
                                          ),
                                        ),
                                        Spacer(),
                                        Container(
                                          padding:
                                              EdgeInsets.symmetric(horizontal: 24),
                                          child: Column(
                                            children: [
                                              Container(
                                                height: 36,
                                                child: Stack(
                                                  alignment: Alignment.center,
                                                  children: [
                                                    SliderTheme(
                                                      data: SliderThemeData(
                                                        trackHeight: 4,
                                                        thumbShape:
                                                            RoundSliderThumbShape(
                                                                enabledThumbRadius:
                                                                    0),
                                                        overlayShape:
                                                            RoundSliderOverlayShape(
                                                                overlayRadius: 0),
                                                        trackShape:
                                                            CustomTrackShape(),
                                                        rangeTrackShape:
                                                            RoundedRectRangeSliderTrackShape(),
                                                        showValueIndicator:
                                                            ShowValueIndicator
                                                                .never,
                                                      ),
                                                      child: Slider(
                                                        value: min(
                                                            _bufferedPosition
                                                                .inSeconds
                                                                .toDouble(),
                                                            _duration.inSeconds
                                                                .toDouble()),
                                                        max: _duration.inSeconds
                                                            .toDouble(),
                                                        onChanged: null,
                                                        activeColor:
                                                            Color(0xFF2193b0)
                                                                .withOpacity(0.24),
                                                        inactiveColor:
                                                            Colors.grey.shade200,
                                                      ),
                                                    ),
                                                    SliderTheme(
                                                      data: SliderThemeData(
                                                        trackHeight: 4,
                                                        thumbShape:
                                                            RoundSliderThumbShape(
                                                                enabledThumbRadius:
                                                                    8),
                                                        overlayShape:
                                                            RoundSliderOverlayShape(
                                                                overlayRadius: 16),
                                                        trackShape:
                                                            CustomTrackShape(),
                                                        activeTrackColor:
                                                            Color(0xFF2193b0),
                                                        inactiveTrackColor:
                                                            Colors.transparent,
                                                        thumbColor:
                                                            Color(0xFF2193b0),
                                                        overlayColor:
                                                            Color(0xFF2193b0)
                                                                .withOpacity(0.12),
                                                      ),
                                                      child: Slider(
                                                        value: _position.inSeconds
                                                            .toDouble(),
                                                        max: _duration.inSeconds
                                                            .toDouble(),
                                                        onChanged: null,
                                                        onChangeEnd: null,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                              Padding(
                                                padding: const EdgeInsets.symmetric(
                                                    horizontal: 12),
                                                child: Row(
                                                  mainAxisAlignment:
                                                      MainAxisAlignment
                                                          .spaceBetween,
                                                  children: [
                                                    Text(
                                                      _formatDuration(_position),
                                                      style: GoogleFonts.poppins(
                                                        color: Colors.grey[600],
                                                        fontSize: 12,
                                                        fontWeight:
                                                            FontWeight.w500,
                                                      ),
                                                    ),
                                                    Text(
                                                      _formatDuration(_duration),
                                                      style: GoogleFonts.poppins(
                                                        color: Colors.grey[600],
                                                        fontSize: 12,
                                                        fontWeight:
                                                            FontWeight.w500,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                              SizedBox(height: 8),
                                              Row(
                                                mainAxisAlignment:
                                                    MainAxisAlignment.center,
                                                children: [
                                                  IconButton(
                                                    iconSize: 48,
                                                    icon: AnimatedSwitcher(
                                                      duration: Duration(
                                                          milliseconds: 200),
                                                      transitionBuilder:
                                                          (child, animation) =>
                                                              ScaleTransition(
                                                        scale: animation,
                                                        child: child,
                                                      ),
                                                      child: Icon(
                                                        _isPlaying
                                                            ? Icons
                                                                .pause_circle_filled
                                                            : Icons
                                                                .play_circle_filled,
                                                        key: ValueKey<bool>(
                                                            _isPlaying),
                                                        size: 48,
                                                        color: _hasFinishedPlaying ||
                                                                !_isAudioEnabled
                                                            ? Colors.grey
                                                            : Color(0xFF2193b0),
                                                      ),
                                                    ),
                                                    onPressed: _hasFinishedPlaying ||
                                                            !_isAudioEnabled
                                                        ? null
                                                        : _handlePlayPause,
                                                  ),
                                                ],
                                              ),
                                            ],
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                              SizedBox(height: 16),
                              Card(
                                margin: EdgeInsets.zero,
                                elevation: 8,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(24),
                                ),
                                child: Padding(
                                  padding: EdgeInsets.all(24),
                                  child: Row(
                                    children: [
                                      Icon(
                                        Icons.timer_outlined,
                                        color: _remainingTime.inMinutes < 5
                                            ? Colors.red
                                            : Color(0xFF2193b0),
                                        size: 28,
                                      ),
                                      SizedBox(width: 16),
                                      Expanded(
                                        child: Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          mainAxisSize: MainAxisSize.min,
                                          children: [
                                            Text(
                                              'Time Remaining',
                                              style: GoogleFonts.poppins(
                                                fontSize: 16,
                                                fontWeight: FontWeight.w500,
                                                color: Colors.grey[600],
                                              ),
                                            ),
                                            SizedBox(height: 8),
                                            Text(
                                              _formatTime(_remainingTime),
                                              style: GoogleFonts.poppins(
                                                fontSize: 24,
                                                fontWeight: FontWeight.bold,
                                                color: _remainingTime.inMinutes < 5
                                                    ? Colors.red
                                                    : Color(0xFF2193b0),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                      Expanded(
                                        child: ClipRRect(
                                          borderRadius: BorderRadius.circular(10),
                                          child: LinearProgressIndicator(
                                            value: _progress,
                                            backgroundColor: Colors.grey.shade200,
                                            valueColor:
                                                AlwaysStoppedAnimation<Color>(
                                              _remainingTime.inMinutes < 5
                                                  ? Colors.red
                                                  : Color(0xFF2193b0),
                                            ),
                                            minHeight: 12,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                        SizedBox(width: 32),
                        Expanded(
                          child: Card(
                            elevation: 8,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(24),
                            ),
                            child: Padding(
                              padding: const EdgeInsets.only(
                                  left: 24.0, top: 24.0, bottom: 24.0, right: 8.0),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.stretch,
                                children: [
                                  Text(
                                    'Select your answer:',
                                    style: GoogleFonts.poppins(
                                      fontSize: 20,
                                      fontWeight: FontWeight.bold,
                                      color: const Color(0xFF2193b0),
                                    ),
                                  ),
                                  const SizedBox(height: 24),
                                  Expanded(
                                    child: Scrollbar(
                                      thickness: 8,
                                      radius: Radius.circular(4),
                                      thumbVisibility: true,
                                      child: SingleChildScrollView(
                                        child: Padding(
                                          padding:
                                              const EdgeInsets.only(right: 16.0),
                                          child: Column(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.stretch,
                                            mainAxisSize: MainAxisSize.min,
                                            children: [
                                              ..._questions[_currentQuestionIndex]
                                                      ['options']
                                                  .map<Widget>(
                                                      (option) => _buildOptionButton(
                                                          option))
                                                  .toList(),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                                  SizedBox(height: 32),
                                  ElevatedButton(
                                    style: ElevatedButton.styleFrom(
                                      padding: EdgeInsets.zero,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(24),
                                      ),
                                    ),
                                    onPressed: _selectedAnswer != null
                                        ? () async {
                                            if (_currentQuestionIndex <
                                                _questions.length - 1) {
                                              _userAnswers.add(_selectedAnswer);

                                              int nextQuestionIndex =
                                                  _currentQuestionIndex + 1;
                                              int nextSituationNumber =
                                                  _questions[nextQuestionIndex]
                                                      ['situation'];

                                              setState(() {
                                                _currentQuestionIndex++;
                                                _selectedAnswer = null;
                                                if (nextSituationNumber !=
                                                    _currentSituationNumber) {
                                                  _currentSituationNumber =
                                                      nextSituationNumber;
                                                  _isAudioEnabled = true;
                                                  _loadNewAudio();
                                                } else {
                                                  _isAudioEnabled = false;
                                                }
                                              });
                                            } else {
                                              _timer.cancel();

                                              _userAnswers.add(_selectedAnswer);

                                              await _handleTestCompletion();
                                            }
                                          }
                                        : null,
                                    child: Ink(
                                      decoration: BoxDecoration(
                                        gradient: LinearGradient(
                                          colors: [
                                            Color(0xFF2193b0),
                                            Color(0xFF6dd5ed)
                                          ],
                                          begin: Alignment.centerLeft,
                                          end: Alignment.centerRight,
                                        ),
                                        borderRadius: BorderRadius.circular(24),
                                      ),
                                      child: Container(
                                        height: 48,
                                        alignment: Alignment.center,
                                        child: Text(
                                          _currentQuestionIndex <
                                                  _questions.length - 1
                                              ? 'Next Question'
                                              : 'Finish Test',
                                          style: GoogleFonts.poppins(
                                            fontSize: 16,
                                            color: Colors.white,
                                            fontWeight: FontWeight.w600,
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  String _formatTime(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }

  String _formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }

  void _handleAnswerSelection(String answer) {
    while (_userAnswers.length <= _currentQuestionIndex) {
      _userAnswers.add(null);
    }

    setState(() {
      _userAnswers[_currentQuestionIndex] = answer;
      _selectedAnswer = answer;
    });
  }

  void _storeAnswer(String answer) {
    while (_userAnswers.length <= _currentQuestionIndex) {
      _userAnswers.add(null);
    }

    setState(() {
      _userAnswers[_currentQuestionIndex] = answer.trim();
      _selectedAnswer = answer;
    });
  }

  void _loadQuestionsAndAnswers() {
    // No additional code needed here
  }

  Widget _buildOptionButton(String option) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(24),
          border: Border.all(
            color:
                _selectedAnswer == option ? Color(0xFF2193b0) : Colors.grey.shade300,
            width: 2,
          ),
        ),
        child: InkWell(
          borderRadius: BorderRadius.circular(24),
          onTap: () {
            _handleAnswerSelection(option);
          },
          child: Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: _selectedAnswer == option
                  ? LinearGradient(
                      colors: [
                        Color(0xFF2193b0).withOpacity(0.1),
                        Color(0xFF6dd5ed).withOpacity(0.1)
                      ],
                      begin: Alignment.centerLeft,
                      end: Alignment.centerRight,
                    )
                  : null,
            ),
            child: Row(
              children: [
                Container(
                  width: 24,
                  height: 24,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: _selectedAnswer == option
                          ? Color(0xFF2193b0)
                          : Colors.grey.shade400,
                      width: 2,
                    ),
                    color: _selectedAnswer == option
                        ? Color(0xFF2193b0)
                        : Colors.transparent,
                  ),
                  child: _selectedAnswer == option
                      ? Icon(
                          Icons.check,
                          size: 16,
                          color: Colors.white,
                        )
                      : null,
                ),
                SizedBox(width: 16),
                Expanded(
                  child: Text(
                    option,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: _selectedAnswer == option
                          ? Color(0xFF2193b0)
                          : Colors.black87,
                      fontWeight: _selectedAnswer == option
                          ? FontWeight.w600
                          : FontWeight.normal,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Future<void> _showExitConfirmation(BuildContext context) async {
    final bool? shouldExit = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          elevation: 16,
          child: Container(
            width: 400, // Fixed width for the dialog
            padding: EdgeInsets.all(32),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Colors.white,
                  Colors.grey.shade50,
                ],
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.red.shade50,
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.warning_rounded,
                    size: 48,
                    color: Colors.red.shade400,
                  ),
                ),
                SizedBox(height: 24),
                
                Text(
                  'Exit Test?',
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
                SizedBox(height: 16),
                
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.grey.shade200,
                    ),
                  ),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.info_outline,
                            color: Colors.grey[600],
                            size: 20,
                          ),
                          SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              'Are you sure you want to exit?',
                              style: GoogleFonts.poppins(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                color: Colors.grey[800],
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 12),
                      Text(
                        'This will mark the test as completed with your current progress.',
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          color: Colors.grey[600],
                          height: 1.5,
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 32),
                
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(false),
                      style: TextButton.styleFrom(
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Text(
                        'Cancel',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[600],
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    
                    ElevatedButton(
                      onPressed: () => Navigator.of(context).pop(true),
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.zero,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Ink(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [Colors.red.shade400, Colors.red.shade600],
                            begin: Alignment.centerLeft,
                            end: Alignment.centerRight,
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Container(
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.exit_to_app, color: Colors.white),
                              SizedBox(width: 8),
                              Text(
                                'Exit Test',
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.white,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );

    if (shouldExit == true) {
      // Cancel timer and mark test as completed
      _timer.cancel();
      await _testSessionService.endListeningTest();
      await _testSessionService.markTestAsCompleted('listening');

      // Calculate score based on answered questions
      int correctAnswers = 0;
      for (int i = 0; i < _questions.length; i++) {
        if (_userAnswers.length > i && 
            _userAnswers[i] == _questions[i]['correctAnswer']) {
          correctAnswers++;
        }
      }

      final testDuration = DateTime.now().difference(_startTime);
      final prefs = await SharedPreferences.getInstance();

      // Save test results
      await Future.wait([
        prefs.setInt('listening_test_score', correctAnswers),
        prefs.setInt('listening_test_duration', testDuration.inSeconds),
        prefs.setBool('listening_test_completed', true),
        prefs.setInt('listening_total_questions', _questions.length),
      ]);

      // Save to Firestore
      try {
        final authService = AuthService();
        final testResultsService = TestResultsService(authService.projectId);
        final userId = await authService.getUserId();

        final result = TestResult(
          userId: userId ?? 'anonymous',
          firstName: widget.firstName,
          lastName: widget.lastName,
          testType: 'Listening Test',
          score: correctAnswers,
          totalQuestions: _questions.length,
          timestamp: DateTime.now(),
        );

        await testResultsService.saveTestResult(result);
      } catch (e) {
        print('Error saving test result: $e');
      }

      // Notify parent and navigate back
      widget.onTestComplete?.call(testDuration, correctAnswers);
      
      if (mounted) {
        Navigator.of(context).pushAndRemoveUntil(
          MaterialPageRoute(builder: (context) => HomePage()),
          (route) => false,
        );
      }
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\reading_test_page.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:alc_eljadida_tests/screens/home_page.dart';
import 'package:alc_eljadida_tests/services/auth_service.dart';
import 'package:alc_eljadida_tests/services/test_results_service.dart';
import 'package:alc_eljadida_tests/models/test_result.dart';
import 'package:alc_eljadida_tests/services/test_session_service.dart';
import 'package:alc_eljadida_tests/services/firestore_service.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:alc_eljadida_tests/services/score_calculator.dart';

class ReadingTestPage extends StatefulWidget {
  final Duration? remainingTime;
  final String firstName;
  final String lastName;
  final Function(Duration, int)? onTestComplete;
  
  const ReadingTestPage({
    Key? key, 
    this.remainingTime,
    required this.firstName,
    required this.lastName,
    this.onTestComplete,
  }) : super(key: key);

  @override
  _ReadingTestPageState createState() => _ReadingTestPageState();
}

class _ReadingTestPageState extends State<ReadingTestPage> {
  int _currentQuestionIndex = 0;
  String? _selectedAnswer;
  final int _totalTimeInMinutes = 20;  // Test duration in minutes
  late Timer _timer;
  late Duration _remainingTime;
  double _progress = 1.0;
  final TestSessionService _testSessionService = TestSessionService();
  DateTime _startTime = DateTime.now();

final List<Map<String, dynamic>> _readingTests = [
  {
    'passage': '''Passage 1: An email, Subject: Greetings from Florida!

Hi, Sara.
I'm visiting my sister in Florida. It's very warm and nice here. Every morning, I go to the beach and swim.
Sometimes my sister comes home early, and we play tennis in the afternoon. And we always go for a long
walk after that. I'm having a great time!

Love,
Heather''',
    'questions': [
      {
        'question': 'Heather _____ every day.',
        'options': [
          'a) swims',
          'b) plays tennis',
          'c) comes home early',
          'd) walks with her sister'
        ],
        'correctAnswer': 'a) swims'
      }
    ]
  },
  {
    'passage': '''Passage 2: Helen is getting married and I'm tired.

This has been a crazy week! One of my friends is getting married on Saturday, and I'm helping her with
the reception. It's not going to be a big party, but I still have to do a lot of things. For example, I chose the
songs last week, but the band is playing them for me tonight. I bought the flowers today, but I have to
pick them up on Friday. I'm tired. Can someone help me, please?!''',
    'questions': [
      {
        'question': 'The writer _____.',
        'options': [
          'a) is singing tonight',
          'b) is buying flowers on Friday',
          'c) listened to a band a week ago',
          'd) is going to a party this weekend'
        ],
        'correctAnswer': 'd) is going to a party this weekend'
      }
    ]
  },
  {
    'passage': '''Passage 3: The Whitney Museum of American Art

The Whitney is one of the most famous art museums in New York City. It first opened in 1931 in
Greenwich Village, and then it moved to two different places in 1954 and 1966. Since 2015, this museum
of American art has been in a new building downtown. The new space is larger and more modern, and it
has beautiful views of the Hudson River from its windows and cafÃ©. Visit it next time you are in the city.''',
    'questions': [
      {
        'question': 'The Whitney Museum _____.',
        'options': [
          'a) shows art from many countries',
          'b) moved to a smaller place in 2015',
          'c) has a place to eat and great views',
          'd) was in the same building since 1931'
        ],
        'correctAnswer': 'c) has a place to eat and great views'
      }
    ]
  },
  {
    'passage': '''Passage 4: Is sitting unhealthy?

If you have been sitting in an office for a long period of time, stand up and move for your health.
Research has shown that too much sitting might cause higher blood pressure, add body fat, and increase
the danger of death from heart disease. Studies have also suggested that moving more has a positive
effect on a person's health. So, what can an office worker do? Experts say that you should take a break
from sitting every 30 minutes, stand more while working, and even walk when meeting with coworkers.
Moving might save your life.''',
    'questions': [
      {
        'question': 'The article suggests that _____.',
        'options': [
          'a) there is very little research about the effects of sitting',
          'b) sitting for a long time might be dangerous for your health',
          'c) office workers live longer than other types of workers',
          'd) people do not usually like to walk and exercise'
        ],
        'correctAnswer': 'b) sitting for a long time might be dangerous for your health'
      },
      {
        'question': 'According to the article, office workers should _____.',
        'options': [
          'a) stop working every half hour',
          'b) not work in an office if possible',
          'c) only stand or walk when you work',
          'd) move more to avoid serious heart problems'
        ],
        'correctAnswer': 'd) move more to avoid serious heart problems'
      }
    ]
  },
  {
    'passage': '''Passage 5: A changing neighborhood â€“ for better or for worse?

Recently, an international online retailer opened an enormous, brand-new office in our neighborhood.
Until then, there hadn't been any major companies or huge buildings like this in the area â€“ just small
family-owned businesses. So, obviously, there has been a lot of discussion about it lately.

Some people say the company is creating jobs and will attract other new businesses, but others
complain that most of the new jobs will be low-paying. These people also believe that rising costs will
push out independent businesses and make the neighborhood too expensive for its current residents.

I can't make up my mind whether the company will be a benefit for the neighborhood or not. It's a
complicated issue, and I'm not sure there is a right or wrong answer. What do you think?''',
    'questions': [
      {
        'question': 'The author of the blog post believes that _____.',
        'options': [
          'a) there may be both positive and negative consequences',
          'b) the changes will be helpful for most workers from the region',
          'c) there will soon be many more big companies in the neighborhood',
          'd) the changes will be mostly harmful for people who live in the area'
        ],
        'correctAnswer': 'a) there may be both positive and negative consequences'
      },
      {
        'question': 'Some people think the company will help the area because it will _____.',
        'options': [
          'a) create a greater number of jobs with excellent salaries',
          'b) make the area more interesting to other companies',
          'c) lower the cost of living in the neighborhood',
          'd) replace smaller stores with larger ones'
        ],
        'correctAnswer': 'b) make the area more interesting to other companies'
      }
    ]
  },
  {
    'passage': '''Passage 6: An inspiring story

When Alex McGovern was in high school, he used to earn money working weekends at a local bakery.
After working there for several months, helping bake fresh bread and cakes, Alex noticed a familiar
pattern: a huge amount of food was thrown away at the end of each day. It was food that the bakery
could no longer sell, but it was still good enough to eat. So Alex began to wonder what he could do with
all of this extra food.

With the bakery owner's permission, he reached out to a local organization that worked with families
who need help with food and housing. The charity was extremely pleased and arranged to pick up the
extra food each day. Now bread was no longer wasted, but generously shared with people in need.

Alex's idea was such a success that he began approaching other local restaurants about joining the
program. Before long, there were over a dozen businesses taking part, and Alex created a website to
grow the program in other cities. Today Alex's "simple" idea is helping feed people all over the country!''',
    'questions': [
      {
        'question': "Alex's original goal at the bakery was to _____.",
        'options': [
          'a) eat free bread and cake',
          'b) learn to be a baker',
          'c) make money',
          'd) help people'
        ],
        'correctAnswer': 'c) make money'
      },
      {
        'question': 'Alex got his idea _____.',
        'options': [
          'a) when he saw how much food was wasted',
          'b) while he was baking some fresh bread',
          'c) from the owner of the bakery',
          'd) from a local organization'
        ],
        'correctAnswer': 'a) when he saw how much food was wasted'
      },
      {
        'question': 'The bakery owner _____.',
        'options': [
          'a) thought that Alex\'s plans wouldn\'t work',
          'b) allowed Alex to give away the extra bread',
          'c) helped Alex create a website for the organization',
          'd) didn\'t care about the families assisted by the charity'
        ],
        'correctAnswer': 'b) allowed Alex to give away the extra bread'
      },
      {
        'question': 'The extra food was _____.',
        'options': [
          'a) sold by Alex',
          'b) bought by the charity',
          'c) delivered by the bakery',
          'd) picked up by the organization'
        ],
        'correctAnswer': 'd) picked up by the organization'
      }
    ]
  },
  {
    'passage': '''Passage 7: Some thoughts on your online profile

In many ways, the internet has made it easier than ever to find out about new job opportunities.
Yet, as companies increasingly examine candidates' social media profiles for information to use in the
selection process, people need to be aware of the risks and rewards of posting online. The views they
expressâ€”and the ways they choose to express themâ€”can be a crucial factor in whether or not they
receive an offer of employment.

Many young adults, who have grown up with social media and are comfortable sharing their lives
online, don't realize how employers are using social media in hiring decisions. These companies don't just
consider information about a person's online behavior; they may even gather information about friends
and family. Some fear that employers may judge candidates based on factors such as their medical
history, age, or even beliefs.

While there is currently debate about what information companies are allowed to legally collect or use
for hiring decisions, everyone agrees that people need to be careful about what they post online. Your
behavior on social media could cost you your current position or job opportunities in the future.

So, should job applicants erase their social media accounts completely? According to Professor John
Sacks of the Better Hiring Institute, "It would be better to make sure you have a strong professional profile
that emphasizes your qualifications. Not having any social media might send the message that you
have something to hide." In other words, take the time to create an attractive profile on a career site and
carefully consider everything you post online.''',
    'questions': [
      {
        'question': 'This article is aimed primarily at _____.',
        'options': [
          'a) employers',
          'b) college students',
          'c) potential job candidates',
          'd) social media organizations'
        ],
        'correctAnswer': 'c) potential job candidates'
      },
      {
        'question': 'According to the author, some people may not realize _____.',
        'options': [
          'a) the effect of their online behavior on friends and family',
          'b) how their online profiles can affect hiring decisions',
          'c) what information companies cannot legally collect',
          'd) if their online profile looks professional enough'
        ],
        'correctAnswer': 'b) how their online profiles can affect hiring decisions'
      },
      {
        'question': 'One way of increasing your chances of getting a good job is _____.',
        'options': [
          'a) not keeping a profile online',
          'b) expressing your opinions in a honest way',
          'c) having a profile that clearly shows your skills',
          'd) being secretive about what you share online'
        ],
        'correctAnswer': 'c) having a profile that clearly shows your skills'
      },
      {
        'question': 'The author _____ online personal information to make hiring decisions.',
        'options': [
          'a) is against companies using',
          'b) is in favor of the practice of using',
          'c) believes it does not matter if employers use',
          'd) does not say whether it is good or bad to use'
        ],
        'correctAnswer': 'd) does not say whether it is good or bad to use'
      }
    ]
  },
  {
    'passage': '''Passage 8: Sleep deprivation

If you can sleep well, be grateful. Sleep deprivation is extremely common, and its side effects are both
serious and underappreciated. It is estimated that 50â€“70 million people in the U.S. suffer from a sleep
disorder, and yet too many of them do not seek medical help. Although occasional sleep interruptions
are generally no more than a nuisance, continuous lack of sleep can lead to excessive daytime sleepiness,
emotional difficulties, poor job performance, and even obesity.

Sleep deprivation also impacts mental well-being. A study done by the U.K. Mental Health Foundation
found that people who didn't get enough sleep were about three times more likely to exhibit poor
concentration and four times more likely to have relationship problems. According to another study, by
the University of Warwick, getting less than six hours of sleep on a continuous basis makes a person 48%
more likely to die of heart disease and 15% more likely to develop a stroke. According to study co-author
Professor Francesco Cappuccio, lack of sleep "is like a ticking time bomb for your health."

If a person is experiencing difficulties falling and staying asleep, there are several effective methods
that can help and do not require medication. These include relaxation techniques, like tightening and
relaxing muscles, breathing slowly, and meditating; stimulation control, which involves controlling
pre-bedtime activities and surroundings; and cognitive behavioral therapy (CBT), designed to help people
understand and change their thought patterns. If sleep deprivation and negative symptoms continue,
however, consultation with a doctor is recommended. It's essential not to underestimate the importance
of adequate sleep to maintaining good mental and physical health.''',
    'questions': [
      {
        'question': 'The main idea of the article is that _____.',
        'options': [
          'a) lack of sleep can have significant health consequences',
          'b) sleeping is not as essential as people used to think',
          'c) people underestimate how much sleep they need',
          'd) relaxation techniques are important for a good night\'s sleep'
        ],
        'correctAnswer': 'a) lack of sleep can have significant health consequences'
      },
      {
        'question': 'According to the article, many people with sleeping disorders _____.',
        'options': [
          'a) breathe more slowly',
          'b) do cognitive behavioral therapy',
          'c) do not speak to their doctor about it',
          'd) usually practice healthy sleeping habits'
        ],
        'correctAnswer': 'c) do not speak to their doctor about it'
      },
      {
        'question': 'The article suggests that good sleepers _____.',
        'options': [
          'a) can focus better',
          'b) often get about eight hours of good sleep',
          'c) are able to sleep during the day',
          'd) do not have heart problems'
        ],
        'correctAnswer': 'a) can focus better'
      },
      {
        'question': 'Professor Cappuccio found that _____.',
        'options': [
          'a) sleep-deprived people have more relationship problems',
          'b) sleep deprivation might make people critically ill',
          'c) research from the Mental Health Foundation was incorrect',
          'd) lack of sleep is just a minor nuisance'
        ],
        'correctAnswer': 'b) sleep deprivation might make people critically ill'
      },
      {
        'question': 'The article says that people experiencing sleep difficulties can _____.',
        'options': [
          'a) lose some weight',
          'b) take some types of medicine',
          'c) immediately find medical help',
          'd) try methods that help them fall and stay asleep'
        ],
        'correctAnswer': 'd) try methods that help them fall and stay asleep'
      }
    ]
  }
];

  int _currentExerciseIndex = 0;
  
  String get _currentPassage => _readingTests[_currentExerciseIndex]['passage'];
  List<Map<String, dynamic>> get _currentQuestions => 
      _readingTests[_currentExerciseIndex]['questions'];

  bool get _isLastExercise => _currentExerciseIndex == _readingTests.length - 1;

  List<String?> _userAnswers = [];

  bool get _isLastQuestion => 
      _currentQuestionIndex == _currentQuestions.length - 1 && 
      _currentExerciseIndex == _readingTests.length - 1;

  final TextEditingController _firstNameController = TextEditingController();
  final TextEditingController _lastNameController = TextEditingController();

  void _handleNextExercise() {
    if (_selectedAnswer == null) return;

    setState(() {
      if (_currentExerciseIndex < _readingTests.length - 1) {
        _currentExerciseIndex++;
        _selectedAnswer = null;
      }
    });
  }

  @override
  void initState() {
    super.initState();
    _initializeTimer();
    _userAnswers = List.filled(_getTotalQuestions(), null);
    _startTime = DateTime.now();
  }

  Future<void> _initializeTimer() async {
    final remainingTime = await _testSessionService.getReadingRemainingTime();
    if (remainingTime != null) {
      setState(() {
        _remainingTime = remainingTime;
        _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
      });
    } else {
      setState(() {
        _remainingTime = Duration(minutes: _totalTimeInMinutes);
        _progress = 1.0;
      });
    }
    _startTimer();
  }

  void _startTimer() {
    const oneSecond = Duration(seconds: 1);
    _timer = Timer.periodic(oneSecond, (timer) async {
      final remainingTime = await _testSessionService.getReadingRemainingTime();
      
      if (remainingTime == null || remainingTime.inSeconds <= 0) {
        _timer.cancel();
        _handleTimeUp();
        return;
      }

      setState(() {
        _remainingTime = remainingTime;
        _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
      });
    });
  }

  void _handleTimeUp() async {
    // Cancel timer and update state immediately
    _timer.cancel();
    await _testSessionService.endReadingTest();
    await _testSessionService.markTestAsCompleted('reading');

    // Calculate scores
    int correctAnswers = 0;
    int totalQuestions = 0;
    
    for (int i = 0; i < _readingTests.length; i++) {
      final questions = _readingTests[i]['questions'] as List;
      totalQuestions += questions.length;
      
      for (int j = 0; j < questions.length; j++) {
        final questionIndex = _getQuestionIndex(i, j);
        if (_userAnswers.length > questionIndex && 
            _userAnswers[questionIndex] == questions[j]['correctAnswer']) {
          correctAnswers++;
        }
      }
    }
    
    // Calculate standardized score
    final standardizedScore = ScoreCalculator.calculateReadingScore(
      correctAnswers,
      totalQuestions
    );
    
    final testDuration = DateTime.now().difference(_startTime);
    
    // Store completion status, score and duration
    final prefs = await SharedPreferences.getInstance();
    await Future.wait([
      prefs.setBool('reading_test_completed', true),
      prefs.setInt('reading_test_score', standardizedScore),
      prefs.setInt('reading_test_duration', testDuration.inSeconds),
      prefs.setInt('reading_total_questions', totalQuestions),
    ]);
    
    // Notify parent
    widget.onTestComplete?.call(testDuration, standardizedScore);

    try {
      final authService = AuthService();
      final testResultsService = TestResultsService(authService.projectId);
      
      final userId = await authService.getUserId();
      final result = TestResult(
        userId: userId ?? 'anonymous',
        firstName: widget.firstName,
        lastName: widget.lastName,
        testType: 'Reading Test',
        score: standardizedScore,
        totalQuestions: totalQuestions,
        timestamp: DateTime.now(),
      );
      
      await testResultsService.saveTestResult(result);
    } catch (e) {
      print('Error saving test result: $e');
    }

    if (mounted) {
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => HomePage()),
        (route) => false,
      );
    }
  }

  @override
  void dispose() {
    _timer.cancel();
    _firstNameController.dispose();
    _lastNameController.dispose();
    super.dispose();
  }

  AppBar _buildAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      automaticallyImplyLeading: false,
      title: Row(
        children: [
          Icon(
            MaterialCommunityIcons.book_open_variant,
            color: Color(0xFF2193b0),
            size: 28,
          ),
          SizedBox(width: 12),
          Text(
            'Reading Test',
            style: GoogleFonts.poppins(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Color(0xFF2193b0),
            ),
          ),
        ],
      ),
      centerTitle: false,
      actions: [
        Container(
          margin: EdgeInsets.only(right: 16),
          child: TextButton.icon(
            style: TextButton.styleFrom(
              padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
                side: BorderSide(color: Colors.red.shade400),
              ),
            ),
            icon: Icon(
              Icons.exit_to_app,
              color: Colors.red.shade400,
              size: 20,
            ),
            label: Text(
              'Exit Test',
              style: GoogleFonts.poppins(
                color: Colors.red.shade400,
                fontWeight: FontWeight.w500,
              ),
            ),
            onPressed: () => _showExitConfirmation(context),
          ),
        ),
      ],
      toolbarHeight: 72,
    );
  }

  Future<void> _showExitConfirmation(BuildContext context) async {
    final bool? shouldExit = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          elevation: 16,
          child: Container(
            width: 400, // Fixed width for the dialog
            padding: EdgeInsets.all(32),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Colors.white,
                  Colors.grey.shade50,
                ],
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.red.shade50,
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.warning_rounded,
                    size: 48,
                    color: Colors.red.shade400,
                  ),
                ),
                SizedBox(height: 24),
                
                Text(
                  'Exit Test?',
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
                SizedBox(height: 16),
                
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.grey.shade200,
                    ),
                  ),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.info_outline,
                            color: Colors.grey[600],
                            size: 20,
                          ),
                          SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              'Are you sure you want to exit?',
                              style: GoogleFonts.poppins(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                color: Colors.grey[800],
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 12),
                      Text(
                        'This will mark the test as completed with your current progress.',
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          color: Colors.grey[600],
                          height: 1.5,
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 32),
                
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(false),
                      style: TextButton.styleFrom(
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Text(
                        'Cancel',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[600],
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    
                    ElevatedButton(
                      onPressed: () => Navigator.of(context).pop(true),
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.zero,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Ink(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [Colors.red.shade400, Colors.red.shade600],
                            begin: Alignment.centerLeft,
                            end: Alignment.centerRight,
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Container(
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.exit_to_app, color: Colors.white),
                              SizedBox(width: 8),
                              Text(
                                'Exit Test',
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.white,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );

    if (shouldExit == true) {
      // Cancel timer and mark test as completed
      _timer.cancel();
      await _testSessionService.endReadingTest();
      await _testSessionService.markTestAsCompleted('reading');

      // Calculate scores based on answered questions
      int correctAnswers = 0;
      int totalQuestions = 0;
      
      for (int i = 0; i < _readingTests.length; i++) {
        final questions = _readingTests[i]['questions'] as List;
        totalQuestions += questions.length;
        
        for (int j = 0; j < questions.length; j++) {
          final questionIndex = _getQuestionIndex(i, j);
          if (_userAnswers.length > questionIndex && 
              _userAnswers[questionIndex] == questions[j]['correctAnswer']) {
            correctAnswers++;
          }
        }
      }
      
      // Calculate standardized score
      final standardizedScore = ScoreCalculator.calculateReadingScore(
        correctAnswers,
        totalQuestions
      );
      
      final testDuration = DateTime.now().difference(_startTime);
      
      // Store completion status, score and duration
      final prefs = await SharedPreferences.getInstance();
      await Future.wait([
        prefs.setBool('reading_test_completed', true),
        prefs.setInt('reading_test_score', standardizedScore),
        prefs.setInt('reading_test_duration', testDuration.inSeconds),
        prefs.setInt('reading_total_questions', totalQuestions),
      ]);
      
      // Notify parent
      widget.onTestComplete?.call(testDuration, standardizedScore);

      try {
        final authService = AuthService();
        final testResultsService = TestResultsService(authService.projectId);
        
        final userId = await authService.getUserId();
        final result = TestResult(
          userId: userId ?? 'anonymous',
          firstName: widget.firstName,
          lastName: widget.lastName,
          testType: 'Reading Test',
          score: standardizedScore,
          totalQuestions: totalQuestions,
          timestamp: DateTime.now(),
        );
        
        await testResultsService.saveTestResult(result);
      } catch (e) {
        print('Error saving test result: $e');
      }

      if (mounted) {
        Navigator.of(context).pushAndRemoveUntil(
          MaterialPageRoute(builder: (context) => HomePage()),
          (route) => false,
        );
      }
    }
  }

  // Add this new method to the _ReadingTestPageState class
  String _getButtonText() {
    // Check if we're on the last question of the current exercise
    bool isLastQuestionInExercise = _currentQuestionIndex == _currentQuestions.length - 1;
    
    // If we're on the last exercise and last question
    if (_currentExerciseIndex == _readingTests.length - 1 && isLastQuestionInExercise) {
      return 'Finish Test';
    }
    
    // If we're on the last question of current exercise (but not last exercise)
    if (isLastQuestionInExercise) {
      return 'Next Passage';
    }
    
    // If we're in the middle of questions for current passage
    return 'Next Question';
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        return false;
      },
      child: Scaffold(
        appBar: _buildAppBar(),
        body: Column(
          children: [
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                  ),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(32.0),
                  child: Row(
                    children: [
                      Expanded(
                        flex: 2,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: [
                            Expanded(
                              flex: 4,
                              child: Card(
                                margin: EdgeInsets.zero,
                                elevation: 8,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(24),
                                ),
                                child: Padding(
                                  padding: const EdgeInsets.all(24.0),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        children: [
                                          Text(
                                            'Reading Passage',
                                            style: GoogleFonts.poppins(
                                              fontSize: 24,
                                              fontWeight: FontWeight.bold,
                                              color: const Color(0xFF2193b0),
                                            ),
                                          ),
                                          Text(
                                            'Passage ${_currentExerciseIndex + 1} of ${_readingTests.length}',
                                            style: GoogleFonts.poppins(
                                              fontSize: 20,
                                              color: Colors.grey[600],
                                            ),
                                          ),
                                        ],
                                      ),
                                      SizedBox(height: 24),
                                      Expanded(
                                        child: SingleChildScrollView(
                                          child: Text(
                                            _currentPassage,
                                            style: GoogleFonts.poppins(
                                              fontSize: 16,
                                              height: 1.8,
                                            ),
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                            SizedBox(height: 16),
                            Card(
                              margin: EdgeInsets.zero,
                              elevation: 8,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(24),
                              ),
                              child: Padding(
                                padding: EdgeInsets.all(24),
                                child: Row(
                                  children: [
                                    Icon(
                                      Icons.timer_outlined,
                                      color: _remainingTime.inMinutes < 5 
                                          ? Colors.red 
                                          : Color(0xFF2193b0),
                                      size: 28,
                                    ),
                                    SizedBox(width: 16),
                                    Expanded(
                                      child: Column(
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        mainAxisSize: MainAxisSize.min,
                                        children: [
                                          Text(
                                            'Time Remaining',
                                            style: GoogleFonts.poppins(
                                              fontSize: 16,
                                              fontWeight: FontWeight.w500,
                                              color: Colors.grey[600],
                                            ),
                                          ),
                                          SizedBox(height: 8),
                                          Text(
                                            _formatTime(_remainingTime),
                                            style: GoogleFonts.poppins(
                                              fontSize: 24,
                                              fontWeight: FontWeight.bold,
                                              color: _remainingTime.inMinutes < 5 
                                                  ? Colors.red 
                                                  : Color(0xFF2193b0),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    Expanded(
                                      child: ClipRRect(
                                        borderRadius: BorderRadius.circular(10),
                                        child: LinearProgressIndicator(
                                          value: _progress,
                                          backgroundColor: Colors.grey.shade200,
                                          valueColor: AlwaysStoppedAnimation<Color>(
                                            _remainingTime.inMinutes < 5 
                                                ? Colors.red 
                                                : Color(0xFF2193b0),
                                          ),
                                          minHeight: 12,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      SizedBox(width: 32),
                      Expanded(
                        child: Card(
                          elevation: 8,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(24),
                          ),
                          child: Padding(
                            padding: const EdgeInsets.all(24.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.stretch,
                              children: [
                                Text(
                                  _currentQuestions[_currentQuestionIndex]['question'],
                                  style: GoogleFonts.poppins(
                                    fontSize: 18,
                                  ),
                                ),
                                SizedBox(height: 24),
                                Expanded(
                                  child: ListView.builder(
                                    itemCount: _currentQuestions[_currentQuestionIndex]['options'].length,
                                    itemBuilder: (context, index) {
                                      return _buildOptionButton(
                                        _currentQuestions[_currentQuestionIndex]['options'][index]
                                      );
                                    },
                                  ),
                                ),
                                ElevatedButton(
                                  style: ElevatedButton.styleFrom(
                                    padding: EdgeInsets.zero,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(24),
                                    ),
                                  ),
                                  onPressed: _selectedAnswer != null
                                    ? () async {
                                        if (_currentQuestionIndex < _currentQuestions.length - 1) {
                                          setState(() {
                                            _userAnswers[_getQuestionIndex(_currentExerciseIndex, _currentQuestionIndex)] = _selectedAnswer;
                                            _currentQuestionIndex++;
                                            _selectedAnswer = null;
                                          });
                                        } else if (_currentExerciseIndex < _readingTests.length - 1) {
                                          _userAnswers[_getQuestionIndex(_currentExerciseIndex, _currentQuestionIndex)] = _selectedAnswer;
                                          setState(() {
                                            _currentExerciseIndex++;
                                            _currentQuestionIndex = 0;
                                            _selectedAnswer = null;
                                          });
                                        } else {
                                          // Save final answer before completion
                                          _userAnswers[_getQuestionIndex(_currentExerciseIndex, _currentQuestionIndex)] = _selectedAnswer;
                                          await _handleTestCompletion();
                                        }
                                      }
                                    : null,
                                  child: Ink(
                                    decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                                        begin: Alignment.centerLeft,
                                        end: Alignment.centerRight,
                                      ),
                                      borderRadius: BorderRadius.circular(24),
                                    ),
                                    child: Container(
                                      height: 48,
                                      alignment: Alignment.center,
                                      child: Text(
                                        _getButtonText(),
                                        style: GoogleFonts.poppins(
                                          fontSize: 16,
                                          color: Colors.white,
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOptionButton(String option) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(24),
          border: Border.all(
            color: _selectedAnswer == option 
                ? Color(0xFF2193b0) 
                : Colors.grey.shade300,
            width: 2,
          ),
        ),
        child: InkWell(
          borderRadius: BorderRadius.circular(24),
          onTap: () {
            setState(() {
              _selectedAnswer = option;
            });
          },
          child: Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: _selectedAnswer == option
                  ? LinearGradient(
                      colors: [
                        Color(0xFF2193b0).withOpacity(0.1),
                        Color(0xFF6dd5ed).withOpacity(0.1)
                      ],
                      begin: Alignment.centerLeft,
                      end: Alignment.centerRight,
                  )
                  : null,
            ),
            child: Row(
              children: [
                Container(
                  width: 24,
                  height: 24,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: _selectedAnswer == option 
                          ? Color(0xFF2193b0) 
                          : Colors.grey.shade400,
                      width: 2,
                    ),
                    color: _selectedAnswer == option 
                        ? Color(0xFF2193b0) 
                        : Colors.transparent,
                  ),
                  child: _selectedAnswer == option
                      ? Icon(
                          Icons.check,
                          size: 16,
                          color: Colors.white,
                        )
                      : null,
                ),
                SizedBox(width: 16),
                Expanded(
                  child: Text(
                    option,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: _selectedAnswer == option 
                          ? Color(0xFF2193b0) 
                          : Colors.black87,
                      fontWeight: _selectedAnswer == option 
                          ? FontWeight.w600 
                          : FontWeight.normal,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _formatTime(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }

  int _getTotalQuestions() {
    return _readingTests.fold<int>(0, (sum, test) => 
        sum + (test['questions'] as List).length);
  }

  int _getCurrentQuestionNumber() {
    int questionNumber = 0;
    for (int i = 0; i < _currentExerciseIndex; i++) {
      questionNumber += (_readingTests[i]['questions'] as List).length;
    }
    return questionNumber + _currentQuestionIndex + 1;
  }

  int _getTotalQuestionsInCurrentExercise() {
    return _readingTests[_currentExerciseIndex]['questions'].length;
  }

  int _getQuestionIndex(int exerciseIndex, int questionIndex) {
    int index = 0;
    for (int i = 0; i < exerciseIndex; i++) {
      index += (_readingTests[i]['questions'] as List).length;
    }
    return index + questionIndex;
  }

  Future<void> _handleTestCompletion() async {
    try {
      // Cancel timer immediately
      _timer.cancel();
      await _testSessionService.endReadingTest();
      await _testSessionService.markTestAsCompleted('reading');
      
      // Calculate raw score and prepare answers data
      int correctAnswers = 0;
      final answersToSave = <Map<String, dynamic>>[];
      
      // Process each passage and its questions
      for (int i = 0; i < _readingTests.length; i++) {
        final passage = _readingTests[i]['passage'];
        final questions = _readingTests[i]['questions'] as List;
        
        for (int j = 0; j < questions.length; j++) {
          final questionIndex = _getQuestionIndex(i, j);
          final userAnswer = _userAnswers.length > questionIndex ? _userAnswers[questionIndex] : null;
          final correctAnswer = questions[j]['correctAnswer'];
          final isCorrect = userAnswer == correctAnswer;
          
          if (isCorrect) correctAnswers++;

          answersToSave.add({
            'passageNumber': i + 1,
            'passage': passage,
            'question': questions[j]['question'],
            'userAnswer': userAnswer ?? 'No answer',
            'correctAnswer': correctAnswer,
            'isCorrect': isCorrect,
            'options': questions[j]['options'],
          });
        }
      }
      
      // Calculate standardized score
      final totalQuestions = _getTotalQuestions();
      final standardizedScore = ScoreCalculator.calculateReadingScore(
        correctAnswers,
        totalQuestions
      );

      final testDuration = DateTime.now().difference(_startTime);
      final timestamp = DateTime.now();
      
      // Save test data locally
      final prefs = await SharedPreferences.getInstance();
      await Future.wait([
        prefs.setInt('reading_test_score', standardizedScore),
        prefs.setInt('reading_test_duration', testDuration.inSeconds),
        prefs.setBool('reading_test_completed', true),
        prefs.setInt('reading_total_questions', totalQuestions),
      ]);

      // Save to Firestore
      final authService = AuthService();
      final testResultsService = TestResultsService(authService.projectId);
      final firestoreService = FirestoreService();
      
      final userId = await authService.getUserId();
      final result = TestResult(
        userId: userId ?? 'anonymous',
        firstName: widget.firstName,
        lastName: widget.lastName,
        testType: 'Reading Test',
        score: standardizedScore,
        totalQuestions: totalQuestions,
        timestamp: timestamp,
      );
      
      // Save both test result and detailed answers
      await Future.wait([
        testResultsService.saveTestResult(result),
        firestoreService.saveTestAnswers(
          firstName: widget.firstName,
          lastName: widget.lastName,
          testType: 'reading',
          answers: answersToSave,
          timestamp: timestamp,
        ),
      ]);
      
      // Notify parent
      widget.onTestComplete?.call(testDuration, standardizedScore);
      
      if (!mounted) return;

      // Navigate to home
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => HomePage()),
        (route) => false,
      );
      
    } catch (e) {
      print('Error completing reading test: $e');
      if (!mounted) return;
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to save test result. Please try again.'),
          action: SnackBarAction(
            label: 'Retry',
            onPressed: _handleTestCompletion,
          ),
        ),
      );
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\registration_page.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:alc_eljadida_tests/screens/instruction_page.dart';
import 'package:file_picker/file_picker.dart';
import 'package:alc_eljadida_tests/screens/student_info_page.dart';
import 'package:alc_eljadida_tests/services/auth_service.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:alc_eljadida_tests/screens/selection_page.dart';

class RegistrationPage extends StatefulWidget {
  const RegistrationPage({super.key});

  @override
  State<RegistrationPage> createState() => _RegistrationPageState();
}

class _RegistrationPageState extends State<RegistrationPage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoading = false;
  final AuthService _authService = AuthService();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  Future<void> _signIn() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final response = await _authService.signInWithEmailAndPassword(
        _emailController.text.trim(),
        _passwordController.text.trim(),
      );

      if (response['idToken'] != null && mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const SelectionPage()), // Changed from StudentInfoPage
        );
      }
    } catch (error) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(error.toString().replaceAll('Exception: ', '')),
            backgroundColor: Colors.red[400],
          ),
        );
      }
    }

    setState(() {
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFF2193b0),
              Color(0xFF6dd5ed),
            ],
          ),
        ),
        child: Stack(  // Changed from Center to Stack
          children: [
            Positioned(  // Added brand text
              top: 20,
              left: 20,
              child: Text(
                'ALC El Jadida',
                style: GoogleFonts.poppins(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
            Center(  // Wrapped existing content in Center
              child: Card(
                elevation: 8,
                margin: EdgeInsets.all(32),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Container(
                  constraints: BoxConstraints(maxWidth: 400),
                  padding: const EdgeInsets.all(32),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Center(
                          child: SizedBox(
                            width: 80,
                            height: 80, // Changed to match width
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(10),
                              child: Image.asset(
                                'assets/logo_app.jpg',
                                fit: BoxFit.cover,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'PLACEMENT TEST',  // Changed from 'Welcome Back'
                          style: GoogleFonts.poppins(
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFF2193b0),
                          ),
                          textAlign: TextAlign.center,
                        ),
                        Text(
                          'Please sign in to continue',
                          style: GoogleFonts.poppins(
                            fontSize: 14,
                            color: Colors.grey[600],
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 32),
                        _buildTextField(
                          label: 'Email',
                          controller: _emailController,
                          prefixIcon: Icons.email_outlined,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter your email';
                            }
                            if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                              return 'Please enter a valid email';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          label: 'Password',
                          controller: _passwordController,
                          prefixIcon: Icons.lock_outline,
                          isPassword: true,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter a password';
                            }
                            if (value.length < 6) {
                              return 'Password must be at least 6 characters';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton(
                          onPressed: _isLoading ? null : _signIn,
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(vertical: 16),
                            backgroundColor: Color(0xFF2193b0),
                            elevation: 3,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(30),
                            ),
                          ),
                          child: _isLoading
                              ? SizedBox(
                                  height: 20,
                                  width: 20,
                                  child: CircularProgressIndicator(
                                    color: Colors.white,
                                    strokeWidth: 2,
                                  ),
                                )
                              : Text(
                                  'Sign In',
                                  style: GoogleFonts.poppins(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                    color: Colors.white,
                                  ),
                                ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField({
    required String label,
    required TextEditingController controller,
    required IconData prefixIcon,
    bool isPassword = false,
    String? Function(String?)? validator,
  }) {
    return TextFormField(
      controller: controller,
      obscureText: isPassword,
      validator: validator,
      style: GoogleFonts.poppins(),
      decoration: InputDecoration(
        labelText: label,
        labelStyle: GoogleFonts.poppins(color: Colors.grey[600]),
        prefixIcon: Icon(prefixIcon, color: Color(0xFF2193b0)),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide(color: Colors.grey[300]!),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide(color: Color(0xFF2193b0), width: 2),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide(color: Colors.red[300]!),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide(color: Colors.red[300]!, width: 2),
        ),
        filled: true,
        fillColor: Colors.grey[50],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\selection_page.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:alc_eljadida_tests/screens/student_info_page.dart';
import 'package:alc_eljadida_tests/screens/dashboard_page.dart';

class SelectionPage extends StatelessWidget {
  const SelectionPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFF2193b0),
              Color(0xFF6dd5ed),
            ],
          ),
        ),
        child: Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              _buildOptionCard(
                context,
                title: 'Take Test',
                icon: Icons.quiz,
                description: 'Start your placement test',
                onTap: () => Navigator.of(context).pushReplacement(
                  MaterialPageRoute(builder: (context) => StudentInfoPage()),
                ),
                gradient: LinearGradient(
                  colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                ),
              ),
              SizedBox(width: 32),
              _buildOptionCard(
                context,
                title: 'Dashboard',
                icon: Icons.dashboard,
                description: 'View test results and statistics',
                onTap: () => Navigator.of(context).pushReplacement(
                  MaterialPageRoute(builder: (context) => DashboardPage()),
                ),
                gradient: LinearGradient(
                  colors: [Colors.orange.shade400, Colors.orange.shade600],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildOptionCard(
    BuildContext context, {
    required String title,
    required IconData icon,
    required String description,
    required VoidCallback onTap,
    required Gradient gradient,
  }) {
    return MouseRegion(
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTap: onTap,
        child: Card(
          elevation: 12,
          shadowColor: Colors.black26,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(32),
          ),
          child: Container(
            width: 320,
            padding: EdgeInsets.all(32),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(32),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [Colors.white, Colors.grey.shade50],
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: EdgeInsets.all(24),
                  decoration: BoxDecoration(
                    gradient: gradient,
                    borderRadius: BorderRadius.circular(24),
                  ),
                  child: Icon(
                    icon,
                    size: 48,
                    color: Colors.white,
                  ),
                ),
                SizedBox(height: 24),
                Text(
                  title,
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.grey[800],
                  ),
                ),
                SizedBox(height: 12),
                Text(
                  description,
                  textAlign: TextAlign.center,
                  style: GoogleFonts.poppins(
                    fontSize: 16,
                    color: Colors.grey[600],
                  ),
                ),
                SizedBox(height: 24),
                Container(
                  decoration: BoxDecoration(
                    gradient: gradient,
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: ElevatedButton(
                    onPressed: onTap,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.transparent,
                      shadowColor: Colors.transparent,
                      padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16),
                      ),
                    ),
                    child: Text(
                      'Select',
                      style: GoogleFonts.poppins(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
} 


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\student_info_page.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter/services.dart';
import 'package:alc_eljadida_tests/screens/instruction_page.dart';
import 'package:alc_eljadida_tests/services/auth_service.dart';

class StudentInfoPage extends StatefulWidget {
  const StudentInfoPage({Key? key}) : super(key: key);

  @override
  _StudentInfoPageState createState() => _StudentInfoPageState();
}

class _StudentInfoPageState extends State<StudentInfoPage> {
  final _formKey = GlobalKey<FormState>();
  final _firstNameController = TextEditingController();
  final _lastNameController = TextEditingController();
  final _birthDateController = TextEditingController();
  final _addressController = TextEditingController();
  final _phoneController = TextEditingController();
  final _emailController = TextEditingController();
  final _cinController = TextEditingController();
  final _schoolCodeController = TextEditingController();
  
  final AuthService _authService = AuthService();
  bool _isLoading = false;
  bool _isParentPhone = false;
  bool _isExistingStudent = false;
  DateTime? _selectedDate;

  @override
  void dispose() {
    _firstNameController.dispose();
    _lastNameController.dispose();
    _birthDateController.dispose();
    _addressController.dispose();
    _phoneController.dispose();
    _emailController.dispose();
    _cinController.dispose();
    _schoolCodeController.dispose();
    super.dispose();
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now().subtract(Duration(days: 365 * 15)),
      firstDate: DateTime(1950),
      lastDate: DateTime.now(),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: Color(0xFF2193b0),
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black,
            ),
            dialogBackgroundColor: Colors.white,
          ),
          child: child!,
        );
      },
    );

    if (picked != null) {
      setState(() {
        _selectedDate = picked;
        _birthDateController.text = "${picked.day}/${picked.month}/${picked.year}";
      });
    }
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      // Create a map of all user data
      final userData = {
        'birthDate': _birthDateController.text.trim(),
        'address': _addressController.text.trim(),
        'phone': _phoneController.text.trim(),
        'isParentPhone': _isParentPhone,
        'email': _emailController.text.trim(),
        'cin': _cinController.text.trim(),
        'isExistingStudent': _isExistingStudent,
        'schoolCode': _schoolCodeController.text.trim(),
      };

      await _authService.saveUserData(
        _firstNameController.text.trim(),
        _lastNameController.text.trim(),
        userData,
      );

      if (!mounted) return;
      
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (context) => InstructionPage()),
      );
    } catch (e) {
      if (!mounted) return;
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error saving student information'),
          backgroundColor: Colors.red,
        ),
      );
    }

    setState(() => _isLoading = false);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            child: Card(
              elevation: 8,
              margin: EdgeInsets.all(32),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              child: Container(
                constraints: BoxConstraints(maxWidth: 600), // Increased width
                padding: const EdgeInsets.all(32),
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      _buildHeader(),
                      SizedBox(height: 32),
                      
                      _buildTextField(
                        controller: _schoolCodeController,
                        label: 'School Code',
                        icon: Icons.verified_user_outlined,
                        validator: (value) => value?.isEmpty ?? true 
                          ? 'Please enter your school code' 
                          : null,
                      ),
                      SizedBox(height: 24),
                      
                      Row(
                        children: [
                          Expanded(
                            child: _buildTextField(
                              controller: _firstNameController,
                              label: 'First Name',
                              icon: Icons.person_outline,
                              validator: (value) => value?.isEmpty ?? true 
                                ? 'Please enter your first name' 
                                : null,
                            ),
                          ),
                          SizedBox(width: 16),
                          Expanded(
                            child: _buildTextField(
                              controller: _lastNameController,
                              label: 'Last Name',
                              icon: Icons.person_outline,
                              validator: (value) => value?.isEmpty ?? true 
                                ? 'Please enter your last name' 
                                : null,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 16),
                      
                      _buildDateField(),
                      SizedBox(height: 16),

                      _buildTextField(
                        controller: _addressController,
                        label: 'Address (Optional)',
                        icon: Icons.location_on_outlined,
                        maxLines: 2,
                      ),
                      SizedBox(height: 16),

                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Expanded(
                            child: _buildTextField(
                              controller: _phoneController,
                              label: 'Phone Number',
                              icon: Icons.phone_outlined,
                              keyboardType: TextInputType.phone,
                              validator: (value) {
                                if (value?.isEmpty ?? true) {
                                  return 'Please enter a phone number';
                                }
                                if (!RegExp(r'^\+?[\d\s-]{8,}$').hasMatch(value!)) {
                                  return 'Please enter a valid phone number';
                                }
                                return null;
                              },
                            ),
                          ),
                          SizedBox(width: 16),
                          Expanded(
                            child: Column(
                              children: [
                                SwitchListTile(
                                  title: Text(
                                    'Parent\'s Phone',
                                    style: GoogleFonts.poppins(
                                      fontSize: 14,
                                      color: Colors.grey[700],
                                    ),
                                  ),
                                  value: _isParentPhone,
                                  onChanged: (bool value) {
                                    setState(() {
                                      _isParentPhone = value;
                                    });
                                  },
                                  activeColor: Color(0xFF2193b0),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 16),

                      _buildTextField(
                        controller: _emailController,
                        label: 'Email Address',
                        icon: Icons.email_outlined,
                        keyboardType: TextInputType.emailAddress,
                        validator: (value) {
                          if (value?.isEmpty ?? true) {
                            return 'Please enter an email address';
                          }
                          if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value!)) {
                            return 'Please enter a valid email address';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: 16),

                      _buildTextField(
                        controller: _cinController,
                        label: 'CIN (Optional)',
                        icon: Icons.badge_outlined,
                      ),
                      SizedBox(height: 16),

                      SwitchListTile(
                        title: Text(
                          'Existing ALC Student',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            color: Colors.grey[700],
                          ),
                        ),
                        subtitle: Text(
                          'Check if you are currently enrolled at ALC',
                          style: GoogleFonts.poppins(
                            fontSize: 12,
                            color: Colors.grey[600],
                          ),
                        ),
                        value: _isExistingStudent,
                        onChanged: (bool value) {
                          setState(() {
                            _isExistingStudent = value;
                          });
                        },
                        activeColor: Color(0xFF2193b0),
                      ),
                      SizedBox(height: 32),

                      _buildSubmitButton(),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Column(
      children: [
        Center(
          child: Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Color(0xFF2193b0).withOpacity(0.1),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Icon(
              Icons.person_outline,
              size: 48,
              color: Color(0xFF2193b0),
            ),
          ),
        ),
        SizedBox(height: 24),
        Text(
          'Student Information',
          style: GoogleFonts.poppins(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Color(0xFF2193b0),
          ),
          textAlign: TextAlign.center,
        ),
        Text(
          'Please complete your profile',
          style: GoogleFonts.poppins(
            fontSize: 14,
            color: Colors.grey[600],
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    String? Function(String?)? validator,
    TextInputType? keyboardType,
    int maxLines = 1,
  }) {
    return TextFormField(
      controller: controller,
      validator: validator,
      keyboardType: keyboardType,
      maxLines: maxLines,
      style: GoogleFonts.poppins(),
      decoration: InputDecoration(
        labelText: label,
        labelStyle: GoogleFonts.poppins(color: Colors.grey[600]),
        prefixIcon: Icon(icon, color: Color(0xFF2193b0)),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey[300]!),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Color(0xFF2193b0), width: 2),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.red[300]!),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.red[300]!, width: 2),
        ),
        filled: true,
        fillColor: Colors.grey[50],
      ),
    );
  }

  Widget _buildDateField() {
    return GestureDetector(
      onTap: () => _selectDate(context),
      child: AbsorbPointer(
        child: TextFormField(
          controller: _birthDateController,
          validator: (value) => value?.isEmpty ?? true 
            ? 'Please select your birth date' 
            : null,
          style: GoogleFonts.poppins(),
          decoration: InputDecoration(
            labelText: 'Birth Date',
            labelStyle: GoogleFonts.poppins(color: Colors.grey[600]),
            prefixIcon: Icon(Icons.calendar_today, color: Color(0xFF2193b0)),
            suffixIcon: Icon(Icons.arrow_drop_down, color: Color(0xFF2193b0)),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.grey[300]!),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Color(0xFF2193b0), width: 2),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.red[300]!),
            ),
            focusedErrorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.red[300]!, width: 2),
            ),
            filled: true,
            fillColor: Colors.grey[50],
          ),
        ),
      ),
    );
  }

  Widget _buildSubmitButton() {
    return ElevatedButton(
      onPressed: _isLoading ? null : _submitForm,
      style: ElevatedButton.styleFrom(
        padding: EdgeInsets.symmetric(vertical: 16),
        backgroundColor: Color(0xFF2193b0),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      child: _isLoading
          ? SizedBox(
              height: 20,
              width: 20,
              child: CircularProgressIndicator(
                color: Colors.white,
                strokeWidth: 2,
              ),
            )
          : Text(
              'Continue',
              style: GoogleFonts.poppins(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.white,
              ),
            ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\test_results_page.dart
import 'package:alc_eljadida_tests/screens/registration_page.dart';
import 'package:alc_eljadida_tests/services/score_calculator.dart';
import 'package:alc_eljadida_tests/services/test_session_service.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:alc_eljadida_tests/services/firestore_service.dart';
import 'package:alc_eljadida_tests/services/auth_service.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';

class TestResultsPage extends StatefulWidget {
  final String firstName;
  final String lastName;

  const TestResultsPage({
    Key? key,
    required this.firstName,
    required this.lastName,
  }) : super(key: key);

  @override
  _TestResultsPageState createState() => _TestResultsPageState();
}

// First, add this class outside of _TestResultsPageState
class DottedLinePainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.grey[300]!
      ..strokeWidth = 2
      ..strokeCap = StrokeCap.round;

    const dashHeight = 5;
    const dashSpace = 3;
    double startY = 0;
    
    while (startY < size.height) {
      canvas.drawLine(
        Offset(0, startY),
        Offset(0, startY + dashHeight),
        paint,
      );
      startY += dashHeight + dashSpace;
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

class _TestResultsPageState extends State<TestResultsPage> {
  final FirestoreService _firestoreService = FirestoreService();
  List<Map<String, dynamic>> _testResults = [];
  bool _isLoading = true;
  final DateFormat _dateFormatter = DateFormat('MMM dd, yyyy - HH:mm');

  @override
  void initState() {
    super.initState();
    _loadTestResults();
  }

  Future<void> _loadTestResults() async {
    try {
      setState(() => _isLoading = true);
      final results = await _firestoreService.fetchTestResults(
        widget.firstName,
        widget.lastName
      );
      if (mounted) {
        setState(() {
          _testResults = results;
          _isLoading = false;
        });
      }
    } catch (e) {
      print('Error fetching results: $e');
      if (mounted) {
        setState(() => _isLoading = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load test results')),
        );
      }
    }
  }

  Color _getScoreColor(int percentage) {
    if (percentage >= 90) return Color(0xFF4CAF50);
    if (percentage >= 80) return Color(0xFF8BC34A);
    if (percentage >= 70) return Color(0xFF2196F3);
    if (percentage >= 60) return Color(0xFFFFA726);
    if (percentage >= 50) return Color(0xFFFF7043);
    return Color(0xFFE53935);
  }

  String _formatDuration(int seconds) {
    final Duration duration = Duration(seconds: seconds);
    return '${duration.inMinutes}:${(duration.inSeconds % 60).toString().padLeft(2, '0')}';
  }

  Widget _buildScoreCard(Map<String, dynamic> result) {
    try {
      final scores = {
        'listening': int.parse(result['listeningScore']?['integerValue'] ?? '0'),
        'reading': int.parse(result['readingScore']?['integerValue'] ?? '0'),
        'grammar': int.parse(result['grammarScore']?['integerValue'] ?? '0'),
      };
      
      final maxScores = {
        'listening': int.parse(result['listeningMaxScore']?['integerValue'] ?? '100'),
        'reading': int.parse(result['readingMaxScore']?['integerValue'] ?? '100'),
        'grammar': int.parse(result['grammarMaxScore']?['integerValue'] ?? '100'),
      };
      
      final durations = {
        'listening': int.parse(result['listeningDuration']?['integerValue'] ?? '0'),
        'reading': int.parse(result['readingDuration']?['integerValue'] ?? '0'),
        'grammar': int.parse(result['grammarDuration']?['integerValue'] ?? '0'),
      };
      
      final totalScore = int.parse(result['totalScore']?['integerValue'] ?? '0');
      final maxTotalScore = int.parse(result['maxTotalScore']?['integerValue'] ?? '300');
      
      final timestamp = DateTime.parse(result['timestamp']?['timestampValue'] ?? DateTime.now().toIso8601String());
      final formattedDate = _dateFormatter.format(timestamp);

      return Container(
        margin: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
        child: Column(
          children: [
            // Thank You Section
            Container(
              margin: EdgeInsets.only(bottom: 32),
              child: Column(
                children: [
                  Icon(
                    Icons.check_circle_outline,
                    size: 64,
                    color: Colors.white,
                  ),
                  SizedBox(height: 16),
                  Text(
                    'Thank You for Completing the Test!',
                    style: GoogleFonts.poppins(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    'Here are your detailed results',
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: Colors.white.withOpacity(0.9),
                    ),
                  ),
                  SizedBox(height: 24),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      _buildInfoChip(
                        Icons.person_outline,
                        '${widget.firstName} ${widget.lastName}',
                      ),
                      SizedBox(width: 16),
                      _buildInfoChip(
                        Icons.calendar_today_outlined,
                        _dateFormatter.format(timestamp),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            
            // Existing Ticket Card
            _buildALCLevelTicket(totalScore),
            
            // Rest of the score card
            Card(
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
                side: BorderSide(color: Colors.grey.shade200),
              ),
              child: Container(
                padding: EdgeInsets.all(32),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Test Results',
                              style: GoogleFonts.poppins(
                                fontSize: 28,
                                fontWeight: FontWeight.bold,
                                color: Color(0xFF2193b0),
                              ),
                            ),
                            SizedBox(height: 4),
                            Text(
                              formattedDate,
                              style: GoogleFonts.poppins(
                                fontSize: 14,
                                color: Colors.grey[600],
                              ),
                            ),
                          ],
                        ),
                        Container(
                          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                          decoration: BoxDecoration(
                            color: Color(0xFF2193b0).withOpacity(0.1),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Text(
                            'ALC Level: ${ScoreCalculator.calculateALCLevel(totalScore)}',
                            style: GoogleFonts.poppins(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                              color: Color(0xFF2193b0),
                            ),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(height: 32),
                    
                    // Score Grid
                    GridView.count(
                      shrinkWrap: true,
                      crossAxisCount: 3,
                      crossAxisSpacing: 24,
                      childAspectRatio: 1.5,
                      physics: NeverScrollableScrollPhysics(),
                      children: [
                        _buildTestModule(
                          'Listening',
                          scores['listening']!,
                          maxScores['listening']!,
                          durations['listening']!,
                          MaterialCommunityIcons.headphones,
                        ),
                        _buildTestModule(
                          'Reading',
                          scores['reading']!,
                          maxScores['reading']!,
                          durations['reading']!,
                          MaterialCommunityIcons.book_open_variant,
                        ),
                        _buildTestModule(
                          'Grammar',
                          scores['grammar']!,
                          maxScores['grammar']!,
                          durations['grammar']!,
                          MaterialCommunityIcons.format_text,
                        ),
                      ],
                    ),
                    
                    SizedBox(height: 32),
                    
                    // Total Score Section
                    Container(
                      padding: EdgeInsets.all(24),
                      decoration: BoxDecoration(
                        color: Colors.grey.shade50,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  'Total Score',
                                  style: GoogleFonts.poppins(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                    color: Colors.grey[700],
                                  ),
                                ),
                                SizedBox(height: 8),
                                Text(
                                  '$totalScore/$maxTotalScore',
                                  style: GoogleFonts.poppins(
                                    fontSize: 32,
                                    fontWeight: FontWeight.bold,
                                    color: _getScoreColor((totalScore * 100) ~/ maxTotalScore),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          Container(
                            width: 1,
                            height: 64,
                            color: Colors.grey.shade300,
                          ),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                Text(
                                  'Total Time',
                                  style: GoogleFonts.poppins(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                    color: Colors.grey[700],
                                  ),
                                ),
                                SizedBox(height: 8),
                                Text(
                                  _formatDuration(
                                    durations['listening']! +
                                    durations['reading']! +
                                    durations['grammar']!
                                  ),
                                  style: GoogleFonts.poppins(
                                    fontSize: 32,
                                    fontWeight: FontWeight.bold,
                                    color: Color(0xFF2193b0),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      );
    } catch (e) {
      print('Error building score card: $e');
      return Card(
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Text('Error displaying result'),
        ),
      );
    }
  }

  Widget _buildTestModule(
    String name,
    int score,
    int maxScore,
    int duration,
    IconData icon,
  ) {
    final percentage = (score * 100) ~/ maxScore;
    return Container(
      padding: EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade200),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.03),
            blurRadius: 12,
            offset: Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: Color(0xFF2193b0), size: 24),
              SizedBox(width: 12),
              Text(
                name,
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          Spacer(),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '$score/$maxScore',
                    style: GoogleFonts.poppins(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: _getScoreColor(percentage),
                    ),
                  ),
                  Text(
                    '${_formatDuration(duration)}',
                    style: GoogleFonts.poppins(
                      fontSize: 14,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
              Container(
                padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: _getScoreColor(percentage).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Text(
                  '$percentage%',
                  style: GoogleFonts.poppins(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: _getScoreColor(percentage),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Color(0xFF2193b0),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: AppBar(
          backgroundColor: Colors.white,
          elevation: 0,
          leading: IconButton(
            icon: Icon(Icons.arrow_back, color: Color(0xFF2193b0)),
            onPressed: () => _handleBack(context),
          ),
          title: Text(
            'Test Results',
            style: GoogleFonts.poppins(
              color: Color(0xFF2193b0),
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        body: _isLoading
            ? Center(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                    SizedBox(height: 16),
                    Text(
                      'Loading test results...',
                      style: GoogleFonts.poppins(
                        color: Colors.white,
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
              )
            : _testResults.isEmpty
                ? Center(
                    child: Text(
                      'No test results found',
                      style: GoogleFonts.poppins(
                        fontSize: 16,
                        color: Colors.white,
                      ),
                    ),
                  )
                : SingleChildScrollView(
                    padding: EdgeInsets.symmetric(vertical: 24),
                    child: Center(
                      child: ConstrainedBox(
                        constraints: BoxConstraints(maxWidth: 1200),
                        child: Column(
                          children: _testResults
                              .map((result) => _buildScoreCard(result))
                              .toList(),
                        ),
                      ),
                    ),
                  ),
      ),
    );
  }

  Future<void> _handleBack(BuildContext context) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Show exit confirmation dialog
      final bool? shouldExit = await showDialog<bool>(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return Dialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(24),
            ),
            elevation: 16,
            child: Container(
              width: 400, // Fixed width for the dialog
              padding: EdgeInsets.all(32),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(24),
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    Colors.white,
                    Colors.grey.shade50,
                  ],
                ),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Container(
                    padding: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.blue.shade50,
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      Icons.check_circle_outline,
                      size: 48,
                      color: Color(0xFF2193b0),
                    ),
                  ),
                  SizedBox(height: 24),
                  
                  Text(
                    'Exit Test',
                    style: GoogleFonts.poppins(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF2193b0),
                    ),
                  ),
                  SizedBox(height: 16),
                  
                  Container(
                    padding: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade50,
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: Colors.grey.shade200,
                      ),
                    ),
                    child: Column(
                      children: [
                        Row(
                          children: [
                            Icon(
                              Icons.info_outline,
                              color: Colors.grey[600],
                              size: 20,
                            ),
                            SizedBox(width: 12),
                            Expanded(
                              child: Text(
                                'Ready to finish?',
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                  color: Colors.grey[800],
                                ),
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 12),
                        Text(
                          'Your results have been saved successfully. You can now exit the test.',
                          style: GoogleFonts.poppins(
                            fontSize: 14,
                            color: Colors.grey[600],
                            height: 1.5,
                          ),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 32),
                  
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      TextButton(
                        onPressed: () => Navigator.pop(context, false),
                        style: TextButton.styleFrom(
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: Text(
                          'Cancel',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                            color: Colors.grey[600],
                          ),
                        ),
                      ),
                      SizedBox(width: 16),
                      
                      ElevatedButton(
                        onPressed: () => Navigator.pop(context, true),
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.zero,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: Ink(
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                              begin: Alignment.centerLeft,
                              end: Alignment.centerRight,
                            ),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Container(
                            padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Icon(Icons.exit_to_app, color: Colors.white),
                                SizedBox(width: 8),
                                Text(
                                  'Exit',
                                  style: GoogleFonts.poppins(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                    color: Colors.white,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          );
        },
      );

      if (shouldExit == true) {
        // Clear all preferences
        await Future.wait([
          prefs.remove('listening_test_completed'),
          prefs.remove('reading_test_completed'),
          prefs.remove('grammar_test_completed'),
          prefs.remove('listening_test_score'),
          prefs.remove('reading_test_score'),
          prefs.remove('grammar_test_score'),
          prefs.remove('listening_test_duration'),
          prefs.remove('reading_test_duration'),
          prefs.remove('grammar_test_duration'),
          prefs.remove('current_student_first_name'),
          prefs.remove('current_student_last_name'),
          prefs.remove('current_session_id'),
          prefs.remove('results_save_status'),
          prefs.remove('current_question_index'),
          prefs.remove('user_answers'),
        ]);
        
        await TestSessionService().clearAllSessions();
        await AuthService().signOut();

        if (!mounted) return;

        Navigator.of(context).pushAndRemoveUntil(
          MaterialPageRoute(builder: (context) => RegistrationPage()),
          (route) => false,
        );
      }
    } catch (e) {
      print('Error during back navigation: $e');
      if (!mounted) return;
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              Icon(Icons.error_outline, color: Colors.white),
              SizedBox(width: 8),
              Text(
                'Error returning to registration. Please try again.',
                style: GoogleFonts.poppins(),
              ),
            ],
          ),
          backgroundColor: Color(0xFFE53935),
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          action: SnackBarAction(
            label: 'Retry',
            textColor: Colors.white,
            onPressed: () => _handleBack(context),
          ),
        ),
      );
    }
  }

  String _getEvolveLevel(int score) {
    final levels = {
      69: 'EVOLVE Level 6B',
      62: 'EVOLVE Level 6A',
      56: 'EVOLVE Level 5B',
      50: 'EVOLVE Level 5A',
      43: 'EVOLVE Level 4B',
      37: 'EVOLVE Level 4A',
      31: 'EVOLVE Level 3B',
      24: 'EVOLVE Level 3A',
      18: 'EVOLVE Level 2B',
      12: 'EVOLVE Level 2A',
      6: 'EVOLVE Level 1B',
      1: 'EVOLVE Level 1A',
    };

    for (var threshold in levels.keys) {
      if (score >= threshold) return levels[threshold]!;
    }
    return 'Pre-EVOLVE Level';
  }

  Widget _buildLevelIndicator(String evolveLevel) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Color(0xFF2193b0).withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: Color(0xFF2193b0).withOpacity(0.2),
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            Icons.school_outlined,
            size: 20,
            color: Color(0xFF2193b0),
          ),
          SizedBox(width: 8),
          Text(
            evolveLevel,
            style: GoogleFonts.poppins(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Color(0xFF2193b0),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProgressIndicator(int percentage) {
    return Container(
      height: 4,
      width: 80,
      decoration: BoxDecoration(
        color: Colors.grey.shade200,
        borderRadius: BorderRadius.circular(2),
      ),
      child: FractionallySizedBox(
        alignment: Alignment.centerLeft,
        widthFactor: percentage / 100,
        child: Container(
          decoration: BoxDecoration(
            color: _getScoreColor(percentage),
            borderRadius: BorderRadius.circular(2),
          ),
        ),
      ),
    );
  }

  Widget _buildInfoCard(String title, String value, IconData icon) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade200),
      ),
      child: Row(
        children: [
          Icon(icon, color: Color(0xFF2193b0)),
          SizedBox(width: 12),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: GoogleFonts.poppins(
                  fontSize: 14,
                  color: Colors.grey[600],
                ),
              ),
              SizedBox(height: 4),
              Text(
                value,
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Color(0xFF2193b0),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildALCLevelTicket(int totalScore) {
    return Container(
      margin: EdgeInsets.only(bottom: 24),
      child: Stack(
        children: [
          // Main Ticket Body
          Container(
            padding: EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 10,
                  offset: Offset(0, 4),
                ),
              ],
            ),
            child: Row(
              children: [
                // Left side with level info
                Expanded(
                  flex: 3,
                  child: Row(
                    children: [
                      Container(
                        padding: EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Color(0xFF2193b0).withOpacity(0.1),
                          shape: BoxShape.circle,
                        ),
                        child: Icon(
                          Icons.school,
                          color: Color(0xFF2193b0),
                          size: 32,
                        ),
                      ),
                      SizedBox(width: 20),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            'Your Level',
                            style: GoogleFonts.poppins(
                              fontSize: 14,
                              color: Colors.grey[600],
                            ),
                          ),
                          SizedBox(height: 4),
                          Text(
                            'ALC Level: ${ScoreCalculator.calculateALCLevel(totalScore)}',
                            style: GoogleFonts.poppins(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                              color: Color(0xFF2193b0),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                
                // Dotted line separator
                Container(
                  height: 60,
                  child: CustomPaint(
                    painter: DottedLinePainter(),
                  ),
                ),
                
                // Right side with score
                Expanded(
                  flex: 2,
                  child: Container(
                    padding: EdgeInsets.symmetric(horizontal: 24),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          'Total Score',
                          style: GoogleFonts.poppins(
                            fontSize: 14,
                            color: Colors.grey[600],
                          ),
                        ),
                        SizedBox(height: 4),
                        Text(
                          '$totalScore/70',
                          style: GoogleFonts.poppins(
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                            color: _getScoreColor((totalScore * 100) ~/ 70),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
          
          // Circular cutouts for ticket effect
          ...List.generate(2, (index) {
            return Positioned(
              top: index == 0 ? -15 : null,
              bottom: index == 1 ? -15 : null,
              left: MediaQuery.of(context).size.width * 0.6 - 15,
              child: Container(
                width: 30,
                height: 30,
                decoration: BoxDecoration(
                  color: Color(0xFF2193b0),
                  shape: BoxShape.circle,
                ),
              ),
            );
          }),
        ],
      ),
    );
  }

  Widget _buildInfoChip(IconData icon, String text) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(30),
        border: Border.all(
          color: Colors.white.withOpacity(0.2),
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 18,
            color: Colors.white,
          ),
          SizedBox(width: 8),
          Text(
            text,
            style: GoogleFonts.poppins(
              fontSize: 14,
              color: Colors.white,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\services\auth_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class AuthService {
  final String _apiKey = 'AIzaSyAyNWHQXz89YL02R4RrSun80w1C2yLsTRY';
  final String projectId = 'testapp-a0f67';
  final String _baseUrl = 'https://identitytoolkit.googleapis.com/v1/accounts';

  Future<void> saveAuthToken(String token, String userId) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('auth_token', token);
    await prefs.setString('user_id', userId);
    await prefs.setString('last_login', DateTime.now().toIso8601String());
  }

  Future<bool> isLoggedIn() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('auth_token');
    if (token == null) return false;

    final lastLogin = prefs.getString('last_login');
    if (lastLogin != null) {
      final loginDate = DateTime.parse(lastLogin);
      final now = DateTime.now();
      if (now.difference(loginDate).inHours > 1) {
        await signOut();
        return false;
      }
    }

    return true;
  }

  Future<String?> getAuthToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('auth_token');
  }

  Future<String?> getUserId() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('user_id');
  }

  Future<Map<String, dynamic>> signInWithEmailAndPassword(String email, String password) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl:signInWithPassword?key=$_apiKey'),
        body: json.encode({
          'email': email,
          'password': password,
          'returnSecureToken': true,
        }),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        await saveAuthToken(data['idToken'], data['localId']);
        return data;
      } else {
        final errorResponse = json.decode(response.body);
        final errorMessage = _getReadableErrorMessage(errorResponse['error']['message']);
        throw Exception(errorMessage);
      }
    } catch (e) {
      print('Error in signInWithEmailAndPassword: $e');
      rethrow;
    }
  }

  String _getReadableErrorMessage(String firebaseError) {
    switch (firebaseError) {
      case 'INVALID_LOGIN_CREDENTIALS':
        return 'Invalid email or password. Please try again.';
      case 'EMAIL_NOT_FOUND':
        return 'No account found with this email.';
      case 'INVALID_PASSWORD':
        return 'Incorrect password.';
      case 'USER_DISABLED':
        return 'This account has been disabled.';
      default:
        return 'An error occurred during sign in. Please try again.';
    }
  }

  Future<void> signOut() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('auth_token');
    await prefs.remove('user_id');
    await prefs.remove('last_login');
    await prefs.remove('user_first_name');
    await prefs.remove('user_last_name');
  }

  Future<void> refreshToken() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('last_login', DateTime.now().toIso8601String());
  }

  Future<void> saveUserData(
    String firstName, 
    String lastName, 
    Map<String, dynamic> additionalData
  ) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_first_name', firstName);
    await prefs.setString('user_last_name', lastName);
    
    // Save additional data
    for (var entry in additionalData.entries) {
      if (entry.value is String) {
        await prefs.setString('user_${entry.key}', entry.value as String);
      } else if (entry.value is bool) {
        await prefs.setBool('user_${entry.key}', entry.value as bool);
      } else if (entry.value is int) {
        await prefs.setInt('user_${entry.key}', entry.value as int);
      }
    }
  }

  Future<Map<String, dynamic>> getUserData() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'firstName': prefs.getString('user_first_name'),
      'lastName': prefs.getString('user_last_name'),
      'birthDate': prefs.getString('user_birthDate'),
      'address': prefs.getString('user_address'),
      'phone': prefs.getString('user_phone'),
      'isParentPhone': prefs.getBool('user_isParentPhone'),
      'email': prefs.getString('user_email'),
      'cin': prefs.getString('user_cin'),
      'isExistingStudent': prefs.getBool('user_isExistingStudent'),
    };
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\services\firestore_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:alc_eljadida_tests/services/score_calculator.dart';

class FirestoreService {
  final String projectId = "testapp-a0f67";
  final String apiKey = "AIzaSyAyNWHQXz89YL02R4RrSun80w1C2yLsTRY";
  
  String get _baseUrl => 
    'https://firestore.googleapis.com/v1/projects/$projectId/databases/(default)/documents';

  Future<List<Map<String, dynamic>>> fetchTestResults(String firstName, String lastName) async {
    try {
      final queryUrl = Uri.parse('$_baseUrl:runQuery?key=$apiKey');
      final queryBody = {
        'structuredQuery': {
          'from': [{'collectionId': 'testResults'}],
          'where': {
            'compositeFilter': {
              'op': 'AND',
              'filters': [
                {
                  'fieldFilter': {
                    'field': {'fieldPath': 'firstName'},
                    'op': 'EQUAL',
                    'value': {'stringValue': firstName}
                  }
                },
                {
                  'fieldFilter': {
                    'field': {'fieldPath': 'lastName'},
                    'op': 'EQUAL',
                    'value': {'stringValue': lastName}
                  }
                }
              ]
            }
          },
          'orderBy': [
            {
              'field': {'fieldPath': 'timestamp'},
              'direction': 'DESCENDING'
            }
          ]
        }
      };

      final response = await http.post(
        queryUrl,
        headers: {'Content-Type': 'application/json'},
        body: json.encode(queryBody),
      );

      if (response.statusCode != 200) {
        print('Failed to fetch test results. Status code: ${response.statusCode}');
        print('Response body: ${response.body}');
        throw Exception('Failed to fetch test results');
      }

      final List<dynamic> queryResults = json.decode(response.body);
      final List<Map<String, dynamic>> results = [];

      for (var queryResult in queryResults) {
        if (queryResult.containsKey('document')) {
          final document = queryResult['document'];
          if (document.containsKey('fields')) {
            results.add(Map<String, dynamic>.from(document['fields']));
          }
        }
      }

      return results;
    } catch (e) {
      print('Error fetching test results: $e');
      rethrow;
    }
  }

  Future<List<Map<String, dynamic>>> fetchAllTestResults() async {
    try {
      final queryUrl = Uri.parse('$_baseUrl:runQuery?key=$apiKey');
      final queryBody = {
        'structuredQuery': {
          'from': [{'collectionId': 'testResults'}],
          'orderBy': [
            {
              'field': {'fieldPath': 'timestamp'},
              'direction': 'DESCENDING'
            }
          ]
        }
      };

      final response = await http.post(
        queryUrl,
        headers: {'Content-Type': 'application/json'},
        body: json.encode(queryBody),
      );

      if (response.statusCode != 200) {
        throw Exception('Failed to fetch all test results');
      }

      final List<dynamic> queryResults = json.decode(response.body);
      final List<Map<String, dynamic>> results = [];

      for (var queryResult in queryResults) {
        if (queryResult.containsKey('document')) {
          final document = queryResult['document'];
          if (document.containsKey('fields')) {
            results.add(Map<String, dynamic>.from(document['fields']));
          }
        }
      }

      return results;
    } catch (e) {
      print('Error fetching all test results: $e');
      rethrow;
    }
  }

  Future<void> saveBulkResults({
    required String firstName,
    required String lastName,
    required String? birthDate,
    required String? address,
    required String phone,
    required bool isParentPhone,
    required String email,
    required String? cin,
    required bool isExistingStudent,
    required int listeningRawScore,
    required Duration listeningDuration,
    required int readingRawScore,
    required Duration readingDuration,
    required int grammarRawScore,
    required Duration grammarDuration,
    required DateTime timestamp,
    required int listeningTotalQuestions,
    required int readingTotalQuestions,
    required int grammarTotalQuestions,
    required String schoolCode,
  }) async {
    try {
      final url = Uri.parse('$_baseUrl/testResults?key=$apiKey');

      // Calculate standardized scores
      final listeningScore = ScoreCalculator.calculateListeningScore(
        listeningRawScore, 
        listeningTotalQuestions
      );
      final readingScore = ScoreCalculator.calculateReadingScore(
        readingRawScore, 
        readingTotalQuestions
      );
      final grammarScore = ScoreCalculator.calculateGrammarScore(
        grammarRawScore, 
        grammarTotalQuestions
      );

      final totalScore = listeningScore + readingScore + grammarScore;

      final testResult = {
        'fields': {
          'firstName': {'stringValue': firstName},
          'lastName': {'stringValue': lastName},
          'birthDate': {'stringValue': birthDate ?? ''},
          'address': {'stringValue': address ?? ''},
          'phone': {'stringValue': phone},
          'isParentPhone': {'booleanValue': isParentPhone},
          'email': {'stringValue': email},
          'cin': {'stringValue': cin ?? ''},
          'isExistingStudent': {'booleanValue': isExistingStudent},
          'listeningScore': {'integerValue': listeningScore},
          'listeningMaxScore': {'integerValue': ScoreCalculator.MAX_LISTENING_SCORE},
          'listeningDuration': {'integerValue': listeningDuration.inSeconds},
          'readingScore': {'integerValue': readingScore},
          'readingMaxScore': {'integerValue': ScoreCalculator.MAX_READING_SCORE},
          'readingDuration': {'integerValue': readingDuration.inSeconds},
          'grammarScore': {'integerValue': grammarScore},
          'grammarMaxScore': {'integerValue': ScoreCalculator.MAX_GRAMMAR_SCORE},
          'grammarDuration': {'integerValue': grammarDuration.inSeconds},
          'searchName': {'stringValue': '$firstName $lastName'.toLowerCase()},
          'testType': {'stringValue': 'complete'},
          'timestamp': {'timestampValue': timestamp.toUtc().toIso8601String()},
          'totalScore': {'integerValue': totalScore},
          'maxTotalScore': {'integerValue': ScoreCalculator.MAX_TOTAL_SCORE},
          'evolveLevel': {'stringValue': _calculateEvolveLevel(totalScore)},
          'schoolCode': {'stringValue': schoolCode},
        }
      };

      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: json.encode(testResult),
      );

      if (response.statusCode != 200) {
        throw Exception('Failed to save test results');
      }
    } catch (e) {
      print('Error in saveBulkResults: $e');
      rethrow;
    }
  }

  String _calculateEvolveLevel(int totalScore) {
    return ScoreCalculator.calculateALCLevel(totalScore);
  }

  Future<Map<String, dynamic>> fetchDashboardStats() async {
  try {
    final allResults = await fetchAllTestResults();
    
    Set<String> uniqueStudents = {};
    double totalPercentage = 0;
    int totalTests = 0;
    Map<String, int> testTypeCounts = {
      'Listening': 0,
      'Reading': 0,
      'Grammar': 0
    };

    for (var result in allResults) {
      String studentName = '${result['firstName']['stringValue']} ${result['lastName']['stringValue']}';
      uniqueStudents.add(studentName);

      if (result.containsKey('listeningScore')) {
        testTypeCounts['Listening'] = testTypeCounts['Listening']! + 1;
        int score = int.parse(result['listeningScore']['integerValue']);
        totalPercentage += (score / ScoreCalculator.MAX_LISTENING_SCORE) * 100;
        totalTests++;
      }
      if (result.containsKey('readingScore')) {
        testTypeCounts['Reading'] = testTypeCounts['Reading']! + 1;
        int score = int.parse(result['readingScore']['integerValue']);
        totalPercentage += (score / ScoreCalculator.MAX_READING_SCORE) * 100;
        totalTests++;
      }
      if (result.containsKey('grammarScore')) {
        testTypeCounts['Grammar'] = testTypeCounts['Grammar']! + 1;
        int score = int.parse(result['grammarScore']['integerValue']);
        totalPercentage += (score / ScoreCalculator.MAX_GRAMMAR_SCORE) * 100;
        totalTests++;
      }
    }

    double averagePercentage = totalTests > 0 ? totalPercentage / totalTests : 0;

    return {
      'totalStudents': uniqueStudents.length,
      'totalTests': totalTests,
      'averageScore': averagePercentage,
      'testTypeCounts': testTypeCounts,
      'recentTests': allResults.take(10).toList(),
    };
  } catch (e) {
    print('Error fetching dashboard stats: $e');
    rethrow;
  }
}

  Future<List<Map<String, dynamic>>> searchStudentResults(String query) async {
    try {
      final queryUrl = Uri.parse('$_baseUrl:runQuery?key=$apiKey');
      final queryBody = {
        'structuredQuery': {
          'from': [{'collectionId': 'testResults'}],
          'where': {
            'fieldFilter': {
              'field': {'fieldPath': 'searchName'},
              'op': 'GREATER_THAN_OR_EQUAL',
              'value': {'stringValue': query.toLowerCase()}
            }
          },
          'orderBy': [
            {
              'field': {'fieldPath': 'searchName'},
              'direction': 'ASCENDING'
            }
          ],
          'limit': 20
        }
      };

      final response = await http.post(
        queryUrl,
        headers: {'Content-Type': 'application/json'},
        body: json.encode(queryBody),
      );

      if (response.statusCode != 200) {
        print('Search failed with status: ${response.statusCode}');
        print('Response body: ${response.body}');
        throw Exception('Failed to search student results');
      }

      final List<dynamic> queryResults = json.decode(response.body);
      final List<Map<String, dynamic>> results = [];

      for (var queryResult in queryResults) {
        if (queryResult.containsKey('document')) {
          final document = queryResult['document'];
          if (document.containsKey('fields')) {
            final fields = document['fields'];
            final searchName = fields['searchName']['stringValue'].toLowerCase();
            // Only include results that start with the search query
            if (searchName.startsWith(query.toLowerCase())) {
              results.add(Map<String, dynamic>.from(fields));
            }
          }
        }
      }

      return results;
    } catch (e) {
      print('Error searching student results: $e');
      if (e is http.ClientException) {
        print('Network error: ${e.message}');
      }
      rethrow;
    }
  }

  Future<List<Map<String, dynamic>>> searchBySchoolCode(String code) async {
    try {
      final queryUrl = Uri.parse('$_baseUrl:runQuery?key=$apiKey');
      final queryBody = {
        'structuredQuery': {
          'from': [{'collectionId': 'testResults'}],
          'where': {
            'fieldFilter': {
              'field': {'fieldPath': 'schoolCode'},
              'op': 'EQUAL',
              'value': {'stringValue': code}
            }
          }
        }
      };

      final response = await http.post(
        queryUrl,
        headers: {'Content-Type': 'application/json'},
        body: json.encode(queryBody),
      );

      if (response.statusCode != 200) {
        print('Search failed with status: ${response.statusCode}');
        print('Response body: ${response.body}');
        throw Exception('Failed to search by school code');
      }

      final List<dynamic> queryResults = json.decode(response.body);
      final List<Map<String, dynamic>> results = [];

      for (var queryResult in queryResults) {
        if (queryResult.containsKey('document')) {
          final document = queryResult['document'];
          if (document.containsKey('fields')) {
            final fields = document['fields'];
            // Only add results that have all required fields
            if (_hasRequiredFields(fields)) {
              results.add(Map<String, dynamic>.from(fields));
            }
          }
        }
      }

      // Sort results by timestamp in descending order (newest first)
      results.sort((a, b) {
        try {
          final aTime = DateTime.parse(a['timestamp']['timestampValue']);
          final bTime = DateTime.parse(b['timestamp']['timestampValue']);
          return bTime.compareTo(aTime);
        } catch (e) {
          print('Error sorting results: $e');
          return 0;
        }
      });

      return results;
    } catch (e) {
      print('Error searching by school code: $e');
      if (e is http.ClientException) {
        print('Network error: ${e.message}');
      }
      rethrow;
    }
  }

  // Helper method to validate required fields
  bool _hasRequiredFields(Map<String, dynamic> fields) {
    final requiredFields = [
      'firstName',
      'lastName',
      'email',
      'phone',
      'timestamp',
      'listeningScore',
      'readingScore',
      'grammarScore'
    ];

    return requiredFields.every((field) => 
      fields.containsKey(field) && 
      fields[field] != null &&
      fields[field].containsKey('stringValue') || 
      fields[field].containsKey('integerValue') ||
      fields[field].containsKey('timestampValue')
    );
  }

  bool isValidSchoolCode(String code) {
    return code.length >= 4 && RegExp(r'^[A-Za-z0-9]+$').hasMatch(code);
  }

  Future<List<Map<String, dynamic>>> fetchTestAnswers(String timestamp) async {
    try {
      final queryUrl = Uri.parse('$_baseUrl:runQuery?key=$apiKey');
      final queryBody = {
        'structuredQuery': {
          'from': [{'collectionId': 'testAnswers'}],
          'where': {
            'fieldFilter': {
              'field': {'fieldPath': 'timestamp'},
              'op': 'EQUAL',
              'value': {'timestampValue': timestamp}
            }
          },
          'orderBy': [
            {
              'field': {'fieldPath': 'section'},
              'direction': 'ASCENDING'
            },
            {
              'field': {'fieldPath': 'questionNumber'},
              'direction': 'ASCENDING'
            }
          ]
        }
      };

      final response = await http.post(
        queryUrl,
        headers: {'Content-Type': 'application/json'},
        body: json.encode(queryBody),
      );

      if (response.statusCode != 200) {
        throw Exception('Failed to fetch test answers');
      }

      final List<dynamic> queryResults = json.decode(response.body);
      final List<Map<String, dynamic>> answers = [];

      for (var queryResult in queryResults) {
        if (queryResult.containsKey('document')) {
          final document = queryResult['document'];
          if (document.containsKey('fields')) {
            final fields = document['fields'];
            answers.add({
              'section': fields['section']?['stringValue'] ?? 'unknown',
              'questionNumber': int.tryParse(fields['questionNumber']?['integerValue']?.toString() ?? '0') ?? 0,
              'question': fields['question']?['stringValue'] ?? '',
              'userAnswer': fields['userAnswer']?['stringValue'] ?? '',
              'correctAnswer': fields['correctAnswer']?['stringValue'] ?? '',
              'isCorrect': fields['isCorrect']?['booleanValue'] ?? false,
              'explanation': fields['explanation']?['stringValue'] ?? '',
            });
          }
        }
      }

      return answers;
    } catch (e) {
      print('Error fetching test answers: $e');
      rethrow;
    }
  }

  Future<void> saveTestAnswers({
    required String firstName,
    required String lastName,
    required String testType,
    required List<Map<String, dynamic>> answers,
    required DateTime timestamp,
  }) async {
    try {
      final url = Uri.parse('$_baseUrl/testAnswers?key=$apiKey');

      // Create a batch of answers to save
      for (int i = 0; i < answers.length; i++) {
        final answer = answers[i];
        final answerData = {
          'fields': {
            'firstName': {'stringValue': firstName},
            'lastName': {'stringValue': lastName},
            'timestamp': {'timestampValue': timestamp.toUtc().toIso8601String()},
            'section': {'stringValue': testType.toLowerCase()},
            'questionNumber': {'integerValue': i + 1},
            'question': {'stringValue': answer['question'] ?? ''},
            'userAnswer': {'stringValue': answer['userAnswer'] ?? ''},
            'correctAnswer': {'stringValue': answer['correctAnswer'] ?? ''},
            'isCorrect': {'booleanValue': answer['isCorrect'] ?? false},
            'explanation': {'stringValue': answer['explanation'] ?? ''},
          }
        };

        final response = await http.post(
          url,
          headers: {'Content-Type': 'application/json'},
          body: json.encode(answerData),
        );

        if (response.statusCode != 200) {
          print('Failed to save answer ${i + 1}. Status: ${response.statusCode}');
          throw Exception('Failed to save test answers');
        }
      }
    } catch (e) {
      print('Error saving test answers: $e');
      rethrow;
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\services\pdf_report_service.dart
import 'dart:typed_data';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:intl/intl.dart';
import 'package:alc_eljadida_tests/services/score_calculator.dart';

class PDFReportService {
  static final accentColor = PdfColors.blue700;
  static final backgroundColor = PdfColors.grey100;
  static final cardColor = PdfColors.white;
  static final correctColor = PdfColors.green700;
  static final incorrectColor = PdfColors.red700;

  static Future<Uint8List> generateTestReport({
    required String firstName,
    required String lastName,
    required Map<String, dynamic> testData,
    required List<Map<String, dynamic>> answers,
  }) async {
    try {
      // Extract scores from Firestore data structure
      final listeningScore = int.tryParse(testData['listeningScore']?['integerValue']?.toString() ?? '0') ?? 0;
      final readingScore = int.tryParse(testData['readingScore']?['integerValue']?.toString() ?? '0') ?? 0;
      final grammarScore = int.tryParse(testData['grammarScore']?['integerValue']?.toString() ?? '0') ?? 0;
      final totalScore = listeningScore + readingScore + grammarScore;

      // Parse timestamp
      DateTime testDate = DateTime.now();
      try {
        testDate = DateTime.parse(testData['timestamp']?['timestampValue']?.toString() ?? '');
      } catch (e) {
        print('Error parsing timestamp: $e');
      }

      // Group answers by test type
      final groupedAnswers = _groupAnswersByType(answers);

      // Create PDF document
      final pdf = pw.Document(
        theme: pw.ThemeData.withFont(
          base: pw.Font.helvetica(),
          bold: pw.Font.helveticaBold(),
          italic: pw.Font.helveticaOblique(),
        ),
      );

      // Add cover page
      pdf.addPage(
        pw.Page(
          build: (context) => _buildCoverPage(
            firstName: firstName,
            lastName: lastName,
            testDate: testDate,
            totalScore: totalScore,
          ),
        ),
      );

      // Add test summary page
      pdf.addPage(
        pw.Page(
          build: (context) => _buildScoreSummaryPage(
            listeningScore: listeningScore,
            readingScore: readingScore,
            grammarScore: grammarScore,
            totalScore: totalScore,
          ),
        ),
      );

      // Add detailed answers pages
      for (var testType in ['Listening', 'Reading', 'Grammar']) {
        if (groupedAnswers[testType]?.isNotEmpty ?? false) {
          pdf.addPage(
            pw.MultiPage(
              pageFormat: PdfPageFormat.a4,
              build: (context) => [
                _buildTestTypeHeader(testType),
                ...groupedAnswers[testType]!.map((answer) => 
                  _buildDetailedAnswerSection(answer, testType)
                ).toList(),
              ],
            ),
          );
        }
      }

      return pdf.save();
    } catch (e, stack) {
      print('Error generating PDF report: $e');
      print('Stack trace: $stack');
      throw Exception('Failed to generate PDF report: $e');
    }
  }

  static pw.Widget _buildCoverPage({
    required String firstName,
    required String lastName,
    required DateTime testDate,
    required int totalScore,
  }) {
    final alcLevel = ScoreCalculator.calculateALCLevel(totalScore);
    
    return pw.Center(
      child: pw.Column(
        mainAxisAlignment: pw.MainAxisAlignment.center,
        children: [
          pw.Container(
            padding: pw.EdgeInsets.all(40),
            decoration: pw.BoxDecoration(
              border: pw.Border.all(color: accentColor, width: 2),
              borderRadius: pw.BorderRadius.circular(20),
            ),
            child: pw.Column(
              children: [
                pw.Text(
                  'TEST RESULTS REPORT',
                  style: pw.TextStyle(
                    fontSize: 28,
                    fontWeight: pw.FontWeight.bold,
                    color: accentColor,
                  ),
                ),
                pw.SizedBox(height: 40),
                pw.Text(
                  '$firstName $lastName',
                  style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold),
                ),
                pw.SizedBox(height: 20),
                pw.Text(
                  'ALC Level: $alcLevel',
                  style: pw.TextStyle(
                    fontSize: 20,
                    color: accentColor,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.SizedBox(height: 20),
                pw.Text(
                  DateFormat('MMMM dd, yyyy').format(testDate),
                  style: pw.TextStyle(fontSize: 16),
                ),
                pw.SizedBox(height: 40),
                pw.Container(
                  padding: pw.EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                  decoration: pw.BoxDecoration(
                    color: accentColor,
                    borderRadius: pw.BorderRadius.circular(10),
                  ),
                  child: pw.Text(
                    'Total Score: $totalScore/70',
                    style: pw.TextStyle(
                      fontSize: 20,
                      color: PdfColors.white,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  static pw.Widget _buildScoreSummaryPage({
    required int listeningScore,
    required int readingScore,
    required int grammarScore,
    required int totalScore,
  }) {
    return pw.Padding(
      padding: pw.EdgeInsets.all(40),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Score Summary',
            style: pw.TextStyle(
              fontSize: 24,
              fontWeight: pw.FontWeight.bold,
              color: accentColor,
            ),
          ),
          pw.SizedBox(height: 30),
          _buildScoreBreakdown(
            'Listening Test',
            listeningScore,
            20,
            'Assessment of listening comprehension skills',
          ),
          pw.SizedBox(height: 20),
          _buildScoreBreakdown(
            'Reading Test',
            readingScore,
            20,
            'Evaluation of reading comprehension abilities',
          ),
          pw.SizedBox(height: 20),
          _buildScoreBreakdown(
            'Grammar Test',
            grammarScore,
            30,
            'Assessment of grammar and language structure knowledge',
          ),
          pw.SizedBox(height: 40),
          pw.Divider(color: PdfColors.grey300),
          pw.SizedBox(height: 20),
          _buildTotalScoreSection(totalScore),
        ],
      ),
    );
  }

  static pw.Widget _buildScoreBreakdown(
    String title,
    int score,
    int maxScore,
    String description,
  ) {
    final percentage = (score / maxScore * 100).round();
    
    return pw.Container(
      padding: pw.EdgeInsets.all(20),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: pw.BorderRadius.circular(10),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text(
                title,
                style: pw.TextStyle(
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
              pw.Text(
                '$score/$maxScore',
                style: pw.TextStyle(
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                  color: accentColor,
                ),
              ),
            ],
          ),
          pw.SizedBox(height: 10),
          pw.Text(
            description,
            style: pw.TextStyle(
              fontSize: 12,
              color: PdfColors.grey700,
            ),
          ),
          pw.SizedBox(height: 10),
          pw.Container(
            height: 10,
            child: pw.ClipRRect(
              verticalRadius: 5,
              horizontalRadius: 5,
              child: pw.Stack(
                children: [
                  pw.Container(
                    color: PdfColors.grey300,
                  ),
                  pw.Container(
                    width: score / maxScore * 500,
                    color: accentColor,
                  ),
                ],
              ),
            ),
          ),
          pw.SizedBox(height: 5),
          pw.Text(
            '$percentage%',
            style: pw.TextStyle(
              fontSize: 12,
              color: PdfColors.grey700,
            ),
          ),
        ],
      ),
    );
  }

  static pw.Widget _buildTotalScoreSection(int totalScore) {
    final alcLevel = ScoreCalculator.calculateALCLevel(totalScore);
    final percentage = (totalScore / 70 * 100).round();
    
    return pw.Container(
      padding: pw.EdgeInsets.all(20),
      decoration: pw.BoxDecoration(
        color: backgroundColor,
        borderRadius: pw.BorderRadius.circular(10),
      ),
      child: pw.Column(
        children: [
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'Total Score',
                    style: pw.TextStyle(
                      fontSize: 20,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                  pw.SizedBox(height: 5),
                  pw.Text(
                    '$totalScore/70 ($percentage%)',
                    style: pw.TextStyle(
                      fontSize: 16,
                      color: accentColor,
                    ),
                  ),
                ],
              ),
              pw.Container(
                padding: pw.EdgeInsets.symmetric(
                  horizontal: 20,
                  vertical: 10,
                ),
                decoration: pw.BoxDecoration(
                  color: accentColor,
                  borderRadius: pw.BorderRadius.circular(20),
                ),
                child: pw.Text(
                  'ALC Level: $alcLevel',
                  style: pw.TextStyle(
                    color: PdfColors.white,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  static pw.Widget _buildTestTypeHeader(String testType) {
    return pw.Container(
      padding: pw.EdgeInsets.symmetric(vertical: 20),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            '$testType Test - Detailed Answers',
            style: pw.TextStyle(
              fontSize: 20,
              fontWeight: pw.FontWeight.bold,
              color: accentColor,
            ),
          ),
          pw.SizedBox(height: 10),
          pw.Divider(color: PdfColors.grey300),
        ],
      ),
    );
  }

  static pw.Widget _buildDetailedAnswerSection(
    Map<String, dynamic> answer,
    String testType,
  ) {
    final isCorrect = answer['isCorrect'] as bool;
    final backgroundColor = isCorrect ? PdfColors.green50 : PdfColors.red50;
    
    return pw.Container(
      margin: pw.EdgeInsets.only(bottom: 20),
      padding: pw.EdgeInsets.all(15),
      decoration: pw.BoxDecoration(
        color: backgroundColor,
        border: pw.Border.all(
          color: isCorrect ? PdfColors.green200 : PdfColors.red200,
        ),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text(
                'Question ${answer['questionNumber']}',
                style: pw.TextStyle(
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
              pw.Container(
                padding: pw.EdgeInsets.symmetric(
                  horizontal: 10,
                  vertical: 5,
                ),
                decoration: pw.BoxDecoration(
                  color: isCorrect ? correctColor : incorrectColor,
                  borderRadius: pw.BorderRadius.circular(12),
                ),
                child: pw.Text(
                  isCorrect ? 'Correct' : 'Incorrect',
                  style: pw.TextStyle(
                    color: PdfColors.white,
                    fontSize: 10,
                  ),
                ),
              ),
            ],
          ),
          pw.SizedBox(height: 10),
          pw.Text(
            answer['question'],
            style: pw.TextStyle(fontSize: 12),
          ),
          pw.SizedBox(height: 10),
          pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text(
                'Your answer:',
                style: pw.TextStyle(
                  fontSize: 10,
                  color: PdfColors.grey700,
                ),
              ),
              pw.Text(
                answer['userAnswer'],
                style: pw.TextStyle(
                  fontSize: 12,
                  color: isCorrect ? correctColor : incorrectColor,
                ),
              ),
            ],
          ),
          if (!isCorrect) ...[
            pw.SizedBox(height: 10),
            pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text(
                  'Correct answer:',
                  style: pw.TextStyle(
                    fontSize: 10,
                    color: PdfColors.grey700,
                  ),
                ),
                pw.Text(
                  answer['correctAnswer'],
                  style: pw.TextStyle(
                    fontSize: 12,
                    color: correctColor,
                  ),
                ),
              ],
            ),
          ],
        ],
      ),
    );
  }

  static Map<String, List<Map<String, dynamic>>> _groupAnswersByType(
    List<Map<String, dynamic>> answers
  ) {
    return {
      'Listening': answers.where((a) => a['section'] == 'listening').toList(),
      'Reading': answers.where((a) => a['section'] == 'reading').toList(),
      'Grammar': answers.where((a) => a['section'] == 'grammar').toList(),
    };
  }

  static pw.Widget _buildAnswerOptionsSection(List<String> options) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          'Answer Options:',
          style: pw.TextStyle(
            fontSize: 10,
            color: PdfColors.grey700,
            fontWeight: pw.FontWeight.bold,
          ),
        ),
        pw.SizedBox(height: 5),
        ...options.map((option) => pw.Padding(
          padding: pw.EdgeInsets.only(bottom: 2),
          child: pw.Text(
            option,
            style: pw.TextStyle(fontSize: 10),
          ),
        )).toList(),
      ],
    );
  }

  static String _getScoreCategory(int score, int maxScore) {
    final percentage = (score / maxScore) * 100;
    if (percentage >= 90) return 'Excellent';
    if (percentage >= 80) return 'Very Good';
    if (percentage >= 70) return 'Good';
    if (percentage >= 60) return 'Fair';
    if (percentage >= 50) return 'Needs Improvement';
    return 'Requires Attention';
  }

  static String _getRecommendation(String testType, int score, int maxScore) {
    final percentage = (score / maxScore) * 100;
    
    if (percentage >= 80) {
      return 'Keep up the excellent work! Consider moving to more advanced $testType exercises.';
    } else if (percentage >= 60) {
      return 'Good progress. Focus on challenging $testType tasks to further improve your skills.';
    } else {
      switch (testType.toLowerCase()) {
        case 'listening':
          return 'Regular practice with varied listening materials and native speakers is recommended.';
        case 'reading':
          return 'Try reading diverse materials and focus on comprehension strategies.';
        case 'grammar':
          return 'Review fundamental grammar rules and practice with structured exercises.';
        default:
          return 'Additional practice and structured learning is recommended.';
      }
    }
  }

  static pw.Widget _buildPerformanceAnalysis(
    String testType,
    int score,
    int maxScore,
    List<Map<String, dynamic>> answers,
  ) {
    final correctAnswers = answers.where((a) => a['isCorrect'] == true).length;
    final incorrectAnswers = answers.length - correctAnswers;
    final percentage = (score / maxScore) * 100;

    return pw.Container(
      margin: pw.EdgeInsets.symmetric(vertical: 20),
      padding: pw.EdgeInsets.all(15),
      decoration: pw.BoxDecoration(
        color: backgroundColor,
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Performance Analysis',
            style: pw.TextStyle(
              fontSize: 14,
              fontWeight: pw.FontWeight.bold,
              color: accentColor,
            ),
          ),
          pw.SizedBox(height: 10),
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceAround,
            children: [
              _buildStatisticBox(
                'Correct Answers',
                correctAnswers.toString(),
                correctColor,
              ),
              _buildStatisticBox(
                'Incorrect Answers',
                incorrectAnswers.toString(),
                incorrectColor,
              ),
              _buildStatisticBox(
                'Success Rate',
                '${percentage.round()}%',
                accentColor,
              ),
            ],
          ),
          pw.SizedBox(height: 15),
          pw.Text(
            'Category: ${_getScoreCategory(score, maxScore)}',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.SizedBox(height: 10),
          pw.Text(
            'Recommendation:',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.SizedBox(height: 5),
          pw.Text(
            _getRecommendation(testType, score, maxScore),
            style: pw.TextStyle(fontSize: 10),
          ),
        ],
      ),
    );
  }

  static pw.Widget _buildStatisticBox(
    String label,
    String value,
    PdfColor color,
  ) {
    return pw.Container(
      padding: pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: color),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        children: [
          pw.Text(
            value,
            style: pw.TextStyle(
              fontSize: 16,
              fontWeight: pw.FontWeight.bold,
              color: color,
            ),
          ),
          pw.SizedBox(height: 5),
          pw.Text(
            label,
            style: pw.TextStyle(
              fontSize: 10,
              color: PdfColors.grey700,
            ),
          ),
        ],
      ),
    );
  }

  static String _formatTimestamp(String timestampValue) {
    try {
      final dateTime = DateTime.parse(timestampValue);
      return DateFormat('MMM dd, yyyy HH:mm').format(dateTime);
    } catch (e) {
      return 'N/A';
    }
  }

  static pw.Widget _buildFooter(String studentName, int pageNumber) {
    return pw.Container(
      padding: pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        border: pw.Border(
          top: pw.BorderSide(color: PdfColors.grey300),
        ),
      ),
      child: pw.Row(
        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
        children: [
          pw.Text(
            studentName,
            style: pw.TextStyle(
              fontSize: 10,
              color: PdfColors.grey700,
            ),
          ),
          pw.Text(
            'Page $pageNumber',
            style: pw.TextStyle(
              fontSize: 10,
              color: PdfColors.grey700,
            ),
          ),
        ],
      ),
    );
  }

  static pw.Widget _buildWatermark() {
    return pw.Center(
      child: pw.Transform.rotate(
        angle: -0.5,
        child: pw.Text(
          'ALC El Jadida',
          style: pw.TextStyle(
            color: PdfColors.grey300,
            fontSize: 60,
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\services\score_calculator.dart
import 'package:shared_preferences/shared_preferences.dart';

class ScoreCalculator {
  static const int MAX_GRAMMAR_SCORE = 30;
  static const int MAX_LISTENING_SCORE = 20;
  static const int MAX_READING_SCORE = 20;
  static const int MAX_TOTAL_SCORE = 70;

  static int calculateStandardizedScore(int correctAnswers, int totalQuestions, int maxScore) {
    if (totalQuestions == 0) return 0;
    
    // For listening test, use direct scoring (1 point per correct answer)
    if (maxScore == MAX_LISTENING_SCORE) {
      return correctAnswers.clamp(0, MAX_LISTENING_SCORE);
    }
    
    // For other tests, calculate proportional score
    double scorePerQuestion = maxScore / totalQuestions;
    double rawScore = correctAnswers * scorePerQuestion;
    return rawScore.round().clamp(0, maxScore);
  }

  static int calculateGrammarScore(int correctAnswers, int totalQuestions) {
    return calculateStandardizedScore(correctAnswers, totalQuestions, MAX_GRAMMAR_SCORE);
  }

  static int calculateListeningScore(int correctAnswers, int totalQuestions) {
    print('\n=== Score Calculator ===');
    print('Correct Answers: $correctAnswers');
    print('Total Questions: $totalQuestions');
    print('Max Listening Score: $MAX_LISTENING_SCORE');
    
    // Ensure score doesn't exceed maximum
    final clampedScore = correctAnswers.clamp(0, MAX_LISTENING_SCORE);
    print('Final Score: $clampedScore');
    
    return clampedScore;
  }

  static int calculateReadingScore(int correctAnswers, int totalQuestions) {
    return calculateStandardizedScore(correctAnswers, totalQuestions, MAX_READING_SCORE);
  }

  static int calculateTotalScore({
    required int listeningScore,
    required int readingScore,
    required int grammarScore,
  }) {
    // Ensure individual scores don't exceed their maximums
    final clampedListening = listeningScore.clamp(0, MAX_LISTENING_SCORE);
    final clampedReading = readingScore.clamp(0, MAX_READING_SCORE);
    final clampedGrammar = grammarScore.clamp(0, MAX_GRAMMAR_SCORE);
    
    return clampedListening + clampedReading + clampedGrammar;
  }

  static double calculatePercentage(int score, int maxScore) {
    if (maxScore == 0) return 0.0;
    return (score / maxScore) * 100;
  }

  static String getGrade(double percentage) {
    if (percentage >= 90) return 'A+';
    if (percentage >= 80) return 'A';
    if (percentage >= 70) return 'B';
    if (percentage >= 60) return 'C';
    if (percentage >= 50) return 'D';
    return 'F';
  }

  static String getGradeFromScore(int score, int maxScore) {
    return getGrade(calculatePercentage(score, maxScore));
  }

  static Future<void> saveStandardizedScores({
    required int listeningRawScore,
    required int listeningTotalQuestions,
    required int readingRawScore,
    required int readingTotalQuestions,
    required int grammarRawScore,
    required int grammarTotalQuestions,
  }) async {
    final prefs = await SharedPreferences.getInstance();
    
    final standardizedListeningScore = calculateListeningScore(
      listeningRawScore, 
      listeningTotalQuestions
    );
    final standardizedReadingScore = calculateReadingScore(
      readingRawScore, 
      readingTotalQuestions
    );
    final standardizedGrammarScore = calculateGrammarScore(
      grammarRawScore, 
      grammarTotalQuestions
    );

    final totalScore = calculateTotalScore(
      listeningScore: standardizedListeningScore,
      readingScore: standardizedReadingScore,
      grammarScore: standardizedGrammarScore,
    );

    await Future.wait([
      prefs.setInt('listening_test_score', standardizedListeningScore),
      prefs.setInt('reading_test_score', standardizedReadingScore),
      prefs.setInt('grammar_test_score', standardizedGrammarScore),
      prefs.setInt('total_test_score', totalScore),
      prefs.setInt('listening_max_score', MAX_LISTENING_SCORE),
      prefs.setInt('reading_max_score', MAX_READING_SCORE),
      prefs.setInt('grammar_max_score', MAX_GRAMMAR_SCORE),
      prefs.setInt('total_max_score', MAX_TOTAL_SCORE),
      prefs.setInt('listening_total_questions', listeningTotalQuestions),
      prefs.setInt('reading_total_questions', readingTotalQuestions),
      prefs.setInt('grammar_total_questions', grammarTotalQuestions),
    ]);
  }

  static Future<Map<String, int>> getStoredScores() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'listeningScore': prefs.getInt('listening_test_score') ?? 0,
      'readingScore': prefs.getInt('reading_test_score') ?? 0,
      'grammarScore': prefs.getInt('grammar_test_score') ?? 0,
      'totalScore': prefs.getInt('total_test_score') ?? 0,
      'listeningMaxScore': prefs.getInt('listening_max_score') ?? MAX_LISTENING_SCORE,
      'readingMaxScore': prefs.getInt('reading_max_score') ?? MAX_READING_SCORE,
      'grammarMaxScore': prefs.getInt('grammar_max_score') ?? MAX_GRAMMAR_SCORE,
      'totalMaxScore': prefs.getInt('total_max_score') ?? MAX_TOTAL_SCORE,
      'listeningTotalQuestions': prefs.getInt('listening_total_questions') ?? 0,
      'readingTotalQuestions': prefs.getInt('reading_total_questions') ?? 0,
      'grammarTotalQuestions': prefs.getInt('grammar_total_questions') ?? 0,
    };
  }

  static Future<void> clearStoredScores() async {
    final prefs = await SharedPreferences.getInstance();
    await Future.wait([
      prefs.remove('listening_test_score'),
      prefs.remove('reading_test_score'),
      prefs.remove('grammar_test_score'),
      prefs.remove('total_test_score'),
      prefs.remove('listening_max_score'),
      prefs.remove('reading_max_score'),
      prefs.remove('grammar_max_score'),
      prefs.remove('total_max_score'),
      prefs.remove('listening_total_questions'),
      prefs.remove('reading_total_questions'),
      prefs.remove('grammar_total_questions'),
    ]);
  }

  static String calculateALCLevel(int totalScore) {
    if (totalScore >= 62) return 'Adv 4';
    if (totalScore >= 58) return 'Adv 3';
    if (totalScore >= 54) return 'Adv 2';
    if (totalScore >= 50) return 'Adv 1';
    if (totalScore >= 46) return 'Int 6';
    if (totalScore >= 42) return 'Int 5';
    if (totalScore >= 37) return 'Int 4';
    if (totalScore >= 33) return 'Int 3';
    if (totalScore >= 29) return 'Int 2';
    if (totalScore >= 24) return 'Int 1';
    if (totalScore >= 20) return 'Beg 6';
    if (totalScore >= 16) return 'Beg 5';
    if (totalScore >= 12) return 'Beg 4';
    if (totalScore >= 9) return 'Beg 3';
    if (totalScore >= 5) return 'Beg 2';
    if (totalScore >= 1) return 'Beg 1';
    return 'Beg 1';
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\services\test_results_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/test_result.dart';

class TestResultsService {
  final String projectId;
  
  TestResultsService(this.projectId);

  Future<List<TestResult>> getTestResultsByName(String firstName, String lastName, String testType) async {
    try {
      final url = Uri.parse(
        'https://testapp-a0f67-default-rtdb.firebaseio.com/test_results.json'
      );
      
      final response = await http.get(url);
      
      if (response.statusCode != 200) {
        throw Exception('Failed to fetch results: ${response.statusCode}');
      }

      final data = json.decode(response.body);
      if (data == null) {
        return [];
      }

      final results = <TestResult>[];
      
      if (data is Map) {
        data.forEach((userId, userResults) {
          if (userResults is Map) {
            userResults.forEach((resultId, value) {
              if (value is Map &&
                  value['testType'] == testType &&
                  value['firstName'] == firstName &&
                  value['lastName'] == lastName) {
                try {
                  results.add(TestResult(
                    userId: userId,
                    firstName: value['firstName'],
                    lastName: value['lastName'],
                    testType: value['testType'],
                    score: int.parse(value['score'].toString()),
                    totalQuestions: int.parse(value['totalQuestions'].toString()),
                    timestamp: DateTime.parse(value['timestamp']),
                  ));
                } catch (e) {
                  print('Error parsing result: $e');
                }
              }
            });
          }
        });
      }

      results.sort((a, b) => b.timestamp.compareTo(a.timestamp));
      return results;
    } catch (e) {
      print('Error fetching test results: $e');
      rethrow;
    }
  }

  Future<void> saveTestResult(TestResult result) async {
    try {
      final url = Uri.parse('https://$projectId-default-rtdb.firebaseio.com/test_results/${result.userId}.json');
      final response = await http.patch(url, body: json.encode(result.toJson()));
      
      if (response.statusCode != 200) {
        throw Exception('Failed to save test result');
      }
    } catch (e) {
      print('Error saving test result: $e');
      rethrow;
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\services\test_session_service.dart
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:async';

class TestStatus {
  final bool isListeningActive;
  final bool isReadingActive;
  final bool isGrammarActive;

  TestStatus({
    required this.isListeningActive,
    required this.isReadingActive,
    required this.isGrammarActive,
  });
}

class TestSessionService {
  static const String _listeningStartTimeKey = 'listening_start_time';
  static const String _listeningActiveKey = 'listening_test_active';
  static const String _listeningEndTimeKey = 'listening_end_time';
  static const String _readingActiveKey = 'reading_test_active';
  static const String _readingEndTimeKey = 'reading_end_time';
  static const String _grammarActiveKey = 'grammar_test_active';
  static const String _grammarEndTimeKey = 'grammar_end_time';
  static const String _listeningCompletedKey = 'listening_test_completed';
  static const String _readingCompletedKey = 'reading_test_completed';
  static const String _grammarCompletedKey = 'grammar_test_completed';
  
  static const int testDurationMinutes = 15;  // Listening test duration
  static const int readingTestDurationMinutes = 20;  // Reading test duration
  static const int grammarTestDurationMinutes = 15;  // Grammar test duration

  // Add StreamController for test status
  static final _testStatusController = StreamController<TestStatus>.broadcast();
  Stream<TestStatus> get testStatusStream => _testStatusController.stream;

  // Start a new test session by storing the end time
  Future<void> startListeningTest() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();
    final endTime = now.add(Duration(minutes: testDurationMinutes));
    
    await prefs.setBool(_listeningActiveKey, true);
    await prefs.setString(_listeningEndTimeKey, endTime.toIso8601String());
    await _updateTestStatus();
  }

  // Get remaining time based on stored end time
  Future<Duration?> getListeningRemainingTime() async {
    final prefs = await SharedPreferences.getInstance();
    final isActive = prefs.getBool(_listeningActiveKey) ?? false;
    if (!isActive) return null;

    final endTimeStr = prefs.getString(_listeningEndTimeKey);
    if (endTimeStr == null) return null;

    final endTime = DateTime.parse(endTimeStr);
    final now = DateTime.now();
    final remaining = endTime.difference(now);

    // If time has expired
    if (remaining.isNegative) {
      await endListeningTest();
      return Duration.zero;
    }

    return remaining;
  }

  // End the test session
  Future<void> endListeningTest() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_listeningStartTimeKey);
    await prefs.remove(_listeningEndTimeKey);
    await prefs.setBool(_listeningActiveKey, false);
    await _updateTestStatus();
  }

  // Check if test is active and not expired
  Future<bool> isListeningTestActive() async {
    final remainingTime = await getListeningRemainingTime();
    return remainingTime != null && !remainingTime.isNegative;
  }

  Future<bool> isReadingTestActive() async {
    final remainingTime = await getReadingRemainingTime();
    return remainingTime != null && !remainingTime.isNegative;
  }

  Future<Duration?> getReadingRemainingTime() async {
    final prefs = await SharedPreferences.getInstance();
    final isActive = prefs.getBool(_readingActiveKey) ?? false;
    if (!isActive) return null;

    final endTimeStr = prefs.getString(_readingEndTimeKey);
    if (endTimeStr == null) return null;

    final endTime = DateTime.parse(endTimeStr);
    final now = DateTime.now();
    final remaining = endTime.difference(now);

    if (remaining.isNegative) {
      await endReadingTest();
      return Duration.zero;
    }

    return remaining;
  }

  Future<void> startReadingTest() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();
    final endTime = now.add(Duration(minutes: readingTestDurationMinutes));
    
    await prefs.setBool(_readingActiveKey, true);
    await prefs.setString(_readingEndTimeKey, endTime.toIso8601String());
    await _updateTestStatus();
  }

  Future<void> endReadingTest() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_readingEndTimeKey);
    await prefs.setBool(_readingActiveKey, false);
    await _updateTestStatus();
  }

  Future<void> clearAllSessions() async {
    final prefs = await SharedPreferences.getInstance();
    
    // Clear listening test session
    await prefs.remove(_listeningStartTimeKey);
    await prefs.remove(_listeningActiveKey);
    await prefs.remove(_listeningEndTimeKey);
    await prefs.remove(_listeningCompletedKey);
    
    // Clear reading test session
    await prefs.remove(_readingActiveKey);
    await prefs.remove(_readingEndTimeKey);
    await prefs.remove(_readingCompletedKey);
    
    // Clear grammar test session
    await prefs.remove(_grammarActiveKey);
    await prefs.remove(_grammarEndTimeKey);
    await prefs.remove(_grammarCompletedKey);
    
    // Clear any other test-related data
    await prefs.remove('current_test_type');
    await prefs.remove('current_question_index');
    await prefs.remove('test_answers');
    await prefs.remove('test_score');
    
    // Update test status
    await _updateTestStatus();
  }

  // Add method to check if any test is active
  Future<bool> isAnyTestActive() async {
    final isListening = await isListeningTestActive();
    final isReading = await isReadingTestActive();
    return isListening || isReading;
  }

  // Add dispose method
  void dispose() {
    _testStatusController.close();
  }

  Future<void> startGrammarTest() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();
    final endTime = now.add(Duration(minutes: grammarTestDurationMinutes));
    
    await prefs.setBool(_grammarActiveKey, true);
    await prefs.setString(_grammarEndTimeKey, endTime.toIso8601String());
    await _updateTestStatus();
  }

  Future<Duration?> getGrammarRemainingTime() async {
    final prefs = await SharedPreferences.getInstance();
    final isActive = prefs.getBool(_grammarActiveKey) ?? false;
    if (!isActive) return null;

    final endTimeStr = prefs.getString(_grammarEndTimeKey);
    if (endTimeStr == null) return null;

    final endTime = DateTime.parse(endTimeStr);
    final now = DateTime.now();
    final remaining = endTime.difference(now);

    if (remaining.isNegative) {
      await endGrammarTest();
      return Duration.zero;
    }

    return remaining;
  }

  Future<bool> isGrammarTestActive() async {
    final remainingTime = await getGrammarRemainingTime();
    return remainingTime != null && !remainingTime.isNegative;
  }

  Future<void> endGrammarTest() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_grammarEndTimeKey);
    await prefs.setBool(_grammarActiveKey, false);
    await _updateTestStatus();
  }

  Future<void> _updateTestStatus() async {
    final isListening = await isListeningTestActive();
    final isReading = await isReadingTestActive();
    final isGrammar = await isGrammarTestActive();
    _testStatusController.add(TestStatus(
      isListeningActive: isListening,
      isReadingActive: isReading,
      isGrammarActive: isGrammar,
    ));
  }

  Future<void> markTestAsCompleted(String testType) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('${testType}_test_completed', true);
  }

  Future<bool> isTestCompleted(String testType) async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('${testType}_test_completed') ?? false;
  }

  // Add methods to get test scores
  Future<int?> getListeningTestScore() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt('listening_test_score');
  }

  Future<int?> getReadingTestScore() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt('reading_test_score');
  }

  Future<int?> getGrammarTestScore() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt('grammar_test_score');
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\widgets\video_overlay.dart
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:media_kit/media_kit.dart';
import 'package:media_kit_video/media_kit_video.dart';
import 'package:just_audio/just_audio.dart';

class VideoOverlay extends StatefulWidget {
  final String videoType;
  final VoidCallback onClose;
  final bool showCloseButton;
  final bool showTutorial;

  const VideoOverlay({
    Key? key,
    required this.videoType,
    required this.onClose,
    this.showCloseButton = true,
    this.showTutorial = true,
  }) : super(key: key);

  @override
  State<VideoOverlay> createState() => _VideoOverlayState();
}

class _VideoOverlayState extends State<VideoOverlay> {
  late final Player _player;
  late final VideoController _controller;
  bool _isInitialized = false;
  bool _hasError = false;
  String? _errorMessage;
  bool _showTutorial = false;
  final ScrollController _scrollController = ScrollController();

  final Map<String, dynamic> _tutorialExercise = {
    'situation': 'Example',
    'audioUrl': 'assets/audio/test_exemple.mp3',
    'question': 'Example Situation: A man is asking a woman for directions.\nThe Science Museum:',
    'options': [
      'a) isn\'t near the hospital',
      'b) is on the left side of the street',
      'c) is two blocks from the hospital',
      'd) and the hospital are on the same street'
    ],
    'correctAnswer': 'd) and the hospital are on the same street',
  };
  String? _selectedAnswer;
  bool _hasFinishedPlaying = false;
  late final AudioPlayer _audioPlayer;
  bool _isPlaying = false;
  Duration _position = Duration.zero;
  Duration _duration = Duration.zero;
  Duration _bufferedPosition = Duration.zero;
  bool _hasSelectedCorrectAnswer = false;
  String? _feedbackMessage;

  @override
  void initState() {
    super.initState();
    _initializeVideo();
    if (widget.videoType.toLowerCase() == 'listening') {
      _audioPlayer = AudioPlayer();
      _loadTutorialAudio();
    }
  }

  Future<void> _initializeVideo() async {
    try {
      final videoPath = _getVideoAsset();
      print('Attempting to load video from: $videoPath');
      
      // Initialize player
      _player = Player();
      _controller = VideoController(_player);
      
      // Open the video file
      await _player.open(Media('asset:///$videoPath'));
      
      if (mounted) {
        setState(() {
          _isInitialized = true;
          _hasError = false;
          _errorMessage = null;
        });
        _player.play();
      }
    } catch (e, stackTrace) {
      print('Error initializing video: $e');
      print('Stack trace: $stackTrace');
      if (mounted) {
        setState(() {
          _hasError = true;
          _errorMessage = e.toString();
        });
      }
    }
  }

  String _getVideoAsset() {
    switch (widget.videoType.toLowerCase()) {
      case 'listening':
        return 'assets/videos/listening_instructions.mp4';
      case 'reading':
        return 'assets/videos/reading_instructions.mp4';
      case 'grammar':
        return 'assets/videos/grammar_instructions.mp4';
      default:
        throw Exception('Unknown video type: ${widget.videoType}');
    }
  }

  Future<void> _loadTutorialAudio() async {
    try {
      await _audioPlayer.setAsset(_tutorialExercise['audioUrl']);
      _duration = await _audioPlayer.duration ?? Duration.zero;

      _audioPlayer.positionStream.listen((position) {
        if (mounted) {
          setState(() => _position = position);
        }
      });

      _audioPlayer.bufferedPositionStream.listen((bufferedPosition) {
        if (mounted) {
          setState(() => _bufferedPosition = bufferedPosition);
        }
      });

      _audioPlayer.playerStateStream.listen((state) {
        if (mounted) {
          setState(() {
            _isPlaying = state.playing;
            if (state.processingState == ProcessingState.completed) {
              _hasFinishedPlaying = true;
            }
          });
        }
      });
    } catch (e) {
      print('Error loading tutorial audio: $e');
    }
  }

  Future<void> _handlePlayPause() async {
    try {
      if (_isPlaying) {
        await _audioPlayer.pause();
      } else {
        await _audioPlayer.play();
      }
    } catch (e) {
      print('Error playing/pausing tutorial audio: $e');
    }
  }

  @override
  void dispose() {
    _player.dispose();
    if (widget.videoType.toLowerCase() == 'listening') {
      _audioPlayer.dispose();
    }
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Material(
      type: MaterialType.transparency,
      child: Stack(
        children: [
          BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 8, sigmaY: 8),
            child: Container(
              color: Colors.black.withOpacity(0.7),
            ),
          ),
          Center(
            child: Container(
              constraints: BoxConstraints(
                maxWidth: 800,
                maxHeight: MediaQuery.of(context).size.height * 0.9,
              ),
              margin: EdgeInsets.all(32),
              child: Card(
                elevation: 8,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(24),
                ),
                child: _showTutorial && widget.videoType.toLowerCase() == 'listening'
                    ? SizedBox(
                        height: MediaQuery.of(context).size.height * 0.8,
                        child: Scrollbar(
                          controller: _scrollController,
                          thickness: 8,
                          radius: Radius.circular(4),
                          child: SingleChildScrollView(
                            controller: _scrollController,
                            physics: AlwaysScrollableScrollPhysics(),
                            padding: EdgeInsets.symmetric(horizontal: 4),
                            child: Padding(
                              padding: EdgeInsets.all(24),
                              child: _buildTutorialContent(),
                            ),
                          ),
                        ),
                      )
                    : _buildVideoContent(),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTutorialContent() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      mainAxisSize: MainAxisSize.min,
      children: [
        // Header
        Container(
          padding: EdgeInsets.all(24),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
            ),
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Practice Exercise',
                style: GoogleFonts.poppins(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              SizedBox(height: 8),
              Text(
                'Try this example before starting the test',
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  color: Colors.white.withOpacity(0.9),
                ),
              ),
            ],
          ),
        ),
        SizedBox(height: 24),

        // Audio Player Section
        Container(
          padding: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.grey[50],
            borderRadius: BorderRadius.circular(16),
            border: Border.all(color: Colors.grey[200]!),
          ),
          child: Column(
            children: [
              // Play/Pause Button
              IconButton(
                icon: Icon(
                  _isPlaying ? Icons.pause_circle_filled : Icons.play_circle_filled,
                  size: 48,
                  color: Color(0xFF2193b0),
                ),
                onPressed: _handlePlayPause,
              ),
              SizedBox(height: 16),
              
              // Progress Bar
              SliderTheme(
                data: SliderThemeData(
                  thumbColor: Color(0xFF2193b0),
                  activeTrackColor: Color(0xFF2193b0),
                  inactiveTrackColor: Colors.grey[300],
                  trackHeight: 4.0,
                  thumbShape: RoundSliderThumbShape(enabledThumbRadius: 6),
                ),
                child: Slider(
                  value: _position.inMilliseconds.toDouble(),
                  max: _duration.inMilliseconds.toDouble(),
                  onChanged: (value) {
                    _audioPlayer.seek(Duration(milliseconds: value.toInt()));
                  },
                ),
              ),
              
              // Duration Labels
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 16),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      _formatDuration(_position),
                      style: GoogleFonts.poppins(color: Colors.grey[600]),
                    ),
                    Text(
                      _formatDuration(_duration),
                      style: GoogleFonts.poppins(color: Colors.grey[600]),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        SizedBox(height: 24),

        // Question Text
        Text(
          _tutorialExercise['question'],
          style: GoogleFonts.poppins(
            fontSize: 18,
            fontWeight: FontWeight.w500,
            color: Colors.grey[800],
          ),
        ),
        SizedBox(height: 24),

        // Answer Options
        ...(_tutorialExercise['options'] as List<String>).map((option) {
          bool isSelected = _selectedAnswer == option;
          bool isCorrect = option == _tutorialExercise['correctAnswer'];
          
          return Padding(
            padding: EdgeInsets.only(bottom: 12),
            child: InkWell(
              onTap: () {
                setState(() {
                  _selectedAnswer = option;
                  if (isCorrect) {
                    _hasSelectedCorrectAnswer = true;
                    _feedbackMessage = 'Correct! You can now start the test.';
                  } else {
                    _hasSelectedCorrectAnswer = false;
                    _feedbackMessage = 'Try again. Hint: Listen carefully to where both buildings are located.';
                  }
                });
              },
              child: Container(
                padding: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: isSelected
                      ? (isCorrect ? Colors.green.withOpacity(0.1) : Colors.red.withOpacity(0.1))
                      : Colors.white,
                  border: Border.all(
                    color: isSelected
                        ? (isCorrect ? Colors.green : Colors.red)
                        : Colors.grey[300]!,
                    width: isSelected ? 2 : 1,
                  ),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  children: [
                    Expanded(
                      child: Text(
                        option,
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          color: isSelected
                              ? (isCorrect ? Colors.green : Colors.red)
                              : Colors.grey[700],
                        ),
                      ),
                    ),
                    if (isSelected)
                      Icon(
                        isCorrect ? Icons.check_circle : Icons.error,
                        color: isCorrect ? Colors.green : Colors.red,
                      ),
                  ],
                ),
              ),
            ),
          );
        }).toList(),
        
        // Feedback Message
        if (_feedbackMessage != null) ...[
          SizedBox(height: 16),
          Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: _hasSelectedCorrectAnswer 
                  ? Colors.green.withOpacity(0.1)
                  : Colors.orange.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: _hasSelectedCorrectAnswer 
                    ? Colors.green.withOpacity(0.3)
                    : Colors.orange.withOpacity(0.3),
              ),
            ),
            child: Row(
              children: [
                Icon(
                  _hasSelectedCorrectAnswer 
                      ? Icons.check_circle
                      : Icons.info_outline,
                  color: _hasSelectedCorrectAnswer 
                      ? Colors.green
                      : Colors.orange,
                ),
                SizedBox(width: 12),
                Expanded(
                  child: Text(
                    _feedbackMessage!,
                    style: GoogleFonts.poppins(
                      fontSize: 14,
                      color: _hasSelectedCorrectAnswer 
                          ? Colors.green[700]
                          : Colors.orange[700],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
        
        SizedBox(height: 24),

        // Continue Button
        ElevatedButton(
          onPressed: _hasSelectedCorrectAnswer ? widget.onClose : null,
          style: ElevatedButton.styleFrom(
            backgroundColor: Color(0xFF2193b0),
            disabledBackgroundColor: Colors.grey[300],
            padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          child: Text(
            _hasSelectedCorrectAnswer ? 'Start Test' : 'Select the Correct Answer',
            style: GoogleFonts.poppins(
              fontSize: 16,
              fontWeight: FontWeight.w600,
              color: Colors.white,
            ),
          ),
        ),
        
        if (!_hasSelectedCorrectAnswer && _selectedAnswer != null) ...[
          SizedBox(height: 12),
          Text(
            'Please select the correct answer to continue',
            textAlign: TextAlign.center,
            style: GoogleFonts.poppins(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildVideoContent() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        // Header
        Container(
          padding: EdgeInsets.all(24),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
            ),
            borderRadius: BorderRadius.vertical(
              top: Radius.circular(24),
            ),
          ),
          child: Row(
            children: [
              Icon(
                Icons.play_circle_outline,
                color: Colors.white,
                size: 32,
              ),
              SizedBox(width: 16),
              Expanded(
                child: Text(
                  '${widget.videoType} Test Instructions',
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),
              if (widget.showCloseButton)
                IconButton(
                  icon: Icon(Icons.close, color: Colors.white),
                  onPressed: widget.onClose,
                ),
            ],
          ),
        ),
        // Video content
        Flexible(
          child: Container(
            padding: EdgeInsets.all(24),
            child: _hasError
                ? _buildErrorState()
                : !_isInitialized
                    ? _buildLoadingState()
                    : AspectRatio(
                        aspectRatio: 16 / 9,
                        child: Video(
                          controller: _controller,
                          controls: null,
                        ),
                      ),
          ),
        ),
        // Controls
        if (_isInitialized && !_hasError)
          Padding(
            padding: EdgeInsets.symmetric(horizontal: 24),
            child: _buildVideoControls(),
          ),
        // Action Buttons
        Padding(
          padding: EdgeInsets.all(24),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              TextButton(
                onPressed: () async {
                  if (widget.videoType.toLowerCase() == 'listening') {
                    await _player.pause(); // Stop video playback
                    setState(() => _showTutorial = true);
                  } else {
                    widget.onClose();
                  }
                },
                child: Text(
                  'Skip Video',
                  style: GoogleFonts.poppins(
                    color: Colors.grey[600],
                  ),
                ),
              ),
              SizedBox(width: 16),
              ElevatedButton(
                onPressed: () async {
                  if (widget.videoType.toLowerCase() == 'listening') {
                    await _player.pause(); // Stop video playback
                    setState(() => _showTutorial = true);
                  } else {
                    widget.onClose();
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFF2193b0),
                  padding: EdgeInsets.symmetric(
                    horizontal: 24, 
                    vertical: 16,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(
                  'Continue',
                  style: GoogleFonts.poppins(
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildErrorState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.error_outline, color: Colors.red, size: 48),
          SizedBox(height: 16),
          Text(
            'Failed to load video',
            style: GoogleFonts.poppins(
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingState() {
    return Center(
      child: CircularProgressIndicator(
        color: Color(0xFF2193b0),
      ),
    );
  }

  Widget _buildVideoControls() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        // Progress bar and time
        Row(
          children: [
            StreamBuilder<Duration>(
              stream: _player.stream.position,
              builder: (context, snapshot) {
                final position = snapshot.data ?? Duration.zero;
                return Text(
                  _formatDuration(position),
                  style: GoogleFonts.poppins(
                    color: Colors.grey[600],
                  ),
                );
              },
            ),
            Expanded(
              child: StreamBuilder<Duration>(
                stream: _player.stream.position,
                builder: (context, snapshot) {
                  final position = snapshot.data ?? Duration.zero;
                  return StreamBuilder<Duration>(
                    stream: _player.stream.duration,
                    builder: (context, snapshot) {
                      final duration = snapshot.data ?? Duration.zero;
                      return SliderTheme(
                        data: SliderThemeData(
                          thumbColor: Color(0xFF2193b0),
                          activeTrackColor: Color(0xFF2193b0),
                          inactiveTrackColor: Colors.grey[300],
                          trackHeight: 4.0,
                          thumbShape: RoundSliderThumbShape(enabledThumbRadius: 6),
                        ),
                        child: Slider(
                          value: position.inMilliseconds.toDouble(),
                          max: duration.inMilliseconds.toDouble(),
                          onChanged: (value) {
                            _player.seek(Duration(milliseconds: value.toInt()));
                          },
                        ),
                      );
                    },
                  );
                },
              ),
            ),
            StreamBuilder<Duration>(
              stream: _player.stream.duration,
              builder: (context, snapshot) {
                final duration = snapshot.data ?? Duration.zero;
                return Text(
                  _formatDuration(duration),
                  style: GoogleFonts.poppins(
                    color: Colors.grey[600],
                  ),
                );
              },
            ),
          ],
        ),
        // Playback controls
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            IconButton(
              icon: Icon(Icons.replay_10),
              color: Colors.grey[600],
              onPressed: () {
                _player.seek(Duration(
                  milliseconds: (_player.state.position.inMilliseconds - 10000).clamp(0, _player.state.duration.inMilliseconds),
                ));
              },
            ),
            StreamBuilder<bool>(
              stream: _player.stream.playing,
              builder: (context, snapshot) {
                final isPlaying = snapshot.data ?? false;
                return IconButton(
                  icon: Icon(
                    isPlaying ? Icons.pause_circle_filled : Icons.play_circle_filled,
                    size: 48,
                  ),
                  color: Color(0xFF2193b0),
                  onPressed: () {
                    if (isPlaying) {
                      _player.pause();
                    } else {
                      _player.play();
                    }
                  },
                );
              },
            ),
            IconButton(
              icon: Icon(Icons.forward_10),
              color: Colors.grey[600],
              onPressed: () {
                _player.seek(Duration(
                  milliseconds: (_player.state.position.inMilliseconds + 10000).clamp(0, _player.state.duration.inMilliseconds),
                ));
              },
            ),
          ],
        ),
      ],
    );
  }

  String _formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }
}

