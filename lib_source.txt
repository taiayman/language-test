

    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\main.dart
import 'package:flutter/material.dart';
import 'package:test_windows_students/screens/home_page.dart';
import 'package:test_windows_students/screens/registration_page.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Language Test',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        scaffoldBackgroundColor: Colors.white,
      ),
      // Remove the home property and use routes instead
      initialRoute: '/',
      routes: {
        '/': (context) => const RegistrationPage(),
        '/home': (context) => const HomePage(),
      },
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\models\test_result.dart
class TestResult {
  final String userId;
  final String firstName;
  final String lastName;
  final String testType;
  final int score;
  final int totalQuestions;
  final DateTime timestamp;

  TestResult({
    required this.userId,
    required this.firstName,
    required this.lastName,
    required this.testType,
    required this.score,
    required this.totalQuestions,
    required this.timestamp,
  });

  Map<String, dynamic> toJson() {
    return {
      'userId': userId,
      'firstName': firstName,
      'lastName': lastName,
      'testType': testType,
      'score': score,
      'totalQuestions': totalQuestions,
      'timestamp': timestamp.toIso8601String(),
    };
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\grammar_test_page.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:test_windows_students/screens/grammar_test_results_page.dart';
import 'package:test_windows_students/services/test_session_service.dart';  // Update to correct path
import 'package:test_windows_students/services/auth_service.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:test_windows_students/services/test_results_service.dart';
import 'package:test_windows_students/models/test_result.dart';

class GrammarTestPage extends StatefulWidget {
  final Duration? remainingTime;
  final String firstName;
  final String lastName;
  final VoidCallback? onTestComplete;
  
  const GrammarTestPage({
    Key? key, 
    this.remainingTime,
    required this.firstName,
    required this.lastName,
    this.onTestComplete,
  }) : super(key: key);

  @override
  _GrammarTestPageState createState() => _GrammarTestPageState();
}

class _GrammarTestPageState extends State<GrammarTestPage> {
  int _currentQuestionIndex = 0;
  String? _selectedAnswer;
  final int _totalTimeInMinutes = 15;
  late Timer _timer;
  late Duration _remainingTime;
  double _progress = 1.0;
  final TestSessionService _testSessionService = TestSessionService();
  final Map<int, String> _userAnswers = {};  // Add this line

  // Example grammar questions with different types
  final List<Map<String, dynamic>> _questions = [
    {
      'type': 'multiple_choice',
      'question': 'Choose the correct form of the verb:',
      'sentence': 'If I _____ rich, I would buy a house.',
      'options': ['am', 'were', 'was', 'be'],
      'correctAnswer': 'were',
      'explanation': 'In second conditional sentences, we use "were" for all subjects.'
    },
    {
      'type': 'error_identification',
      'question': 'Identify the error in this sentence:',
      'sentence': 'Neither of the students have completed their assignments.',
      'options': [
        'Neither of',
        'the students',
        'have completed',
        'their assignments'
      ],
      'correctAnswer': 'have completed',
      'explanation': '"Neither" is singular, so it should be "has completed".'
    },
    {
      'type': 'sentence_improvement',
      'question': 'Choose the best way to improve this sentence:',
      'sentence': 'The book was very interesting and I liked it very much.',
      'options': [
        'The book was very interesting and I liked it a lot.',
        'I found the book fascinating.',
        'The book had much interest for me.',
        'It was a very interesting book that I liked.'
      ],
      'correctAnswer': 'I found the book fascinating.',
      'explanation': 'This version is more concise and avoids repetition.'
    },
  ];

  @override
  void initState() {
    super.initState();
    // Initialize remaining time from widget parameter if available
    _remainingTime = widget.remainingTime ?? Duration(minutes: _totalTimeInMinutes);
    _initializeTimer();
  }

  Future<void> _initializeTimer() async {
    final remainingTime = await _testSessionService.getGrammarRemainingTime();
    if (remainingTime != null) {
      setState(() {
        _remainingTime = remainingTime;
        _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
      });
    } else {
      // Start new test
      await _testSessionService.startGrammarTest();
      setState(() {
        _remainingTime = Duration(minutes: _totalTimeInMinutes);
        _progress = 1.0;
      });
    }
    _startTimer();
  }

  void _startTimer() {
    const oneSecond = Duration(seconds: 1);
    _timer = Timer.periodic(oneSecond, (timer) async {
      final remainingTime = await _testSessionService.getGrammarRemainingTime();
      
      if (remainingTime == null || remainingTime.inSeconds <= 0) {
        _timer.cancel();
        _handleTimeUp();
        return;
      }

      if (mounted) {  // Add mounted check
        setState(() {
          _remainingTime = remainingTime;
          _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
        });
      }
    });
  }

  void _handleTimeUp() async {
    _timer.cancel();
    await _testSessionService.endGrammarTest();
    await _testSessionService.markTestAsCompleted('grammar');
    
    if (!mounted) return;

    // Calculate score
    int correctAnswers = 0;
    _questions.asMap().forEach((index, question) {
      if (_userAnswers[index] == question['correctAnswer']) {
        correctAnswers++;
      }
    });

    // Get user data
    final AuthService _authService = AuthService();
    final userId = _authService.getUserId();
    String firstName = 'User';  // Default value
    String lastName = '';
    
    if (userId != null) {
      try {
        final url = Uri.parse('https://${_authService.projectId}-default-rtdb.firebaseio.com/users/$userId.json');
        final response = await http.get(url);
        
        if (response.statusCode == 200) {
          final userData = json.decode(response.body);
          firstName = userData['firstName'] ?? 'User';
          lastName = userData['lastName'] ?? '';
        }
      } catch (e) {
        print('Error loading user data: $e');
      }
    }

    if (!mounted) return;

    // Navigate to results page with all required parameters
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(
        builder: (context) => GrammarTestResultsPage(
          score: correctAnswers,
          totalQuestions: _questions.length,
          firstName: firstName,
          lastName: lastName,
        ),
      ),
    );
  }

  int _calculateScore() {
    int score = 0;
    for (int i = 0; i < _questions.length; i++) {
      if (_userAnswers[i] == _questions[i]['correctAnswer']) {
        score++;
      }
    }
    return score;
  }

  void _handleTestCompletion() async {
    await _testSessionService.markTestAsCompleted('grammar');
    
    // Calculate score
    int score = _calculateScore();
  

    // Get user data
    final AuthService _authService = AuthService();
    final userId = _authService.getUserId();
    String firstName = 'User';  // Default value
    String lastName = '';
    
    if (userId != null) {
      try {
        final url = Uri.parse('https://${_authService.projectId}-default-rtdb.firebaseio.com/users/$userId.json');
        final response = await http.get(url);
        
        if (response.statusCode == 200) {
          final userData = json.decode(response.body);
          firstName = userData['firstName'] ?? 'User';
          lastName = userData['lastName'] ?? '';
        }
      } catch (e) {
        print('Error loading user data: $e');
      }
    }

    if (!mounted) return;

    // Navigate to results page with all required parameters
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(
        builder: (context) => GrammarTestResultsPage(
          score: score,
          totalQuestions: _questions.length,
          firstName: firstName,
          lastName: lastName,
        ),
      ),
    );
  }

  @override
  void dispose() {
    if (_timer.isActive) {
      _timer.cancel();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back_ios_new,
            color: Color(0xFF2193b0),
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: Row(
          children: [
            Icon(
              MaterialCommunityIcons.format_text,
              color: Color(0xFF2193b0),
              size: 28,
            ),
            SizedBox(width: 12),
            Text(
              'Grammar Test',
              style: GoogleFonts.poppins(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Color(0xFF2193b0),
              ),
            ),
          ],
        ),
        centerTitle: false,
        actions: [
          Container(
            margin: EdgeInsets.only(right: 16),
            padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            decoration: BoxDecoration(
              border: Border.all(color: Color(0xFF2193b0)),
              borderRadius: BorderRadius.circular(20),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.help_outline,
                  color: Color(0xFF2193b0),
                  size: 20,
                ),
                SizedBox(width: 8),
                Text(
                  'Help',
                  style: GoogleFonts.poppins(
                    color: Color(0xFF2193b0),
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
        ],
        toolbarHeight: 72, // Increased height for desktop
      ),
      body: Column(
        children: [
          // Main content - updated layout
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                ),
              ),
              child: Padding(
                padding: const EdgeInsets.all(32.0), // Reduced padding
                child: Row(
                  children: [
                    // Question Card (Left side)
                    Expanded(
                      flex: 2,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch, // Makes children match parent width
                        children: [
                          // Question Card (Upper)
                          Expanded(
                            flex: 4,
                            child: Card(
                              margin: EdgeInsets.zero, // Removes default card margin
                              elevation: 8,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(24),
                              ),
                              child: Padding(
                                padding: const EdgeInsets.all(24.0),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'Question ${_currentQuestionIndex + 1} of ${_questions.length}',
                                      style: GoogleFonts.poppins(
                                        fontSize: 20,
                                        color: Colors.grey[600],
                                      ),
                                    ),
                                    SizedBox(height: 24),
                                    Text(
                                      _questions[_currentQuestionIndex]['question'],
                                      style: GoogleFonts.poppins(
                                        fontSize: 24,
                                        fontWeight: FontWeight.bold,
                                        color: const Color(0xFF2193b0),
                                      ),
                                    ),
                                    SizedBox(height: 24),
                                    Container(
                                      width: double.infinity, // Makes container match parent width
                                      padding: EdgeInsets.all(20),
                                      decoration: BoxDecoration(
                                        color: Colors.grey[100],
                                        borderRadius: BorderRadius.circular(16),
                                      ),
                                      child: Text(
                                        _questions[_currentQuestionIndex]['sentence'],
                                        style: GoogleFonts.poppins(
                                          fontSize: 18,
                                          height: 1.6,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                          SizedBox(height: 16),
                          // Timer Card (Lower)
                          Card(
                            margin: EdgeInsets.zero, // Removes default card margin
                            elevation: 8,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(24),
                            ),
                            child: Padding(
                              padding: EdgeInsets.all(24),
                              child: Row(
                                children: [
                                  Icon(
                                    Icons.timer_outlined,
                                    color: _remainingTime.inMinutes < 5 
                                        ? Colors.red 
                                        : Color(0xFF2193b0),
                                    size: 28,
                                  ),
                                  SizedBox(width: 16),
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        Text(
                                          'Time Remaining',
                                          style: GoogleFonts.poppins(
                                            fontSize: 16,
                                            fontWeight: FontWeight.w500,
                                            color: Colors.grey[600],
                                          ),
                                        ),
                                        SizedBox(height: 8),
                                        Text(
                                          _formatTime(_remainingTime),
                                          style: GoogleFonts.poppins(
                                            fontSize: 24,
                                            fontWeight: FontWeight.bold,
                                            color: _remainingTime.inMinutes < 5 
                                                ? Colors.red 
                                                : Color(0xFF2193b0),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  Expanded(
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(10),
                                      child: LinearProgressIndicator(
                                        value: _progress,
                                        backgroundColor: Colors.grey.shade200,
                                        valueColor: AlwaysStoppedAnimation<Color>(
                                          _remainingTime.inMinutes < 5 
                                              ? Colors.red 
                                              : Color(0xFF2193b0),
                                        ),
                                        minHeight: 12,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    SizedBox(width: 32),
                    // Options Card (Right side)
                    Expanded(
                      child: Card(
                        elevation: 8,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(24),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(24.0), // Reduced padding
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.stretch,
                            children: [
                              Text(
                                'Select Your Answer',
                                style: GoogleFonts.poppins(
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                  color: const Color(0xFF2193b0),
                                ),
                              ),
                              SizedBox(height: 24),
                              Expanded(
                                child: ListView.builder(
                                  itemCount: _questions[_currentQuestionIndex]['options'].length,
                                  itemBuilder: (context, index) {
                                    return _buildOptionButton(
                                      _questions[_currentQuestionIndex]['options'][index]
                                    );
                                  },
                                ),
                              ),
                              ElevatedButton(
                                style: ElevatedButton.styleFrom(
                                  padding: EdgeInsets.zero,
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(32),
                                  ),
                                ),
                                onPressed: _selectedAnswer != null
                                    ? () async {
                                        if (_currentQuestionIndex < _questions.length - 1) {
                                          // Continue to next question
                                          setState(() {
                                            if (_selectedAnswer != null) {  // Add null check
                                              _userAnswers[_currentQuestionIndex] = _selectedAnswer!;  // Use ! operator
                                            }
                                            _currentQuestionIndex++;
                                            _selectedAnswer = null;
                                          });
                                        } else {
                                          // Save last answer
                                          if (_selectedAnswer != null) {  // Add null check
                                            _userAnswers[_currentQuestionIndex] = _selectedAnswer!;  // Use ! operator
                                          }
                                          
                                          // Calculate score
                                          int score = 0;
                                          _userAnswers.forEach((index, answer) {
                                            if (answer == _questions[index]['correctAnswer']) {
                                              score++;
                                            }
                                          });
                                          
                                          final authService = AuthService();
                                          final testResultsService = TestResultsService(authService.projectId);
                                          
                                          final result = TestResult(
                                            userId: authService.getUserId() ?? 'anonymous',
                                            firstName: widget.firstName,
                                            lastName: widget.lastName,
                                            testType: 'Grammar Test',
                                            score: score,
                                            totalQuestions: _questions.length,
                                            timestamp: DateTime.now(),
                                          );
                                          
                                          try {
                                            // Stop the timer
                                            _timer.cancel();
                                            
                                            // Mark test as completed
                                            await _testSessionService.markTestAsCompleted('grammar');
                                            
                                            // Save test result
                                            await testResultsService.saveTestResult(result);
                                            
                                            if (!mounted) return;
                                            
                                            // Update UI to show completion
                                            widget.onTestComplete?.call();
                                            
                                            // Navigate to results page
                                            Navigator.of(context).pushReplacement(
                                              MaterialPageRoute(
                                                builder: (context) => GrammarTestResultsPage(
                                                  score: score,
                                                  totalQuestions: _questions.length,
                                                  firstName: widget.firstName,
                                                  lastName: widget.lastName,
                                                ),
                                              ),
                                            );
                                          } catch (e) {
                                            if (!mounted) return;
                                            ScaffoldMessenger.of(context).showSnackBar(
                                              SnackBar(content: Text('Failed to save test result')),
                                            );
                                          }
                                        }
                                      }
                                    : null,
                                child: Ink(
                                  decoration: BoxDecoration(
                                    gradient: LinearGradient(
                                      colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                                      begin: Alignment.centerLeft,
                                      end: Alignment.centerRight,
                                    ),
                                    borderRadius: BorderRadius.circular(32),
                                  ),
                                  child: Container(
                                    height: 56,
                                    alignment: Alignment.center,
                                    child: Text(
                                      _currentQuestionIndex < _questions.length - 1
                                          ? 'Next Question'
                                          : 'Finish Test',
                                      style: GoogleFonts.poppins(
                                        fontSize: 18,
                                        color: Colors.white,
                                        fontWeight: FontWeight.w600,
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Update the option button to match reading screen style
  Widget _buildOptionButton(String option) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(24),
          border: Border.all(
            color: _selectedAnswer == option 
                ? Color(0xFF2193b0) 
                : Colors.grey.shade300,
            width: 2,
          ),
        ),
        child: InkWell(
          borderRadius: BorderRadius.circular(24), // Increased radius
          onTap: () {
            setState(() {
              _selectedAnswer = option;
            });
          },
          child: Container(
            padding: EdgeInsets.all(24), // Increased padding
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: _selectedAnswer == option
                  ? LinearGradient(
                      colors: [
                        Color(0xFF2193b0).withOpacity(0.1),
                        Color(0xFF6dd5ed).withOpacity(0.1)
                      ],
                      begin: Alignment.centerLeft,
                      end: Alignment.centerRight,
                  )
                  : null,
            ),
            child: Row(
              children: [
                Container(
                  width: 28, // Increased size
                  height: 28, // Increased size
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: _selectedAnswer == option 
                          ? Color(0xFF2193b0) 
                          : Colors.grey.shade400,
                      width: 2,
                    ),
                    color: _selectedAnswer == option 
                        ? Color(0xFF2193b0) 
                        : Colors.transparent,
                  ),
                  child: _selectedAnswer == option
                      ? Icon(
                          Icons.check,
                          size: 16,
                          color: Colors.white,
                        )
                      : null,
                ),
                SizedBox(width: 20), // Increased spacing
                Expanded(
                  child: Text(
                    option,
                    style: GoogleFonts.poppins(
                      fontSize: 18, // Increased font size
                      color: _selectedAnswer == option 
                          ? Color(0xFF2193b0) 
                          : Colors.black87,
                      fontWeight: _selectedAnswer == option 
                          ? FontWeight.w600 
                          : FontWeight.normal,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _formatTime(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }

  // Update the answer selection method
  void _handleAnswerSelection(String answer) {
    setState(() {
      _selectedAnswer = answer;
      _userAnswers[_currentQuestionIndex] = answer;
    });
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\grammar_test_results_page.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';

class GrammarTestResultsPage extends StatelessWidget {
  final int score;
  final int totalQuestions;
  final String firstName;
  final String lastName;

  const GrammarTestResultsPage({
    Key? key,
    required this.score,
    required this.totalQuestions,
    required this.firstName,
    required this.lastName,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final percentage = (score / totalQuestions) * 100;
    final grade = _calculateGrade(percentage);

    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Row(
          children: [
            // Left Side Panel
            Container(
              width: 280,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                ),
              ),
              padding: EdgeInsets.all(20),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircleAvatar(
                    radius: 50,
                    backgroundColor: Colors.white,
                    child: Text(
                      '${percentage.toStringAsFixed(0)}%',
                      style: GoogleFonts.poppins(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2193b0),
                      ),
                    ),
                  ),
                  SizedBox(height: 16),
                  Text(
                    grade,
                    style: GoogleFonts.poppins(
                      fontSize: 24,
                      fontWeight: FontWeight.w500,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    '$firstName $lastName',
                    style: GoogleFonts.poppins(
                      fontSize: 18,
                      color: Colors.white.withOpacity(0.9),
                    ),
                  ),
                ],
              ),
            ),

            // Main Content Area
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(32),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Grammar Test Results',
                      style: GoogleFonts.poppins(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2193b0),
                      ),
                    ),
                    SizedBox(height: 32),
                    
                    // Stats Cards
                    Row(
                      children: [
                        Expanded(child: _buildStatCard('Correct', score, Icons.check_circle_outline, Colors.green)),
                        SizedBox(width: 16),
                        Expanded(child: _buildStatCard('Wrong', totalQuestions - score, Icons.cancel_outlined, Colors.red)),
                        SizedBox(width: 16),
                        Expanded(child: _buildStatCard('Total', totalQuestions, Icons.assignment_outlined, Color(0xFF2193b0))),
                      ],
                    ),
                    
                    SizedBox(height: 32),
                    
                    // Return Home Button
                    Align(
                      alignment: Alignment.centerRight,
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.of(context).pushNamedAndRemoveUntil('/home', (route) => false);
                        },
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                          backgroundColor: Color(0xFF2193b0),
                          elevation: 0,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: Text(
                          'Return Home',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatCard(String title, int value, IconData icon, Color color) {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 32),
          SizedBox(height: 12),
          Text(
            value.toString(),
            style: GoogleFonts.poppins(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            title,
            style: GoogleFonts.poppins(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
        ],
      ),
    );
  }

  String _calculateGrade(double percentage) {
    if (percentage >= 90) return 'Excellent';
    if (percentage >= 80) return 'Very Good';
    if (percentage >= 70) return 'Good';
    if (percentage >= 60) return 'Fair';
    return 'Need Practice';
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\home_page.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:test_windows_students/services/auth_service.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:just_audio/just_audio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:test_windows_students/screens/listening_test_page.dart';
import 'package:test_windows_students/screens/reading_test_page.dart';
import 'package:test_windows_students/screens/grammar_test_page.dart';
import 'package:test_windows_students/services/test_session_service.dart';
import 'package:test_windows_students/screens/registration_page.dart';
import 'dart:ui';

class HomePage extends StatefulWidget {
  const HomePage({Key? key}) : super(key: key);

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final AuthService _authService = AuthService();
  Map<String, dynamic>? _userData;
  final TestSessionService _testSessionService = TestSessionService();
  bool _isListeningTestActive = false;
  bool _isReadingTestActive = false;
  bool _isGrammarTestActive = false;  // Add this line
  late StreamSubscription _testStatusSubscription;

  // Add these controllers
  final TextEditingController _firstNameController = TextEditingController();
  final TextEditingController _lastNameController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadUserData();
    _checkActiveTests();
    
    // Update status subscription to include grammar
    _testStatusSubscription = _testSessionService.testStatusStream.listen((testStatus) {
      setState(() {
        _isListeningTestActive = testStatus.isListeningActive;
        _isReadingTestActive = testStatus.isReadingActive;
        _isGrammarTestActive = testStatus.isGrammarActive;  // Add this line
      });
    });
  }

  @override
  void dispose() {
    _testStatusSubscription.cancel();
    _firstNameController.dispose();
    _lastNameController.dispose();
    super.dispose();
  }

  Future<void> _loadUserData() async {
    try {
      final userId = _authService.getUserId();
      if (userId != null) {
        final url = Uri.parse('https://${_authService.projectId}-default-rtdb.firebaseio.com/users/$userId.json');
        final response = await http.get(url);
        
        if (response.statusCode == 200) {
          setState(() {
            _userData = json.decode(response.body);
          });
        } else {
          print('Failed to load user data: ${response.statusCode}');
        }
      }
    } catch (e) {
      print('Error loading user data: $e');
    }
  }

  // Add check for grammar test
  Future<void> _checkActiveTests() async {
    final isListening = await _testSessionService.isListeningTestActive();
    final isReading = await _testSessionService.isReadingTestActive();
    final isGrammar = await _testSessionService.isGrammarTestActive();
    
    // Add these lines to check completed tests
    final isListeningCompleted = await _testSessionService.isTestCompleted('listening');
    final isReadingCompleted = await _testSessionService.isTestCompleted('reading');
    final isGrammarCompleted = await _testSessionService.isTestCompleted('grammar');
    
    if (mounted) {
      setState(() {
        _isListeningTestActive = isListening;
        _isReadingTestActive = isReading;
        _isGrammarTestActive = isGrammar;
      });
    }
  }

  // Add this method
  Future<bool?> _showNameInputDialog(BuildContext context) {
    return showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          elevation: 16,
          child: Container(
            width: MediaQuery.of(context).size.width * 0.4,
            padding: const EdgeInsets.all(40),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Colors.white,
                  Colors.grey.shade50,
                ],
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // Header
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Color(0xFF2193b0).withOpacity(0.1),
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Row(
                    children: [
                      Container(
                        padding: EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Color(0xFF2193b0).withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Icon(
                          Icons.person_outline,
                          size: 32,
                          color: Color(0xFF2193b0),
                        ),
                      ),
                      SizedBox(width: 16),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Enter Your Name',
                            style: GoogleFonts.poppins(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                              color: Color(0xFF2193b0),
                            ),
                          ),
                          Text(
                            'Please provide your full name to start the test',
                            style: GoogleFonts.poppins(
                              fontSize: 14,
                              color: Colors.grey[600],
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 32),
                
                // First Name Field
                TextField(
                  controller: _firstNameController,
                  decoration: InputDecoration(
                    labelText: 'First Name',
                    labelStyle: GoogleFonts.poppins(
                      color: Color(0xFF2193b0),
                    ),
                    prefixIcon: Icon(
                      Icons.person_outline,
                      color: Color(0xFF2193b0),
                    ),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(16),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(16),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(16),
                      borderSide: BorderSide(color: Color(0xFF2193b0), width: 2),
                    ),
                    filled: true,
                    fillColor: Colors.grey.shade50,
                  ),
                ),
                SizedBox(height: 24),
                
                // Last Name Field
                TextField(
                  controller: _lastNameController,
                  decoration: InputDecoration(
                    labelText: 'Last Name',
                    labelStyle: GoogleFonts.poppins(
                      color: Color(0xFF2193b0),
                    ),
                    prefixIcon: Icon(
                      Icons.person_outline,
                      color: Color(0xFF2193b0),
                    ),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(16),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(16),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(16),
                      borderSide: BorderSide(color: Color(0xFF2193b0), width: 2),
                    ),
                    filled: true,
                    fillColor: Colors.grey.shade50,
                  ),
                ),
                SizedBox(height: 40),
                
                // Buttons
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    // Cancel Button
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(false),
                      style: TextButton.styleFrom(
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Text(
                        'Cancel',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                          color: Colors.grey[600],
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    
                    // Start Test Button
                    ElevatedButton(
                      onPressed: () {
                        if (_firstNameController.text.isNotEmpty && 
                            _lastNameController.text.isNotEmpty) {
                          Navigator.of(context).pop(true);
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.zero,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Ink(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                            begin: Alignment.centerLeft,
                            end: Alignment.centerRight,
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Container(
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.play_arrow, color: Colors.white),
                              SizedBox(width: 8),
                              Text(
                                'Start Test',
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.white,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // Update the test handlers to check if test is active first

  Future<void> _handleListeningTestStart() async {
    final isActive = await _testSessionService.isListeningTestActive();
    final remainingTime = await _testSessionService.getListeningRemainingTime();

    if (isActive && remainingTime != null && remainingTime > Duration.zero) {
      // Continue existing test without showing dialog
      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => ListeningTestPage(
            remainingTime: remainingTime,
            firstName: _userData?['firstName'] ?? 'User',  // Use stored user data
            lastName: _userData?['lastName'] ?? '',
          ),
        ),
      );
    } else {
      // Show dialog only for new test
      final shouldStart = await _showNameInputDialog(context);
      if (shouldStart != true) return;

      // Save user info to Firebase
      final userId = _authService.getUserId();
      if (userId != null) {
        final url = Uri.parse('https://${_authService.projectId}-default-rtdb.firebaseio.com/users/$userId.json');
        await http.patch(url, body: json.encode({
          'firstName': _firstNameController.text,
          'lastName': _lastNameController.text,
        }));
      }

      await _testSessionService.startListeningTest();
      if (!mounted) return;

      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => ListeningTestPage(
            firstName: _firstNameController.text,
            lastName: _lastNameController.text,
          ),
        ),
      );
    }
  }

  // Similarly update _handleReadingTestStart
  Future<void> _handleReadingTestStart() async {
    final isActive = await _testSessionService.isReadingTestActive();
    final remainingTime = await _testSessionService.getReadingRemainingTime();
    final isCompleted = await _testSessionService.isTestCompleted('reading');

    if (isCompleted) {
      // If test is completed, do nothing (button will be disabled)
      return;
    }

    if (isActive && remainingTime != null && remainingTime > Duration.zero) {
      // Continue existing test without showing dialog
      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => ReadingTestPage(
            remainingTime: remainingTime,
            firstName: _userData?['firstName'] ?? 'User',
            lastName: _userData?['lastName'] ?? '',
            onTestComplete: () {
              setState(() {
                _isReadingTestActive = false;
              });
            },
          ),
        ),
      );
    } else {
      // Show dialog only for new test
      final shouldStart = await _showNameInputDialog(context);
      if (shouldStart != true) return;

      // Save user info to Firebase
      final userId = _authService.getUserId();
      if (userId != null) {
        final url = Uri.parse('https://${_authService.projectId}-default-rtdb.firebaseio.com/users/$userId.json');
        await http.patch(url, body: json.encode({
          'firstName': _firstNameController.text,
          'lastName': _lastNameController.text,
        }));
      }

      await _testSessionService.startReadingTest();
      if (!mounted) return;

      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => ReadingTestPage(
            firstName: _firstNameController.text,
            lastName: _lastNameController.text,
            onTestComplete: () {
              setState(() {
                _isReadingTestActive = false;
              });
            },
          ),
        ),
      );
    }
  }

  // And _handleGrammarTestStart
  Future<void> _handleGrammarTestStart() async {
    final isActive = await _testSessionService.isGrammarTestActive();
    final remainingTime = await _testSessionService.getGrammarRemainingTime();
    final isCompleted = await _testSessionService.isTestCompleted('grammar');

    if (isCompleted) {
      // If test is completed, do nothing (button will be disabled)
      return;
    }

    if (isActive && remainingTime != null && remainingTime > Duration.zero) {
      // Continue existing test without showing dialog
      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => GrammarTestPage(
            remainingTime: remainingTime,
            firstName: _userData?['firstName'] ?? 'User',
            lastName: _userData?['lastName'] ?? '',
            onTestComplete: () {
              setState(() {
                _isGrammarTestActive = false;
              });
            },
          ),
        ),
      );
    } else {
      // Show dialog only for new test
      final shouldStart = await _showNameInputDialog(context);
      if (shouldStart != true) return;

      // Save user info to Firebase
      final userId = _authService.getUserId();
      if (userId != null) {
        final url = Uri.parse('https://${_authService.projectId}-default-rtdb.firebaseio.com/users/$userId.json');
        await http.patch(url, body: json.encode({
          'firstName': _firstNameController.text,
          'lastName': _lastNameController.text,
        }));
      }

      await _testSessionService.startGrammarTest();
      if (!mounted) return;

      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => GrammarTestPage(
            firstName: _firstNameController.text,
            lastName: _lastNameController.text,
            onTestComplete: () {
              setState(() {
                _isGrammarTestActive = false;
              });
            },
          ),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Language Test',
          style: GoogleFonts.poppins(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: const Color(0xFF2193b0),
          ),
        ),
      ),
      body: Stack(
        children: [
          // Background gradient
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xFF2193b0),
                  Color(0xFF6dd5ed),
                ],
              ),
            ),
          ),
          
          // Main content
          Center(
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                _buildTestCard(
                  title: 'Listening Test',
                  icon: MaterialCommunityIcons.headphones,
                  description: 'Test your listening comprehension skills with audio questions',
                  onTap: _handleListeningTestStart,
                  isActive: _isListeningTestActive,
                ),
                const SizedBox(width: 32),
                _buildTestCard(
                  title: 'Reading Test',
                  icon: MaterialCommunityIcons.book_open_variant,
                  description: 'Evaluate your reading comprehension abilities',
                  onTap: _handleReadingTestStart,
                  isActive: _isReadingTestActive,
                ),
                const SizedBox(width: 32),
                _buildTestCard(
                  title: 'Grammar Test',
                  icon: MaterialCommunityIcons.format_text,
                  description: 'Check your grammar and language structure knowledge',
                  onTap: _handleGrammarTestStart,  // Update this line
                  isActive: _isGrammarTestActive,  // Update this line
                ),
              ],
            ),
          ),

          // Logout button
          Positioned(
            left: 24,
            bottom: 24,
            child: ElevatedButton.icon(
              onPressed: () => _showLogoutConfirmation(context),
              icon: Icon(
                Icons.logout,
                color: Colors.white,
              ),
              label: Text(
                'Logout',
                style: GoogleFonts.poppins(
                  color: Colors.white,
                  fontWeight: FontWeight.w600,
                ),
              ),
              style: ElevatedButton.styleFrom(
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                backgroundColor: Color(0xFF2193b0),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTestCard({
    required String title,
    required IconData icon,
    required String description,
    required VoidCallback onTap,
    required bool isActive,
  }) {
    String testType = title.toLowerCase().split(' ')[0];

    return FutureBuilder<bool>(
      future: _testSessionService.isTestCompleted(testType),
      builder: (context, snapshot) {
        bool isCompleted = snapshot.data ?? false;

        return MouseRegion(
          cursor: SystemMouseCursors.click,
          child: Card(
            elevation: 12, // Increased elevation
            shadowColor: Colors.black26, // Softer shadow
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(32), // More rounded corners
            ),
            child: Container(
              width: 360, // Slightly wider
              padding: const EdgeInsets.all(32), // More padding
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(32),
                gradient: isCompleted
                    ? LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          Colors.green.shade50,
                          Colors.green.shade100,
                        ],
                      )
                    : LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          Colors.white,
                          Colors.grey.shade50,
                        ],
                      ),
                border: Border.all(
                  color: isCompleted
                      ? Colors.green.shade300
                      : isActive
                          ? Color(0xFF2193b0).withOpacity(0.3)
                          : Colors.grey.shade200,
                  width: 2,
                ),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    padding: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: (isCompleted
                              ? Colors.green
                              : isActive
                                  ? Color(0xFF2193b0)
                                  : Colors.grey)
                          .withOpacity(0.1),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Row(
                      children: [
                        Icon(
                          icon,
                          size: 36, // Larger icon
                          color: isCompleted
                              ? Colors.green
                              : isActive
                                  ? Color(0xFF2193b0)
                                  : Colors.grey,
                        ),
                        SizedBox(width: 16),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                title,
                                style: GoogleFonts.poppins(
                                  fontSize: 26, // Larger font
                                  fontWeight: FontWeight.bold,
                                  color: isCompleted
                                      ? Colors.green
                                      : isActive
                                          ? Color(0xFF2193b0)
                                          : Colors.grey,
                                ),
                              ),
                              if (isCompleted || isActive)
                                Container(
                                  margin: EdgeInsets.only(top: 8),
                                  padding: EdgeInsets.symmetric(
                                      horizontal: 12, vertical: 6),
                                  decoration: BoxDecoration(
                                    color: (isCompleted
                                            ? Colors.green
                                            : Color(0xFF2193b0))
                                        .withOpacity(0.1),
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  child: Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Icon(
                                        isCompleted
                                            ? Icons.check_circle
                                            : Icons.timer,
                                        color: isCompleted
                                            ? Colors.green
                                            : Color(0xFF2193b0),
                                        size: 16,
                                      ),
                                      SizedBox(width: 6),
                                      Text(
                                        isCompleted ? 'Completed' : 'In Progress',
                                        style: GoogleFonts.poppins(
                                          fontSize: 14,
                                          color: isCompleted
                                              ? Colors.green
                                              : Color(0xFF2193b0),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 24),
                  Text(
                    description,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: Colors.grey[700],
                      height: 1.5, // Better line height
                    ),
                  ),
                  SizedBox(height: 32), // More spacing
                  ElevatedButton(
                    onPressed: isCompleted ? null : onTap,
                    style: ElevatedButton.styleFrom(
                      padding: EdgeInsets.zero,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(20), // More rounded
                      ),
                      elevation: 4, // Add elevation to button
                      disabledBackgroundColor: Colors.grey.shade200,
                    ),
                    child: Ink(
                      decoration: BoxDecoration(
                        gradient: isCompleted
                            ? null
                            : LinearGradient(
                                colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                                begin: Alignment.centerLeft,
                                end: Alignment.centerRight,
                              ),
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Container(
                        padding: EdgeInsets.symmetric(vertical: 16), // Taller button
                        alignment: Alignment.center,
                        child: Text(
                          isCompleted
                              ? 'Test Completed'
                              : isActive
                                  ? 'Continue Test'
                                  : 'Start Test',
                          style: GoogleFonts.poppins(
                            fontSize: 18, // Larger font
                            fontWeight: FontWeight.w600,
                            color: isCompleted ? Colors.grey : Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  // Add this new method for the enhanced logout confirmation dialog
  Future<void> _showLogoutConfirmation(BuildContext context) async {
    final bool? confirm = await showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          elevation: 16,
          child: Container(
            width: 400,
            padding: EdgeInsets.all(32),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Colors.white,
                  Colors.grey.shade50,
                ],
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Warning Icon
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.red.shade50,
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.warning_rounded,
                    size: 48,
                    color: Colors.red.shade400,
                  ),
                ),
                SizedBox(height: 24),
                
                // Title
                Text(
                  'Confirm Logout',
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2193b0),
                  ),
                ),
                SizedBox(height: 16),
                
                // Message
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.grey.shade200,
                    ),
                  ),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.info_outline,
                            color: Colors.grey[600],
                            size: 20,
                          ),
                          SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              'Are you sure you want to logout?',
                              style: GoogleFonts.poppins(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                color: Colors.grey[800],
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 12),
                      Text(
                        'Any active test progress will be lost and cannot be recovered.',
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          color: Colors.grey[600],
                          height: 1.5,
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 32),
                
                // Buttons
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    // Cancel Button
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(false),
                      style: TextButton.styleFrom(
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Text(
                        'Cancel',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[600],
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    
                    // Logout Button
                    ElevatedButton(
                      onPressed: () async {
                        try {
                          final prefs = await SharedPreferences.getInstance();
                          
                          // Reset completion status for all tests
                          await prefs.remove('listening_test_completed');
                          await prefs.remove('reading_test_completed');
                          await prefs.remove('grammar_test_completed');
                          
                          // Clear all test sessions
                          await _testSessionService.clearAllSessions();
                          
                          // Perform logout
                          await _authService.signOut();
                          
                          if (!mounted) return;
                          
                          // Navigate to login/registration page
                          Navigator.of(context).pushAndRemoveUntil(
                            MaterialPageRoute(builder: (context) => RegistrationPage()),
                            (route) => false,
                          );
                        } catch (e) {
                          print('Error during logout: $e');
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.zero,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Ink(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [Colors.red.shade400, Colors.red.shade600],
                            begin: Alignment.centerLeft,
                            end: Alignment.centerRight,
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Container(
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.logout, color: Colors.white),
                              SizedBox(width: 8),
                              Text(
                                'Logout',
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.white,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );

    if (confirm == true) {
      // Logout logic is now handled in the button's onPressed
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\instruction_page.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'home_page.dart'; // Make sure to import the HomePage

class InstructionPage extends StatefulWidget {
  const InstructionPage({super.key});

  @override
  State<InstructionPage> createState() => _InstructionPageState();
}

class _InstructionPageState extends State<InstructionPage> {
  final PageController _pageController = PageController();
  int _currentPage = 0;

  final List<InstructionSlide> _slides = [
    InstructionSlide(
      title: 'Listening Section',
      content: 'You will have 15 minutes to answer 20 audio questions. Each question has multiple choice answers (a, b, c, d).',
      icon: MaterialCommunityIcons.headphones,
    ),
    InstructionSlide(
      title: 'Reading Section',
      content: 'You will be presented with reading comprehension questions. Each question has multiple choice answers (a, b, c, d).',
      icon: MaterialCommunityIcons.book_open_variant,
    ),
    InstructionSlide(
      title: 'Time Management',
      content: 'Pay attention to the timer for each section. Make sure to answer all questions within the allotted time.',
      icon: MaterialCommunityIcons.clock_outline,
    ),
    // ... Ajoutez plus de diapositives si nÃ©cessaire
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFF2193b0),
              Color(0xFF6dd5ed),
            ],
          ),
        ),
        child: Row(
          children: [
            // Sidebar
            Container(
              width: 250,
              color: Colors.white.withOpacity(0.9),
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Instructions',
                    style: GoogleFonts.poppins(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFFFC6352),
                    ),
                  ),
                  const SizedBox(height: 40),
                  Expanded(
                    child: ListView.builder(
                      itemCount: _slides.length,
                      itemBuilder: (context, index) {
                        return _buildSidebarItem(
                          title: _slides[index].title,
                          isSelected: _currentPage == index,
                          onTap: () {
                            _pageController.animateToPage(
                              index,
                              duration: const Duration(milliseconds: 300),
                              curve: Curves.easeInOut,
                            );
                          },
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
            // Main content
            Expanded(
              child: Container(
                color: Colors.white.withOpacity(0.9),
                child: Column(
                  children: [
                    Expanded(
                      child: PageView.builder(
                        controller: _pageController,
                        itemCount: _slides.length,
                        onPageChanged: (int page) {
                          setState(() {
                            _currentPage = page;
                          });
                        },
                        itemBuilder: (context, index) {
                          return _buildSlide(_slides[index]);
                        },
                      ),
                    ),
                    // Navigation buttons
                    Container(
                      padding: const EdgeInsets.all(20),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          _buildNavigationButton(
                            onPressed: _currentPage > 0
                                ? () {
                                    _pageController.previousPage(
                                      duration: const Duration(milliseconds: 300),
                                      curve: Curves.easeInOut,
                                    );
                                  }
                                : null,
                            icon: Icons.arrow_back,
                            label: 'Previous',
                          ),
                          _buildNavigationButton(
                            onPressed: _currentPage < _slides.length - 1
                                ? () {
                                    _pageController.nextPage(
                                      duration: const Duration(milliseconds: 300),
                                      curve: Curves.easeInOut,
                                    );
                                  }
                                : () {
                                    Navigator.of(context).pushReplacement(
                                      MaterialPageRoute(builder: (context) => const HomePage()),
                                    );
                                  },
                            icon: _currentPage < _slides.length - 1 ? Icons.arrow_forward : Icons.play_arrow,
                            label: _currentPage < _slides.length - 1 ? 'Next' : 'Start Test',
                            isPrimary: true,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSidebarItem({
    required String title,
    required bool isSelected,
    required VoidCallback onTap,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 5),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(24),
        gradient: isSelected
            ? LinearGradient(
                colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                begin: Alignment.centerLeft,
                end: Alignment.centerRight,
              )
            : null,
      ),
      child: ListTile(
        title: Text(
          title,
          style: GoogleFonts.poppins(
            color: isSelected ? Colors.white : Colors.black87,
            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
          ),
        ),
        onTap: onTap,
      ),
    );
  }

  Widget _buildSlide(InstructionSlide slide) {
    return Padding(
      padding: const EdgeInsets.all(40),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            slide.icon,
            size: 100,
            color: const Color(0xFF2193b0),
          ),
          const SizedBox(height: 40),
          Text(
            slide.title,
            style: GoogleFonts.poppins(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: const Color(0xFF2193b0),
            ),
          ),
          const SizedBox(height: 20),
          Text(
            slide.content,
            textAlign: TextAlign.center,
            style: GoogleFonts.poppins(fontSize: 18),
          ),
        ],
      ),
    );
  }

  Widget _buildNavigationButton({
    required VoidCallback? onPressed,
    required IconData icon,
    required String label,
    bool isPrimary = false,
  }) {
    return ElevatedButton(
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        padding: EdgeInsets.zero,
        backgroundColor: Colors.transparent,
        foregroundColor: Colors.white,
        shadowColor: Colors.transparent,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(24),
        ),
      ),
      child: Ink(
        decoration: BoxDecoration(
          gradient: isPrimary
              ? LinearGradient(
                  colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                  begin: Alignment.centerLeft,
                  end: Alignment.centerRight,
                )
              : null,
          color: isPrimary ? null : Colors.grey[300],
          borderRadius: BorderRadius.circular(24),
        ),
        child: Container(
          height: 48,
          padding: EdgeInsets.symmetric(horizontal: 20),
          alignment: Alignment.center,
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(icon, color: isPrimary ? Colors.white : Colors.black87),
              SizedBox(width: 10),
              Text(
                label,
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  color: isPrimary ? Colors.white : Colors.black87,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class InstructionSlide {
  final String title;
  final String content;
  final IconData icon;

  InstructionSlide({
    required this.title,
    required this.content,
    required this.icon,
  });
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\listening_test_page.dart
import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:just_audio/just_audio.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'dart:io' show Platform;

import 'package:test_windows_students/screens/listening_test_results_page.dart';
import 'package:test_windows_students/services/auth_service.dart';
import 'package:test_windows_students/services/test_results_service.dart';
import 'package:test_windows_students/models/test_result.dart';
import 'package:test_windows_students/services/test_session_service.dart';

// Add this class before ListeningTestPage class
class CustomTrackShape extends RoundedRectSliderTrackShape {
  @override
  Rect getPreferredRect({
    required RenderBox parentBox,
    Offset offset = Offset.zero,
    required SliderThemeData sliderTheme,  // Changed from SliderTheme to SliderThemeData
    bool isEnabled = false,
    bool isDiscrete = false,
  }) {
    final double? trackHeight = sliderTheme.trackHeight;  // Removed .data since SliderThemeData already has trackHeight
    final double trackLeft = offset.dx;
    final double trackTop = offset.dy + (parentBox.size.height - (trackHeight ?? 4)) / 2;
    final double trackWidth = parentBox.size.width;
    return Rect.fromLTWH(trackLeft, trackTop, trackWidth, trackHeight ?? 4);
  }
}

class ListeningTestPage extends StatefulWidget {
  final Duration? remainingTime;
  final String firstName;
  final String lastName;
  
  const ListeningTestPage({
    Key? key, 
    this.remainingTime,
    required this.firstName,
    required this.lastName,
  }) : super(key: key);

  @override
  _ListeningTestPageState createState() => _ListeningTestPageState();
}

class _ListeningTestPageState extends State<ListeningTestPage> {
  late final AudioPlayer _audioPlayer;
  int _currentQuestionIndex = 0;
  String? _selectedAnswer;
  bool _isPlaying = false;
  Duration _duration = Duration.zero;
  Duration _position = Duration.zero;
  final int _totalTimeInMinutes = 15;
  late Timer _timer;
  // Initialize _remainingTime here
  Duration _remainingTime = Duration(minutes: 15);
  double _progress = 1.0;
  // Add these properties to your _ListeningTestPageState class
  Duration _bufferedPosition = Duration.zero;
  bool _isSeeking = false;
  double? _dragValue;
  // Add this property to _ListeningTestPageState
  List<String?> _userAnswers = [];
  // Add these controllers at the top of your _ListeningTestPageState class
  final TextEditingController _firstNameController = TextEditingController();
  final TextEditingController _lastNameController = TextEditingController();
  final TestSessionService _testSessionService = TestSessionService();

  // Example question data structure
  final List<Map<String, dynamic>> _questions = [
    {
      'audioUrl': 'assets/audio/situation1.mp3',
      'question': 'Situation 1: Emily and Jason are talking about work.\nWhat is true about Emily?',
      'options': [
        'A) Works at a cafÃ©',
        'B) Never goes to the mall',
        'C) Works every weekend',
        'D) Goes to the mall every day'
      ],
      'correctAnswer': 'A) Works at a cafÃ©',
    },
    {
      'audioUrl': 'assets/audio/situation2.mp3',
      'question': 'Situation 2: Jessica is buying clothes.\nWhat is true about Jessica?',
      'options': [
        'A) Is buying a dress and a skirt',
        'B) Thinks the skirts are expensive',
        'C) Can\'t find a red skirt',
        'D) Pays \$30 for the skirt'
      ],
      'correctAnswer': 'D) Pays \$30 for the skirt',
    },
  ];

  @override
  void initState() {
    super.initState();
    _audioPlayer = AudioPlayer();
    _loadNewAudio();
    
    // Initialize timer based on remaining time from storage
    _initializeTimer();
  }

  void _initializeTimer() async {
    final remainingTime = await _testSessionService.getListeningRemainingTime();
    
    if (remainingTime == null || remainingTime.inSeconds <= 0) {
      _handleTimeUp();
      return;
    }

    setState(() {
      _remainingTime = remainingTime;
      _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
    });

    _startTimer();
  }

  void _startTimer() {
    const oneSecond = Duration(seconds: 1);
    _timer = Timer.periodic(oneSecond, (timer) async {
      final remainingTime = await _testSessionService.getListeningRemainingTime();
      
      if (mounted) {
        if (remainingTime == null || remainingTime.inSeconds <= 0) {
          _timer.cancel();
          _handleTimeUp();
          return;
        }

        setState(() {
          _remainingTime = remainingTime;
          _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
        });
      }
    });
  }

  Future<void> _loadNewAudio() async {
    try {
      // Reset states
      setState(() {
        _position = Duration.zero;
        _bufferedPosition = Duration.zero;
        _duration = Duration.zero;
        _isPlaying = false;
      });

      // Stop current audio if playing
      await _audioPlayer.stop();
      
      // Load the new audio file
      final audioSource = AudioSource.asset(_questions[_currentQuestionIndex]['audioUrl']);
      await _audioPlayer.setAudioSource(audioSource, preload: true);
      
      // Get new duration
      _duration = await _audioPlayer.duration ?? Duration.zero;

      // Add stream listeners
      _audioPlayer.positionStream.listen((position) {
        if (mounted) {
          setState(() {
            _position = position;
          });
        }
      });

      _audioPlayer.bufferedPositionStream.listen((bufferedPosition) {
        if (mounted) {
          setState(() {
            _bufferedPosition = bufferedPosition;
          });
        }
      });

      _audioPlayer.playerStateStream.listen((playerState) {
        if (mounted) {
          setState(() {
            _isPlaying = playerState.playing;
          });
        }
      });
      
      setState(() {}); // Update UI with new duration
    } catch (e) {
      print('Error loading new audio: $e');
    }
  }

  Future<void> _handlePlayPause() async {
    try {
      if (_isPlaying) {
        await _audioPlayer.pause();
      } else {
        await _audioPlayer.play();
      }
    } catch (e) {
      print('Error playing/pausing audio: $e');
    }
  }

  void _handleTimeUp() async {
    _timer.cancel();  // Stop the timer
    await _testSessionService.endListeningTest();
    await _testSessionService.markTestAsCompleted('listening');  // Mark as completed
    
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          title: Text(
            'Time\'s Up!',
            style: GoogleFonts.poppins(
              fontWeight: FontWeight.bold,
              color: Color(0xFF2193b0),
            ),
          ),
          content: Text(
            'Your time for the listening test has ended.',
            style: GoogleFonts.poppins(),
          ),
          actions: [
            TextButton(
              child: Text(
                'View Results',
                style: GoogleFonts.poppins(
                  color: Color(0xFF2193b0),
                  fontWeight: FontWeight.w600,
                ),
              ),
              onPressed: () {
                // Navigate to results page
                Navigator.of(context).pop();
                // Add your navigation logic here
              },
            ),
          ],
        );
      },
    );
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    _timer.cancel();
    _firstNameController.dispose();
    _lastNameController.dispose();
    // Remove this line to keep the test active when leaving the page
    // _testSessionService.endListeningTest();
    super.dispose();
  }

  // Update the dialog method
  Future<bool?> _showNameInputDialog(BuildContext context) {
    return showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          // Make dialog wider for desktop
          child: Container(
            width: MediaQuery.of(context).size.width * 0.4, // 40% of screen width
            child: Padding(
              padding: const EdgeInsets.all(32.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.stretch, // Stretch children
                children: [
                  Row(
                    children: [
                      Icon(
                        Icons.person_outline,
                        size: 32,
                        color: Color(0xFF2193b0),
                      ),
                      SizedBox(width: 16),
                      Text(
                        'Enter Your Name',
                        style: GoogleFonts.poppins(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF2193b0),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 32),
                  // First Name field with enhanced styling
                  TextField(
                    controller: _firstNameController,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                    decoration: InputDecoration(
                      labelText: 'First Name',
                      labelStyle: GoogleFonts.poppins(
                        color: Colors.grey[600],
                        fontSize: 16,
                      ),
                      prefixIcon: Icon(
                        Icons.person,
                        color: Color(0xFF2193b0),
                      ),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(width: 2),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Color(0xFF2193b0),
                          width: 2,
                        ),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Colors.grey[300]!,
                          width: 2,
                        ),
                      ),
                      filled: true,
                      fillColor: Colors.grey[50],
                      contentPadding: EdgeInsets.symmetric(
                        horizontal: 24,
                        vertical: 16,
                      ),
                    ),
                  ),
                  SizedBox(height: 24),
                  // Last Name field with enhanced styling
                  TextField(
                    controller: _lastNameController,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: Colors.black87,
                    ),
                    decoration: InputDecoration(
                      labelText: 'Last Name',
                      labelStyle: GoogleFonts.poppins(
                        color: Colors.grey[600],
                        fontSize: 16,
                      ),
                      prefixIcon: Icon(
                        Icons.person_outline,
                        color: Color(0xFF2193b0),
                      ),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(width: 2),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Color(0xFF2193b0),
                          width: 2,
                        ),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                        borderSide: BorderSide(
                          color: Colors.grey[300]!,
                          width: 2,
                        ),
                      ),
                      filled: true,
                      fillColor: Colors.grey[50],
                      contentPadding: EdgeInsets.symmetric(
                        horizontal: 24,
                        vertical: 16,
                      ),
                    ),
                  ),
                  SizedBox(height: 32),
                  // Buttons with enhanced styling
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      // Cancel button
                      MouseRegion(
                        cursor: SystemMouseCursors.click,
                        child: TextButton(
                          onPressed: () => Navigator.of(context).pop(false),
                          style: TextButton.styleFrom(
                            padding: EdgeInsets.symmetric(
                              horizontal: 24,
                              vertical: 16,
                            ),
                          ),
                          child: Text(
                            'Cancel',
                            style: GoogleFonts.poppins(
                              fontSize: 16,
                              color: Colors.grey[600],
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ),
                      SizedBox(width: 16),
                      // Continue button
                      MouseRegion(
                        cursor: SystemMouseCursors.click,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Color(0xFF2193b0),
                            padding: EdgeInsets.symmetric(
                              horizontal: 32,
                              vertical: 16,
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            elevation: 0,
                          ),
                          onPressed: () {
                            if (_firstNameController.text.isNotEmpty && 
                                _lastNameController.text.isNotEmpty) {
                              Navigator.of(context).pop(true);
                            } else {
                              // Show error message if fields are empty
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text(
                                    'Please enter both first and last name',
                                    style: GoogleFonts.poppins(),
                                  ),
                                  backgroundColor: Colors.red,
                                  behavior: SnackBarBehavior.floating,
                                  margin: EdgeInsets.all(16),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                ),
                              );
                            }
                          },
                          child: Text(
                            'Continue',
                            style: GoogleFonts.poppins(
                              fontSize: 16,
                              color: Colors.white,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        elevation: 0,  // Remove shadow
        backgroundColor: Colors.white,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back_ios_new,
            color: Color(0xFF2193b0),
          ),
          onPressed: () {
            // Don't end the test when going back
            Navigator.of(context).pop();
          },
        ),
        title: Row(
          children: [
            Icon(
              MaterialCommunityIcons.headphones,
              color: Color(0xFF2193b0),
              size: 28,
            ),
            SizedBox(width: 12),
            Text(
              'Listening Test',
              style: GoogleFonts.poppins(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Color(0xFF2193b0),
              ),
            ),
          ],
        ),
        centerTitle: false,
        actions: [
          Container(
            margin: EdgeInsets.only(right: 16),
            padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            decoration: BoxDecoration(
              border: Border.all(color: Color(0xFF2193b0)),
              borderRadius: BorderRadius.circular(20),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.help_outline,
                  color: Color(0xFF2193b0),
                  size: 20,
                ),
                SizedBox(width: 8),
                Text(
                  'Help',
                  style: GoogleFonts.poppins(
                    color: Color(0xFF2193b0),
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
        ],
        toolbarHeight: 72, // Added to match other tests
      ),
      body: Column(
        children: [
          // Main content - updated layout
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                ),
              ),
              child: Padding(
                padding: const EdgeInsets.all(32.0),
                child: Row(
                  children: [
                    // Left panel - Question, Audio Controls and Timer
                    Expanded(
                      flex: 2,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          // Question and Audio Controls Card (Upper)
                          Expanded(
                            flex: 4,
                            child: Card(
                              margin: EdgeInsets.zero,
                              elevation: 8,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(24),
                              ),
                              child: Padding(
                                padding: const EdgeInsets.all(24.0),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'Question ${_currentQuestionIndex + 1} of ${_questions.length}',
                                      style: GoogleFonts.poppins(
                                        fontSize: 20,
                                        color: Colors.grey[600],
                                      ),
                                    ),
                                    SizedBox(height: 24),
                                    Text(
                                      _questions[_currentQuestionIndex]['question'],
                                      style: GoogleFonts.poppins(
                                        fontSize: 24,
                                        fontWeight: FontWeight.bold,
                                        color: const Color(0xFF2193b0),
                                      ),
                                    ),
                                    Spacer(),
                                    // Audio controls
                                    Container(
                                      padding: EdgeInsets.symmetric(horizontal: 24),  // Add padding to container
                                      child: Column(
                                        children: [
                                          // Buffered and played progress bar
                                          Container(
                                            height: 36,  // Fixed height for better touch target
                                            child: Stack(
                                              alignment: Alignment.center,  // Center align the sliders
                                              children: [
                                                // Buffered progress
                                                SliderTheme(
                                                  data: SliderThemeData(
                                                    trackHeight: 4,
                                                    thumbShape: RoundSliderThumbShape(enabledThumbRadius: 0),
                                                    overlayShape: RoundSliderOverlayShape(overlayRadius: 0),
                                                    trackShape: CustomTrackShape(),
                                                    // Add these to constrain the buffered track
                                                    rangeTrackShape: RoundedRectRangeSliderTrackShape(),
                                                    showValueIndicator: ShowValueIndicator.never,
                                                  ),
                                                  child: Slider(
                                                    value: min(_bufferedPosition.inSeconds.toDouble(), _duration.inSeconds.toDouble()),
                                                    max: _duration.inSeconds.toDouble(),
                                                    onChanged: null,
                                                    activeColor: Color(0xFF2193b0).withOpacity(0.24),
                                                    inactiveColor: Colors.grey.shade200,
                                                  ),
                                                ),
                                                // Playback progress
                                                SliderTheme(
                                                  data: SliderThemeData(
                                                    trackHeight: 4,
                                                    thumbShape: RoundSliderThumbShape(enabledThumbRadius: 8),
                                                    overlayShape: RoundSliderOverlayShape(overlayRadius: 16),
                                                    trackShape: CustomTrackShape(),
                                                    activeTrackColor: Color(0xFF2193b0),
                                                    inactiveTrackColor: Colors.transparent,
                                                    thumbColor: Color(0xFF2193b0),
                                                    overlayColor: Color(0xFF2193b0).withOpacity(0.12),
                                                  ),
                                                  child: Slider(
                                                    value: min(_isSeeking 
                                                        ? _dragValue ?? _position.inSeconds.toDouble() 
                                                        : _position.inSeconds.toDouble(),
                                                        _duration.inSeconds.toDouble()),
                                                    max: _duration.inSeconds.toDouble(),
                                                    onChanged: (value) {
                                                      setState(() {
                                                        _dragValue = value;
                                                        _isSeeking = true;
                                                      });
                                                    },
                                                    onChangeEnd: (value) async {
                                                      try {
                                                        final position = Duration(seconds: value.toInt());
                                                        await _audioPlayer.seek(position);
                                                        setState(() {
                                                          _dragValue = null;
                                                          _isSeeking = false;
                                                        });
                                                      } catch (e) {
                                                        print('Error seeking audio: $e');
                                                      }
                                                    },
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                          // Time indicators with proper padding
                                          Padding(
                                            padding: const EdgeInsets.symmetric(horizontal: 12),
                                            child: Row(
                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                              children: [
                                                Text(
                                                  _formatDuration(_position),
                                                  style: GoogleFonts.poppins(
                                                    color: Colors.grey[600],
                                                    fontSize: 12,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                                Text(
                                                  _formatDuration(_duration),
                                                  style: GoogleFonts.poppins(
                                                    color: Colors.grey[600],
                                                    fontSize: 12,
                                                    fontWeight: FontWeight.w500,
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                          SizedBox(height: 8),
                                          // Play/Pause and Replay buttons
                                          Row(
                                            mainAxisAlignment: MainAxisAlignment.center,
                                            children: [
                                              IconButton(
                                                iconSize: 48,
                                                icon: AnimatedSwitcher(
                                                  duration: Duration(milliseconds: 200),
                                                  transitionBuilder: (child, animation) => ScaleTransition(
                                                    scale: animation,
                                                    child: child,
                                                  ),
                                                  child: Icon(
                                                    _isPlaying ? Icons.pause_circle_filled : Icons.play_circle_filled,
                                                    key: ValueKey<bool>(_isPlaying),
                                                    size: 48,
                                                    color: Color(0xFF2193b0),
                                                  ),
                                                ),
                                                onPressed: _handlePlayPause,
                                              ),
                                              SizedBox(width: 16),
                                              IconButton(
                                                iconSize: 48,
                                                icon: Icon(
                                                  Icons.replay_circle_filled,
                                                  size: 48,
                                                  color: Color(0xFF2193b0),
                                                ),
                                                onPressed: () async {
                                                  await _audioPlayer.seek(Duration.zero);
                                                  if (!_isPlaying) {
                                                    await _audioPlayer.play();
                                                  }
                                                },
                                              ),
                                            ],
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                          SizedBox(height: 16),
                          // Timer Card (Lower)
                          Card(
                            margin: EdgeInsets.zero,
                            elevation: 8,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(24),
                            ),
                            child: Padding(
                              padding: EdgeInsets.all(24),
                              child: Row(
                                children: [
                                  Icon(
                                    Icons.timer_outlined,
                                    color: _remainingTime.inMinutes < 5 
                                        ? Colors.red 
                                        : Color(0xFF2193b0),
                                    size: 28,
                                  ),
                                  SizedBox(width: 16),
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        Text(
                                          'Time Remaining',
                                          style: GoogleFonts.poppins(
                                            fontSize: 16,
                                            fontWeight: FontWeight.w500,
                                            color: Colors.grey[600],
                                          ),
                                        ),
                                        SizedBox(height: 8),
                                        Text(
                                          _formatTime(_remainingTime),
                                          style: GoogleFonts.poppins(
                                            fontSize: 24,
                                            fontWeight: FontWeight.bold,
                                            color: _remainingTime.inMinutes < 5 
                                                ? Colors.red 
                                                : Color(0xFF2193b0),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  Expanded(
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(10),
                                      child: LinearProgressIndicator(
                                        value: _progress,
                                        backgroundColor: Colors.grey.shade200,
                                        valueColor: AlwaysStoppedAnimation<Color>(
                                          _remainingTime.inMinutes < 5 
                                              ? Colors.red 
                                              : Color(0xFF2193b0),
                                        ),
                                        minHeight: 12,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    SizedBox(width: 32),
                    // Right panel - Answer options
                    Expanded(
                      child: Card(
                        elevation: 8,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(24),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.only(left: 24.0, top: 24.0, bottom: 24.0, right: 8.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.stretch,
                            children: [
                              Text(
                                'Select your answer:',
                                style: GoogleFonts.poppins(
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                  color: const Color(0xFF2193b0),
                                ),
                              ),
                              const SizedBox(height: 24),
                              Expanded(
                                child: Scrollbar(
                                  thickness: 8,
                                  radius: Radius.circular(4),
                                  thumbVisibility: true,
                                  child: SingleChildScrollView(
                                    child: Padding(
                                      padding: const EdgeInsets.only(right: 16.0),
                                      child: Column(
                                        crossAxisAlignment: CrossAxisAlignment.stretch,
                                        mainAxisSize: MainAxisSize.min,
                                        children: [
                                          ..._questions[_currentQuestionIndex]['options']
                                              .map<Widget>((option) => Padding(
                                                    padding: const EdgeInsets.only(bottom: 16),
                                                    child: Container(
                                                      decoration: BoxDecoration(
                                                        borderRadius: BorderRadius.circular(24),
                                                        border: Border.all(
                                                          color: _selectedAnswer == option 
                                                              ? Color(0xFF2193b0) 
                                                              : Colors.grey.shade300,
                                                          width: 2,
                                                        ),
                                                      ),
                                                      child: InkWell(
                                                        borderRadius: BorderRadius.circular(24),
                                                        onTap: () {
                                                          setState(() {
                                                            _selectedAnswer = option;
                                                          });
                                                        },
                                                        child: Container(
                                                          padding: EdgeInsets.all(16),
                                                          decoration: BoxDecoration(
                                                            borderRadius: BorderRadius.circular(24),
                                                            gradient: _selectedAnswer == option
                                                                ? LinearGradient(
                                                                    colors: [
                                                                      Color(0xFF2193b0).withOpacity(0.1),
                                                                      Color(0xFF6dd5ed).withOpacity(0.1)
                                                                    ],
                                                                    begin: Alignment.centerLeft,
                                                                    end: Alignment.centerRight,
                                                                  )
                                                                : null,
                                                          ),
                                                          child: Row(
                                                            children: [
                                                              Container(
                                                                width: 24,
                                                                height: 24,
                                                                decoration: BoxDecoration(
                                                                  shape: BoxShape.circle,
                                                                  border: Border.all(
                                                                    color: _selectedAnswer == option 
                                                                        ? Color(0xFF2193b0) 
                                                                        : Colors.grey.shade400,
                                                                    width: 2,
                                                                  ),
                                                                  color: _selectedAnswer == option 
                                                                      ? Color(0xFF2193b0) 
                                                                      : Colors.transparent,
                                                                ),
                                                                child: _selectedAnswer == option
                                                                    ? Icon(
                                                                        Icons.check,
                                                                        size: 16,
                                                                        color: Colors.white,
                                                                      )
                                                                    : null,
                                                              ),
                                                              SizedBox(width: 16),
                                                              Expanded(
                                                                child: Text(
                                                                  option,
                                                                  style: GoogleFonts.poppins(
                                                                    fontSize: 16,
                                                                    color: _selectedAnswer == option 
                                                                        ? Color(0xFF2193b0) 
                                                                        : Colors.black87,
                                                                    fontWeight: _selectedAnswer == option 
                                                                        ? FontWeight.w600 
                                                                        : FontWeight.normal,
                                                                  ),
                                                                ),
                                                              ),
                                                            ],
                                                          ),
                                                        ),
                                                      ),
                                                    ),
                                                  ))
                                              .toList(),
                                        ],
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                              SizedBox(height: 32),
                              ElevatedButton(
                                style: ElevatedButton.styleFrom(
                                  padding: EdgeInsets.zero,
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(24),
                                  ),
                                ),
                                onPressed: _selectedAnswer != null
                                    ? () async {
                                        if (_currentQuestionIndex < _questions.length - 1) {
                                          // Store the answer and continue to next question
                                          _userAnswers.add(_selectedAnswer);
                                          setState(() {
                                            _currentQuestionIndex++;
                                            _selectedAnswer = null;
                                          });
                                          await _loadNewAudio();
                                        } else {
                                          // Stop the timer when finishing the test
                                          _timer.cancel();
                                          
                                          // Store the last answer
                                          _userAnswers.add(_selectedAnswer);
                                          
                                          // Calculate score
                                          int score = 0;
                                          for (int i = 0; i < _questions.length; i++) {
                                            if (_userAnswers[i] == _questions[i]['correctAnswer']) {
                                              score++;
                                            }
                                          }
                                          
                                          // Mark test as completed
                                          await _testSessionService.endListeningTest();
                                          await _testSessionService.markTestAsCompleted('listening');
                                          
                                          // Save test result
                                          final authService = AuthService();
                                          final testResultsService = TestResultsService(authService.projectId);
                                          
                                          final result = TestResult(
                                            userId: authService.getUserId() ?? 'anonymous',
                                            firstName: widget.firstName,  // Use the firstName passed to widget
                                            lastName: widget.lastName,    // Use the lastName passed to widget
                                            testType: 'Listening Test',
                                            score: score,
                                            totalQuestions: _questions.length,
                                            timestamp: DateTime.now(),
                                          );
                                          
                                          try {
                                            await testResultsService.saveTestResult(result);
                                            
                                            // Navigate to results page
                                            if (!mounted) return;
                                            Navigator.of(context).pushReplacement(
                                              MaterialPageRoute(
                                                builder: (context) => ListeningTestResultsPage(
                                                  score: score,
                                                  totalQuestions: _questions.length,
                                                  questions: _questions,
                                                  userAnswers: _userAnswers,
                                                  firstName: widget.firstName,  // Use the firstName passed to widget
                                                  lastName: widget.lastName,    // Use the lastName passed to widget
                                                ),
                                              ),
                                            );
                                          } catch (e) {
                                            if (!mounted) return;
                                            ScaffoldMessenger.of(context).showSnackBar(
                                              SnackBar(content: Text('Failed to save test result')),
                                            );
                                          }
                                        }
                                      }
                                    : null,
                                child: Ink(
                                  decoration: BoxDecoration(
                                    gradient: LinearGradient(
                                      colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                                      begin: Alignment.centerLeft,
                                      end: Alignment.centerRight,
                                    ),
                                    borderRadius: BorderRadius.circular(24),
                                  ),
                                  child: Container(
                                    height: 48,
                                    alignment: Alignment.center,
                                    child: Text(
                                      _currentQuestionIndex < _questions.length - 1
                                          ? 'Next Question'
                                          : 'Finish Test',
                                      style: GoogleFonts.poppins(
                                        fontSize: 16,
                                        color: Colors.white,
                                        fontWeight: FontWeight.w600,
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Add this method to format the remaining time
  String _formatTime(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }

  // Add these helper methods to your _ListeningTestPageState class
  String _formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\listening_test_results_page.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';

class ListeningTestResultsPage extends StatelessWidget {
  final int score;
  final int totalQuestions;
  final List<Map<String, dynamic>> questions;
  final List<String?> userAnswers;
  final String firstName;
  final String lastName;

  const ListeningTestResultsPage({
    Key? key,
    required this.score,
    required this.totalQuestions,
    required this.questions,
    required this.userAnswers,
    required this.firstName,
    required this.lastName,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final percentage = (score / totalQuestions) * 100;
    final grade = _calculateGrade(percentage);
    final size = MediaQuery.of(context).size;

    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Row(  // Changed to Row for desktop layout
          children: [
            // Left Side Panel
            Container(
              width: 280,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                ),
              ),
              padding: EdgeInsets.all(20),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircleAvatar(
                    radius: 50,
                    backgroundColor: Colors.white,
                    child: Text(
                      '${percentage.toStringAsFixed(0)}%',
                      style: GoogleFonts.poppins(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2193b0),
                      ),
                    ),
                  ),
                  SizedBox(height: 16),
                  Text(
                    grade,
                    style: GoogleFonts.poppins(
                      fontSize: 24,
                      fontWeight: FontWeight.w500,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    '$firstName $lastName',
                    style: GoogleFonts.poppins(
                      fontSize: 18,
                      color: Colors.white.withOpacity(0.9),
                    ),
                  ),
                ],
              ),
            ),

            // Main Content Area
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(32),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Test Results',
                      style: GoogleFonts.poppins(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2193b0),
                      ),
                    ),
                    SizedBox(height: 32),
                    
                    // Stats Cards in a row
                    Row(
                      children: [
                        Expanded(child: _buildStatCard('Correct', score, Icons.check_circle_outline, Colors.green)),
                        SizedBox(width: 16),
                        Expanded(child: _buildStatCard('Wrong', totalQuestions - score, Icons.cancel_outlined, Colors.red)),
                        SizedBox(width: 16),
                        Expanded(child: _buildStatCard('Total', totalQuestions, Icons.assignment_outlined, Color(0xFF2193b0))),
                      ],
                    ),
                    
                    SizedBox(height: 32),
                    
                    // Performance Insights Card
                    Card(
                      elevation: 0,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16),
                        side: BorderSide(color: Colors.grey.shade200),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(24),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Performance Insights',
                              style: GoogleFonts.poppins(
                                fontSize: 20,
                                fontWeight: FontWeight.w600,
                                color: Color(0xFF2193b0),
                              ),
                            ),
                            SizedBox(height: 16),
                            _buildInsightRow('Accuracy', '${percentage.toStringAsFixed(0)}%'),
                            _buildInsightRow('Questions Attempted', '$totalQuestions'),
                            _buildInsightRow('Time Spent', '15:00'),
                          ],
                        ),
                      ),
                    ),
                    
                    SizedBox(height: 32),
                    
                    // Return Home Button
                    Align(
                      alignment: Alignment.centerRight,
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.of(context).pushNamedAndRemoveUntil('/home', (route) => false);
                        },
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                          backgroundColor: Color(0xFF2193b0),
                          elevation: 0,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: Text(
                          'Return Home',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatCard(String title, int value, IconData icon, Color color) {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 32),
          SizedBox(height: 12),
          Text(
            value.toString(),
            style: GoogleFonts.poppins(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            title,
            style: GoogleFonts.poppins(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInsightRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: GoogleFonts.poppins(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
          Text(
            value,
            style: GoogleFonts.poppins(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Colors.grey[800],
            ),
          ),
        ],
      ),
    );
  }

  String _calculateGrade(double percentage) {
    if (percentage >= 90) return 'Excellent';
    if (percentage >= 80) return 'Very Good';
    if (percentage >= 70) return 'Good';
    if (percentage >= 60) return 'Fair';
    return 'Need Practice';
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\reading_test_page.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';
import 'package:test_windows_students/services/auth_service.dart';
import 'package:test_windows_students/services/test_results_service.dart';
import 'package:test_windows_students/models/test_result.dart';
import 'package:test_windows_students/screens/reading_test_results_page.dart';
import 'package:test_windows_students/services/test_session_service.dart';  // Add this import

class ReadingTestPage extends StatefulWidget {
  final Duration? remainingTime;
  final String firstName;
  final String lastName;
  final VoidCallback? onTestComplete;  // Add this line
  
  const ReadingTestPage({
    Key? key, 
    this.remainingTime,
    required this.firstName,
    required this.lastName,
    this.onTestComplete,  // Add this line
  }) : super(key: key);

  @override
  _ReadingTestPageState createState() => _ReadingTestPageState();
}

class _ReadingTestPageState extends State<ReadingTestPage> {
  int _currentQuestionIndex = 0;
  String? _selectedAnswer;
  final int _totalTimeInMinutes = 20; // 20 minutes for the reading test
  late Timer _timer;
  late Duration _remainingTime;
  double _progress = 1.0;
  final TestSessionService _testSessionService = TestSessionService();  // Add this

  // Example reading passage and questions
  final List<Map<String, dynamic>> _readingTests = [
    {
       'passage': '''Passage 1: An email
Subject: Greetings from Florida!
Hi, Sara.
I'm visiting my sister in Florida. It's very warm and nice here. Every morning, I go to the beach and swim.
Sometimes my sister comes home early, and we play tennis in the afternoon. And we always go for a long walk after that. I'm having a great time!
Love,
Heather''',
      'questions': [
        {
          'question': 'Heather every day:',
          'options': [
            'A) swims',
            'B) plays tennis',
            'C) comes home early',
            'D) walks with her sister'
          ],
          'correctAnswer': 'A) swims'
        }
      ]
    },
    {
      'passage': '''Passage 2: Helen is getting married and I'm tired
This has been a crazy week! One of my friends is getting married on Saturday, and I'm helping her with the reception.
It's not going to be a big party, but I still have to do a lot of things. For example, I chose the songs last week, but the band is playing them for me tonight. I bought the flowers today, but I have to pick them up on Friday.
I'm tired. Can someone help me, please?!''',
      'questions': [
        {
          'question': 'The writer:',
          'options': [
            'A) is singing tonight',
            'B) is buying flowers on Friday',
            'C) listened to a band a week ago',
            'D) is going to a party this weekend'
          ],
          'correctAnswer': 'D) is going to a party this weekend'
        }
      ]
    }
  ];

  int _currentExerciseIndex = 0;
  
  // Update these getters to access current exercise
  String get _currentPassage => _readingTests[_currentExerciseIndex]['passage'];
  List<Map<String, dynamic>> get _currentQuestions => 
      _readingTests[_currentExerciseIndex]['questions'];

  // Add this getter for _isLastExercise
  bool get _isLastExercise => _currentExerciseIndex == _readingTests.length - 1;

  // Add this property to track user answers
  List<String?> _userAnswers = [];

  // Add this getter for _isLastQuestion
  bool get _isLastQuestion => 
      _currentQuestionIndex == _currentQuestions.length - 1 && 
      _currentExerciseIndex == _readingTests.length - 1;

  // Add the _showNameInputDialog method
  Future<bool?> _showNameInputDialog(BuildContext context) {
    return showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          child: Container(
            width: MediaQuery.of(context).size.width * 0.4,
            padding: const EdgeInsets.all(32.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.person_outline,
                      size: 32,
                      color: Color(0xFF2193b0),
                    ),
                    SizedBox(width: 16),
                    Text(
                      'Enter Your Name',
                      style: GoogleFonts.poppins(
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2193b0),
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 32),
                TextField(
                  controller: _firstNameController,
                  decoration: InputDecoration(
                    labelText: 'First Name',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                ),
                SizedBox(height: 16),
                TextField(
                  controller: _lastNameController,
                  decoration: InputDecoration(
                    labelText: 'Last Name',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                ),
                SizedBox(height: 32),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(false),
                      child: Text('Cancel'),
                    ),
                    SizedBox(width: 16),
                    ElevatedButton(
                      onPressed: () {
                        if (_firstNameController.text.isNotEmpty && 
                            _lastNameController.text.isNotEmpty) {
                          Navigator.of(context).pop(true);
                        }
                      },
                      child: Text('Continue'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // Add these controllers at the top of your _ReadingTestPageState class
  final TextEditingController _firstNameController = TextEditingController();
  final TextEditingController _lastNameController = TextEditingController();

  // Update the Next button handler
  void _handleNextExercise() {
    if (_selectedAnswer == null) return;

    setState(() {
      if (_currentExerciseIndex < _readingTests.length - 1) {
        // Move to next exercise
        _currentExerciseIndex++;
        _selectedAnswer = null;
      }
    });
  }

  @override
  void initState() {
    super.initState();
    _initializeTimer();
    _userAnswers = List.filled(_getTotalQuestions(), null);
  }

  Future<void> _initializeTimer() async {
    // Get remaining time from storage
    final remainingTime = await _testSessionService.getReadingRemainingTime();
    if (remainingTime != null) {
      setState(() {
        _remainingTime = remainingTime;
        _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
      });
    } else {
      setState(() {
        _remainingTime = Duration(minutes: _totalTimeInMinutes);
        _progress = 1.0;
      });
    }
    _startTimer();
  }

  void _startTimer() {
    const oneSecond = Duration(seconds: 1);
    _timer = Timer.periodic(oneSecond, (timer) async {
      final remainingTime = await _testSessionService.getReadingRemainingTime();
      
      if (remainingTime == null || remainingTime.inSeconds <= 0) {
        _timer.cancel();
        _handleTimeUp();
        return;
      }

      setState(() {
        _remainingTime = remainingTime;
        _progress = _remainingTime.inSeconds / (_totalTimeInMinutes * 60);
      });
    });
  }

  void _handleTimeUp() async {
    _timer.cancel();
    await _testSessionService.endReadingTest();
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          title: Text(
            'Time\'s Up!',
            style: GoogleFonts.poppins(
              fontWeight: FontWeight.bold,
              color: Color(0xFF2193b0),
            ),
          ),
          content: Text(
            'Your time for the reading test has ended.',
            style: GoogleFonts.poppins(),
          ),
          actions: [
            TextButton(
              child: Text(
                'View Results',
                style: GoogleFonts.poppins(
                  color: Color(0xFF2193b0),
                  fontWeight: FontWeight.w600,
                ),
              ),
              onPressed: () {
                Navigator.of(context).pop();
                // Add navigation to results page
              },
            ),
          ],
        );
      },
    );
  }

  @override
  void dispose() {
    _timer.cancel();
    // Don't end the test when disposing unless explicitly requested
    super.dispose();
  }

  // Update back button handler
  Future<void> _handleBackButton() async {
    _timer.cancel();
    Navigator.of(context).pop();
  }

  // Update AppBar
  AppBar _buildAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      leading: IconButton(
        icon: Icon(
          Icons.arrow_back_ios_new,
          color: Color(0xFF2193b0),
        ),
        onPressed: _handleBackButton,
      ),
      title: Row(
        children: [
          Icon(
            MaterialCommunityIcons.book_open_variant,
            color: Color(0xFF2193b0),
            size: 28,
          ),
          SizedBox(width: 12),
          Text(
            'Reading Test',
            style: GoogleFonts.poppins(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Color(0xFF2193b0),
            ),
          ),
        ],
      ),
      centerTitle: false,
      actions: [
        Container(
          margin: EdgeInsets.only(right: 16),
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            border: Border.all(color: Color(0xFF2193b0)),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Row(
            children: [
              Icon(
                Icons.help_outline,
                color: Color(0xFF2193b0),
                size: 20,
              ),
              SizedBox(width: 8),
              Text(
                'Help',
                style: GoogleFonts.poppins(
                  color: Color(0xFF2193b0),
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
        ),
      ],
      toolbarHeight: 72, // Added to match grammar test
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        await _handleBackButton();
        return false;
      },
      child: Scaffold(
        appBar: _buildAppBar(),
        body: Column(
          children: [
            // Main content - updated layout
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                  ),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(32.0),
                  child: Row(
                    children: [
                      // Left panel - Reading passage and timer
                      Expanded(
                        flex: 2,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: [
                            // Reading passage card (Upper)
                            Expanded(
                              flex: 4,
                              child: Card(
                                margin: EdgeInsets.zero,
                                elevation: 8,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(24),
                                ),
                                child: Padding(
                                  padding: const EdgeInsets.all(24.0),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        children: [
                                          Text(
                                            'Reading Passage',
                                            style: GoogleFonts.poppins(
                                              fontSize: 24,
                                              fontWeight: FontWeight.bold,
                                              color: const Color(0xFF2193b0),
                                            ),
                                          ),
                                          Text(
                                            'Passage ${_currentExerciseIndex + 1} of ${_readingTests.length}',
                                            style: GoogleFonts.poppins(
                                              fontSize: 20,
                                              color: Colors.grey[600],
                                            ),
                                          ),
                                        ],
                                      ),
                                      SizedBox(height: 24),
                                      Expanded(
                                        child: SingleChildScrollView(
                                          child: Text(
                                            _currentPassage,
                                            style: GoogleFonts.poppins(
                                              fontSize: 16,
                                              height: 1.8,
                                            ),
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                            SizedBox(height: 16),
                            // Timer card (Lower)
                            Card(
                              margin: EdgeInsets.zero,
                              elevation: 8,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(24),
                              ),
                              child: Padding(
                                padding: EdgeInsets.all(24),
                                child: Row(
                                  children: [
                                    Icon(
                                      Icons.timer_outlined,
                                      color: _remainingTime.inMinutes < 5 
                                          ? Colors.red 
                                          : Color(0xFF2193b0),
                                      size: 28,
                                    ),
                                    SizedBox(width: 16),
                                    Expanded(
                                      child: Column(
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        mainAxisSize: MainAxisSize.min,
                                        children: [
                                          Text(
                                            'Time Remaining',
                                            style: GoogleFonts.poppins(
                                              fontSize: 16,
                                              fontWeight: FontWeight.w500,
                                              color: Colors.grey[600],
                                            ),
                                          ),
                                          SizedBox(height: 8),
                                          Text(
                                            _formatTime(_remainingTime),
                                            style: GoogleFonts.poppins(
                                              fontSize: 24,
                                              fontWeight: FontWeight.bold,
                                              color: _remainingTime.inMinutes < 5 
                                                  ? Colors.red 
                                                  : Color(0xFF2193b0),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    Expanded(
                                      child: ClipRRect(
                                        borderRadius: BorderRadius.circular(10),
                                        child: LinearProgressIndicator(
                                          value: _progress,
                                          backgroundColor: Colors.grey.shade200,
                                          valueColor: AlwaysStoppedAnimation<Color>(
                                            _remainingTime.inMinutes < 5 
                                                ? Colors.red 
                                                : Color(0xFF2193b0),
                                          ),
                                          minHeight: 12,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      SizedBox(width: 32),
                      // Right panel - Questions
                      Expanded(
                        child: Card(
                          elevation: 8,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(24),
                          ),
                          child: Padding(
                            padding: const EdgeInsets.all(24.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.stretch,
                              children: [
                                Text(
                                  _currentQuestions[_currentQuestionIndex]['question'],
                                  style: GoogleFonts.poppins(
                                    fontSize: 18,
                                  ),
                                ),
                                SizedBox(height: 24),
                                Expanded(
                                  child: ListView.builder(
                                    itemCount: _currentQuestions[_currentQuestionIndex]['options'].length,
                                    itemBuilder: (context, index) {
                                      return _buildOptionButton(
                                        _currentQuestions[_currentQuestionIndex]['options'][index]
                                      );
                                    },
                                  ),
                                ),
                                ElevatedButton(
                                  style: ElevatedButton.styleFrom(
                                    padding: EdgeInsets.zero,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(24),
                                    ),
                                  ),
                                  onPressed: _selectedAnswer != null
                                    ? () async {
                                        if (_currentQuestionIndex < _currentQuestions.length - 1) {
                                          // Continue to next question
                                          setState(() {
                                            _userAnswers[_getQuestionIndex(_currentExerciseIndex, _currentQuestionIndex)] = _selectedAnswer;
                                            _currentQuestionIndex++;
                                            _selectedAnswer = null;
                                          });
                                        } else if (_currentExerciseIndex < _readingTests.length - 1) {
                                          // Save answer and move to next passage
                                          _userAnswers[_getQuestionIndex(_currentExerciseIndex, _currentQuestionIndex)] = _selectedAnswer;
                                          setState(() {
                                            _currentExerciseIndex++;
                                            _currentQuestionIndex = 0;
                                            _selectedAnswer = null;
                                          });
                                        } else {
                                          // Save final answer
                                          _userAnswers[_getQuestionIndex(_currentExerciseIndex, _currentQuestionIndex)] = _selectedAnswer;
                                          
                                          // Calculate score correctly for all passages
                                          int score = 0;
                                          for (int i = 0; i < _readingTests.length; i++) {
                                            final questions = _readingTests[i]['questions'] as List;
                                            for (int j = 0; j < questions.length; j++) {
                                              final questionIndex = _getQuestionIndex(i, j);
                                              if (_userAnswers[questionIndex] == questions[j]['correctAnswer']) {
                                                score++;
                                              }
                                            }
                                          }
                                          
                                          try {
                                            // Stop the timer
                                            _timer.cancel();
                                            
                                            // Mark test as completed
                                            await _testSessionService.markTestAsCompleted('reading');
                                            
                                            // Call onTestComplete callback
                                            widget.onTestComplete?.call();
                                            
                                            final authService = AuthService();
                                            final testResultsService = TestResultsService(authService.projectId);
                                            
                                            final result = TestResult(
                                              userId: authService.getUserId() ?? 'anonymous',
                                              firstName: widget.firstName,
                                              lastName: widget.lastName,
                                              testType: 'Reading Test',
                                              score: score,
                                              totalQuestions: _getTotalQuestions(),
                                              timestamp: DateTime.now(),
                                            );
                                            
                                            await testResultsService.saveTestResult(result);
                                            
                                            if (!mounted) return;
                                            
                                            // Navigate to results page
                                            Navigator.of(context).pushReplacement(
                                              MaterialPageRoute(
                                                builder: (context) => ReadingTestResultsPage(
                                                  score: score,
                                                  totalQuestions: _getTotalQuestions(),
                                                  firstName: widget.firstName,
                                                  lastName: widget.lastName,
                                                ),
                                              ),
                                            );
                                          } catch (e) {
                                            if (!mounted) return;
                                            ScaffoldMessenger.of(context).showSnackBar(
                                              SnackBar(content: Text('Failed to save test result')),
                                            );
                                          }
                                        }
                                      }
                                    : null,
                                  child: Ink(
                                    decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                                        begin: Alignment.centerLeft,
                                        end: Alignment.centerRight,
                                      ),
                                      borderRadius: BorderRadius.circular(24),
                                    ),
                                    child: Container(
                                      height: 48,
                                      alignment: Alignment.center,
                                      child: Text(
                                        _isLastExercise ? 'Finish Test' : 'Next Passage',
                                        style: GoogleFonts.poppins(
                                          fontSize: 16,
                                          color: Colors.white,
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOptionButton(String option) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(24),
          border: Border.all(
            color: _selectedAnswer == option 
                ? Color(0xFF2193b0) 
                : Colors.grey.shade300,
            width: 2,
          ),
        ),
        child: InkWell(
          borderRadius: BorderRadius.circular(24),
          onTap: () {
            setState(() {
              _selectedAnswer = option;
            });
          },
          child: Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              gradient: _selectedAnswer == option
                  ? LinearGradient(
                      colors: [
                        Color(0xFF2193b0).withOpacity(0.1),
                        Color(0xFF6dd5ed).withOpacity(0.1)
                      ],
                      begin: Alignment.centerLeft,
                      end: Alignment.centerRight,
                  )
                  : null,
            ),
            child: Row(
              children: [
                Container(
                  width: 24,
                  height: 24,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: _selectedAnswer == option 
                          ? Color(0xFF2193b0) 
                          : Colors.grey.shade400,
                      width: 2,
                    ),
                    color: _selectedAnswer == option 
                        ? Color(0xFF2193b0) 
                        : Colors.transparent,
                  ),
                  child: _selectedAnswer == option
                      ? Icon(
                          Icons.check,
                          size: 16,
                          color: Colors.white,
                        )
                      : null,
                ),
                SizedBox(width: 16),
                Expanded(
                  child: Text(
                    option,
                    style: GoogleFonts.poppins(
                      fontSize: 16,
                      color: _selectedAnswer == option 
                          ? Color(0xFF2193b0) 
                          : Colors.black87,
                      fontWeight: _selectedAnswer == option 
                          ? FontWeight.w600 
                          : FontWeight.normal,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _formatTime(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }

  // Fix the _getTotalQuestions method
  int _getTotalQuestions() {
    return _readingTests.fold<int>(0, (sum, test) => 
        sum + (test['questions'] as List).length);
  }

  // Fix the getCurrentQuestionNumber method
  int _getCurrentQuestionNumber() {
    int questionNumber = 0;
    for (int i = 0; i < _currentExerciseIndex; i++) {
      questionNumber += (_readingTests[i]['questions'] as List).length;
    }
    return questionNumber + _currentQuestionIndex + 1;
  }

  // Add this helper method to get total questions in current exercise
  int _getTotalQuestionsInCurrentExercise() {
    return _readingTests[_currentExerciseIndex]['questions'].length;
  }

  // Update this helper method to properly cast the questions list
  int _getQuestionIndex(int exerciseIndex, int questionIndex) {
    int index = 0;
    for (int i = 0; i < exerciseIndex; i++) {
      index += (_readingTests[i]['questions'] as List).length;
    }
    return index + questionIndex;
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\reading_test_results_page.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_vector_icons/flutter_vector_icons.dart';

class ReadingTestResultsPage extends StatelessWidget {
  final int score;
  final int totalQuestions;
  final String firstName;
  final String lastName;

  const ReadingTestResultsPage({
    Key? key,
    required this.score,
    required this.totalQuestions,
    required this.firstName,
    required this.lastName,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final percentage = (score / totalQuestions) * 100;
    final grade = _calculateGrade(percentage);

    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Row(
          children: [
            // Left Side Panel
            Container(
              width: 280,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                ),
              ),
              padding: EdgeInsets.all(20),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircleAvatar(
                    radius: 50,
                    backgroundColor: Colors.white,
                    child: Text(
                      '${percentage.toStringAsFixed(0)}%',
                      style: GoogleFonts.poppins(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2193b0),
                      ),
                    ),
                  ),
                  SizedBox(height: 16),
                  Text(
                    grade,
                    style: GoogleFonts.poppins(
                      fontSize: 24,
                      fontWeight: FontWeight.w500,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    '$firstName $lastName',
                    style: GoogleFonts.poppins(
                      fontSize: 18,
                      color: Colors.white.withOpacity(0.9),
                    ),
                  ),
                ],
              ),
            ),

            // Main Content Area
            Expanded(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(32),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Reading Test Results',
                      style: GoogleFonts.poppins(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2193b0),
                      ),
                    ),
                    SizedBox(height: 32),
                    
                    // Stats Cards
                    Row(
                      children: [
                        Expanded(child: _buildStatCard('Correct', score, Icons.check_circle_outline, Colors.green)),
                        SizedBox(width: 16),
                        Expanded(child: _buildStatCard('Wrong', totalQuestions - score, Icons.cancel_outlined, Colors.red)),
                        SizedBox(width: 16),
                        Expanded(child: _buildStatCard('Total', totalQuestions, Icons.assignment_outlined, Color(0xFF2193b0))),
                      ],
                    ),
                    
                    SizedBox(height: 32),
                    
                    // Return Home Button
                    Align(
                      alignment: Alignment.centerRight,
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.of(context).pushNamedAndRemoveUntil('/home', (route) => false);
                        },
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                          backgroundColor: Color(0xFF2193b0),
                          elevation: 0,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: Text(
                          'Return Home',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatCard(String title, int value, IconData icon, Color color) {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 32),
          SizedBox(height: 12),
          Text(
            value.toString(),
            style: GoogleFonts.poppins(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            title,
            style: GoogleFonts.poppins(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
        ],
      ),
    );
  }

  String _calculateGrade(double percentage) {
    if (percentage >= 90) return 'Excellent';
    if (percentage >= 80) return 'Very Good';
    if (percentage >= 70) return 'Good';
    if (percentage >= 60) return 'Fair';
    return 'Need Practice';
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\screens\registration_page.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:test_windows_students/screens/instruction_page.dart';
import 'package:file_picker/file_picker.dart';
import 'package:test_windows_students/services/auth_service.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class RegistrationPage extends StatefulWidget {
  const RegistrationPage({super.key});

  @override
  State<RegistrationPage> createState() => _RegistrationPageState();
}

class _RegistrationPageState extends State<RegistrationPage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoading = false;
  final AuthService _authService = AuthService();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  Future<void> _signIn() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final response = await _authService.signInWithEmailAndPassword(
        _emailController.text.trim(),
        _passwordController.text.trim(),
      );

      if (response['idToken'] != null && mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const InstructionPage()),
        );
      }
    } catch (error) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(error.toString().replaceAll('Exception: ', '')),
            backgroundColor: Colors.red[400],
          ),
        );
      }
    }

    setState(() {
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFF2193b0),
              Color(0xFF6dd5ed),
            ],
          ),
        ),
        child: Center(
          child: Card(
            elevation: 8,
            margin: EdgeInsets.all(32),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            child: Container(
              constraints: BoxConstraints(maxWidth: 400),
              padding: const EdgeInsets.all(32),
              child: Form(
                key: _formKey,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    Icon(
                      Icons.lock_outline,
                      size: 50,
                      color: Color(0xFF2193b0),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'Welcome Back',
                      style: GoogleFonts.poppins(
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2193b0),
                      ),
                      textAlign: TextAlign.center,
                    ),
                    Text(
                      'Please sign in to continue',
                      style: GoogleFonts.poppins(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 32),
                    _buildTextField(
                      label: 'Email',
                      controller: _emailController,
                      prefixIcon: Icons.email_outlined,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter your email';
                        }
                        if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                          return 'Please enter a valid email';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),
                    _buildTextField(
                      label: 'Password',
                      controller: _passwordController,
                      prefixIcon: Icons.lock_outline,
                      isPassword: true,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter a password';
                        }
                        if (value.length < 6) {
                          return 'Password must be at least 6 characters';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 24),
                    ElevatedButton(
                      onPressed: _isLoading ? null : _signIn,
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        backgroundColor: Color(0xFF2193b0),
                        elevation: 3,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(30),
                        ),
                      ),
                      child: _isLoading
                          ? SizedBox(
                              height: 20,
                              width: 20,
                              child: CircularProgressIndicator(
                                color: Colors.white,
                                strokeWidth: 2,
                              ),
                            )
                          : Text(
                              'Sign In',
                              style: GoogleFonts.poppins(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                                color: Colors.white,
                              ),
                            ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required String label,
    required TextEditingController controller,
    required IconData prefixIcon,
    bool isPassword = false,
    String? Function(String?)? validator,
  }) {
    return TextFormField(
      controller: controller,
      obscureText: isPassword,
      validator: validator,
      style: GoogleFonts.poppins(),
      decoration: InputDecoration(
        labelText: label,
        labelStyle: GoogleFonts.poppins(color: Colors.grey[600]),
        prefixIcon: Icon(prefixIcon, color: Color(0xFF2193b0)),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide(color: Colors.grey[300]!),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide(color: Color(0xFF2193b0), width: 2),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide(color: Colors.red[300]!),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide(color: Colors.red[300]!, width: 2),
        ),
        filled: true,
        fillColor: Colors.grey[50],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\services\auth_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;

class AuthService {
  final String _apiKey = 'AIzaSyAyNWHQXz89YL02R4RrSun80w1C2yLsTRY';
  final String projectId = 'testapp-a0f67'; // Make this accessible
  final String _baseUrl = 'https://identitytoolkit.googleapis.com/v1/accounts';

  // Sign in with email and password
  Future<Map<String, dynamic>> signInWithEmailAndPassword(String email, String password) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl:signInWithPassword?key=$_apiKey'),
        body: json.encode({
          'email': email,
          'password': password,
          'returnSecureToken': true,
        }),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        final errorResponse = json.decode(response.body);
        final errorMessage = _getReadableErrorMessage(errorResponse['error']['message']);
        throw Exception(errorMessage);
      }
    } catch (e) {
      print('Error in signInWithEmailAndPassword: $e');
      rethrow;
    }
  }

  String _getReadableErrorMessage(String firebaseError) {
    switch (firebaseError) {
      case 'INVALID_LOGIN_CREDENTIALS':
        return 'Invalid email or password. Please try again.';
      case 'EMAIL_NOT_FOUND':
        return 'No account found with this email.';
      case 'INVALID_PASSWORD':
        return 'Incorrect password.';
      case 'USER_DISABLED':
        return 'This account has been disabled.';
      default:
        return 'An error occurred during sign in. Please try again.';
    }
  }

  // Register with email and password
  Future<Map<String, dynamic>> signUpWithEmailAndPassword(String email, String password) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl:signUp?key=$_apiKey'),
        body: json.encode({
          'email': email,
          'password': password,
          'returnSecureToken': true,
        }),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        final error = 'Failed to sign up: ${response.body}';
        print(error); // Log to console
        throw Exception(error);
      }
    } catch (e) {
      print('Error in signUpWithEmailAndPassword: $e'); // Log to console
      rethrow;
    }
  }

  // Sign out
  Future<void> signOut() async {
    // For Firebase REST API, sign out is typically handled on the client side
    // by removing the stored authentication token
    // You may want to clear any stored user data or tokens here
  }

  // Password reset
  Future<void> sendPasswordResetEmail(String email) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl:sendOobCode?key=$_apiKey'),
        body: json.encode({
          'email': email,
          'requestType': 'PASSWORD_RESET',
        }),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode != 200) {
        final error = 'Failed to send password reset email: ${response.body}';
        print(error); // Log to console
        throw Exception(error);
      }
    } catch (e) {
      print('Error in sendPasswordResetEmail: $e'); // Log to console
      rethrow;
    }
  }

  // Check if user is signed in
  bool isSignedIn() {
    // This would typically involve checking if you have a valid token stored
    // For now, we'll return false as a placeholder
    return false;
  }

  // Get user id
  String? getUserId() {
    // This should return the ID of the currently logged-in user
    // You might need to store this ID when the user logs in
    // For now, let's return null as a placeholder
    return null;
  }

  // Stream of auth state changes
  // Note: Implementing this with REST API is not straightforward
  // You might need to use a different approach for real-time auth state
  Stream<dynamic> get authStateChanges => Stream.empty();
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\services\test_results_service.dart
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../models/test_result.dart';

class TestResultsService {
  final String projectId;
  
  TestResultsService(this.projectId);

  Future<void> saveTestResult(TestResult result) async {
    try {
      final url = 'https://$projectId-default-rtdb.firebaseio.com/test_results.json';
      
      final response = await http.post(
        Uri.parse(url),
        body: json.encode(result.toJson()),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode != 200) {
        throw Exception('Failed to save test result');
      }
    } catch (e) {
      print('Error saving test result: $e');
      rethrow;
    }
  }
}


    File: C:\Users\LENOVO\Desktop\flutter projects\test_windows_students\lib\services\test_session_service.dart
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:async';

class TestStatus {
  final bool isListeningActive;
  final bool isReadingActive;
  final bool isGrammarActive;

  TestStatus({
    required this.isListeningActive,
    required this.isReadingActive,
    required this.isGrammarActive,
  });
}

class TestSessionService {
  static const String _listeningStartTimeKey = 'listening_start_time';
  static const String _listeningActiveKey = 'listening_test_active';
  static const String _listeningEndTimeKey = 'listening_end_time';
  static const String _readingActiveKey = 'reading_test_active';
  static const String _readingEndTimeKey = 'reading_end_time';
  static const String _grammarActiveKey = 'grammar_test_active';
  static const String _grammarEndTimeKey = 'grammar_end_time';
  static const String _listeningCompletedKey = 'listening_test_completed';
  static const String _readingCompletedKey = 'reading_test_completed';
  static const String _grammarCompletedKey = 'grammar_test_completed';
  
  static const int testDurationMinutes = 15;
  static const int readingTestDurationMinutes = 20;
  static const int grammarTestDurationMinutes = 15;  // Change this to 15

  // Add StreamController for test status
  static final _testStatusController = StreamController<TestStatus>.broadcast();
  Stream<TestStatus> get testStatusStream => _testStatusController.stream;

  // Start a new test session by storing the end time
  Future<void> startListeningTest() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();
    final endTime = now.add(Duration(minutes: testDurationMinutes));
    
    await prefs.setBool(_listeningActiveKey, true);
    await prefs.setString(_listeningEndTimeKey, endTime.toIso8601String());
    await _updateTestStatus();
  }

  // Get remaining time based on stored end time
  Future<Duration?> getListeningRemainingTime() async {
    final prefs = await SharedPreferences.getInstance();
    final isActive = prefs.getBool(_listeningActiveKey) ?? false;
    if (!isActive) return null;

    final endTimeStr = prefs.getString(_listeningEndTimeKey);
    if (endTimeStr == null) return null;

    final endTime = DateTime.parse(endTimeStr);
    final now = DateTime.now();
    final remaining = endTime.difference(now);

    // If time has expired
    if (remaining.isNegative) {
      await endListeningTest();
      return Duration.zero;
    }

    return remaining;
  }

  // End the test session
  Future<void> endListeningTest() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_listeningStartTimeKey);
    await prefs.remove(_listeningEndTimeKey);
    await prefs.setBool(_listeningActiveKey, false);
    await _updateTestStatus();
  }

  // Check if test is active and not expired
  Future<bool> isListeningTestActive() async {
    final remainingTime = await getListeningRemainingTime();
    return remainingTime != null && !remainingTime.isNegative;
  }

  Future<bool> isReadingTestActive() async {
    final remainingTime = await getReadingRemainingTime();
    return remainingTime != null && !remainingTime.isNegative;
  }

  Future<Duration?> getReadingRemainingTime() async {
    final prefs = await SharedPreferences.getInstance();
    final isActive = prefs.getBool(_readingActiveKey) ?? false;
    if (!isActive) return null;

    final endTimeStr = prefs.getString(_readingEndTimeKey);
    if (endTimeStr == null) return null;

    final endTime = DateTime.parse(endTimeStr);
    final now = DateTime.now();
    final remaining = endTime.difference(now);

    if (remaining.isNegative) {
      await endReadingTest();
      return Duration.zero;
    }

    return remaining;
  }

  Future<void> startReadingTest() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();
    final endTime = now.add(Duration(minutes: readingTestDurationMinutes));
    
    await prefs.setBool(_readingActiveKey, true);
    await prefs.setString(_readingEndTimeKey, endTime.toIso8601String());
    await _updateTestStatus();
  }

  Future<void> endReadingTest() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_readingEndTimeKey);
    await prefs.setBool(_readingActiveKey, false);
    await _updateTestStatus();
  }

  Future<void> clearAllSessions() async {
    final prefs = await SharedPreferences.getInstance();
    
    // Clear listening test session
    await prefs.remove(_listeningStartTimeKey);
    await prefs.remove(_listeningActiveKey);
    await prefs.remove(_listeningEndTimeKey);
    await prefs.remove(_listeningCompletedKey);
    
    // Clear reading test session
    await prefs.remove(_readingActiveKey);
    await prefs.remove(_readingEndTimeKey);
    await prefs.remove(_readingCompletedKey);
    
    // Clear grammar test session
    await prefs.remove(_grammarActiveKey);
    await prefs.remove(_grammarEndTimeKey);
    await prefs.remove(_grammarCompletedKey);
    
    // Clear any other test-related data
    await prefs.remove('current_test_type');
    await prefs.remove('current_question_index');
    await prefs.remove('test_answers');
    await prefs.remove('test_score');
    
    // Update test status
    await _updateTestStatus();
  }

  // Add method to check if any test is active
  Future<bool> isAnyTestActive() async {
    final isListening = await isListeningTestActive();
    final isReading = await isReadingTestActive();
    return isListening || isReading;
  }

  // Add dispose method
  void dispose() {
    _testStatusController.close();
  }

  Future<void> startGrammarTest() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();
    final endTime = now.add(Duration(minutes: grammarTestDurationMinutes));
    
    await prefs.setBool(_grammarActiveKey, true);
    await prefs.setString(_grammarEndTimeKey, endTime.toIso8601String());
    await _updateTestStatus();
  }

  Future<Duration?> getGrammarRemainingTime() async {
    final prefs = await SharedPreferences.getInstance();
    final isActive = prefs.getBool(_grammarActiveKey) ?? false;
    if (!isActive) return null;

    final endTimeStr = prefs.getString(_grammarEndTimeKey);
    if (endTimeStr == null) return null;

    final endTime = DateTime.parse(endTimeStr);
    final now = DateTime.now();
    final remaining = endTime.difference(now);

    if (remaining.isNegative) {
      await endGrammarTest();
      return Duration.zero;
    }

    return remaining;
  }

  Future<bool> isGrammarTestActive() async {
    final remainingTime = await getGrammarRemainingTime();
    return remainingTime != null && !remainingTime.isNegative;
  }

  Future<void> endGrammarTest() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_grammarEndTimeKey);
    await prefs.setBool(_grammarActiveKey, false);
    await _updateTestStatus();
  }

  Future<void> _updateTestStatus() async {
    final isListening = await isListeningTestActive();
    final isReading = await isReadingTestActive();
    final isGrammar = await isGrammarTestActive();
    _testStatusController.add(TestStatus(
      isListeningActive: isListening,
      isReadingActive: isReading,
      isGrammarActive: isGrammar,
    ));
  }

  Future<void> markTestAsCompleted(String testType) async {
    final prefs = await SharedPreferences.getInstance();
    switch (testType) {
      case 'listening':
        await prefs.setBool(_listeningCompletedKey, true);
        await endListeningTest();
        break;
      case 'reading':
        await prefs.setBool(_readingCompletedKey, true);
        await endReadingTest();
        break;
      case 'grammar':
        await prefs.setBool(_grammarCompletedKey, true);
        await endGrammarTest();
        break;
    }
    await _updateTestStatus();
  }

  Future<bool> isTestCompleted(String testType) async {
    final prefs = await SharedPreferences.getInstance();
    switch (testType) {
      case 'listening':
        return prefs.getBool(_listeningCompletedKey) ?? false;
      case 'reading':
        return prefs.getBool(_readingCompletedKey) ?? false;
      case 'grammar':
        return prefs.getBool(_grammarCompletedKey) ?? false;
      default:
        return false;
    }
  }
}

